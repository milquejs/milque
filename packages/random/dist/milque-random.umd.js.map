{"version":3,"file":"milque-random.umd.js","sources":["../src/generators/RandomBase.js","../src/generators/MathRandom.js","../src/generators/Mulberry32.js","../src/Random.js","../src/generators/SmallFastCounter32.js"],"sourcesContent":["/**\n * @typedef RandomGeneratorLike\n * @property {NumberFunction} next\n *\n * @callback NumberFunction Generates a pseudo-random number\n * from 0 inclusive to 1 exclusive.\n * @returns {number} A pseudo-randomly generated number.\n */\n\n/**\n * Represents a pseudo-random number generator. This is only used for\n * type information.\n *\n * All random number generator instances are expected to implement\n * {@link RandomGeneratorLike}. If using classes, you can extend\n * {@link RandomBase} to enforce this, but this should not necessary\n * nor assumed.\n */\nexport class RandomBase {\n  /**\n   * Generates a pseudo-random number from 0 inclusive to 1 exclusive.\n   *\n   * @abstract\n   * @returns {number} A pseudo-randomly generated number.\n   */\n  next() {\n    return 0;\n  }\n}\n","import { RandomBase } from './RandomBase.js';\n\nexport class MathRandom extends RandomBase {\n  /** @override */\n  next() {\n    return Math.random();\n  }\n}\n","import { RandomBase } from './RandomBase.js';\n\n/**\n * A simple and fast 32-bit PRNG.\n *\n * @see {@link https://github.com/bryc/code/blob/master/jshash/PRNGs.md}\n */\nexport class Mulberry32 extends RandomBase {\n  /**\n   * @param {number} seed An unsigned 32-bit integer.\n   */\n  constructor(seed) {\n    super();\n\n    this.seed = seed;\n\n    /** @private */\n    this.a = seed;\n  }\n\n  /** @override */\n  next() {\n    var t = (this.a += 0x6d2b79f5);\n    t = Math.imul(t ^ (t >>> 15), t | 1);\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\n  }\n}\n","import { MathRandom } from './generators/MathRandom.js';\nimport { Mulberry32 } from './generators/Mulberry32.js';\n\n/**\n * @typedef {import('./generators/RandomBase.js').RandomGeneratorLike} RandomGeneratorLike\n * @typedef {import('./generators/RandomBase.js').RandomBase} RandomBase\n */\n\nexport class Random {\n  /**\n   * The lazily-initiated, static instance of this random class.\n   */\n  static get RAND() {\n    let instance = new this();\n\n    this.next = this.next.bind(this);\n    this.choose = this.choose.bind(this);\n    this.range = this.range.bind(this);\n    this.rangeInt = this.rangeInt.bind(this);\n    this.sign = this.sign.bind(this);\n\n    Object.defineProperty(this, 'RAND', { value: instance });\n    return instance;\n  }\n\n  /**\n   * @param {RandomGeneratorLike|RandomBase|number} [randomGenerator]\n   * If number type, the param will be used as a seed for a Mulberry32 PRNG.\n   * Otherwise, it is the pseudo-random number generator object that provides\n   * the generated numbers through `next()`. By default, if undefined, this\n   * will use the browser-specific `Math.random()` implementation.\n   */\n  constructor(randomGenerator = undefined) {\n    if (typeof randomGenerator === 'number') {\n      this.generator = new Mulberry32(randomGenerator);\n    } else if (randomGenerator) {\n      this.generator = randomGenerator;\n    } else {\n      this.generator = new MathRandom();\n    }\n\n    this.next = this.next.bind(this);\n    this.choose = this.choose.bind(this);\n    this.range = this.range.bind(this);\n    this.rangeInt = this.rangeInt.bind(this);\n    this.sign = this.sign.bind(this);\n  }\n\n  static next() {\n    return this.RAND.next();\n  }\n  next() {\n    return this.generator.next();\n  }\n\n  /**\n   * @template T\n   * @param {Array<T>} list\n   * @returns {T}\n   */\n  static choose(list) {\n    return this.RAND.choose(list);\n  }\n  /**\n   * @template T\n   * @param {Array<T>} list\n   * @returns {T}\n   */\n  choose(list) {\n    return list[Math.floor(this.generator.next() * list.length)];\n  }\n\n  /**\n   * @param {number} min Min range (inclusive)\n   * @param {number} max Max range (exclusive)\n   * @returns {number}\n   */\n  static range(min, max) {\n    return this.RAND.range(min, max);\n  }\n  /**\n   * @param {number} min Min range (inclusive)\n   * @param {number} max Max range (exclusive)\n   * @returns {number}\n   */\n  range(min, max) {\n    return (max - min) * this.generator.next() + min;\n  }\n\n  /**\n   * @param {number} min Min integer range (inclusive)\n   * @param {number} max Max integer range (exclusive)\n   * @returns {number}\n   */\n  static rangeInt(min, max) {\n    return this.RAND.rangeInt(min, max);\n  }\n  /**\n   * @param {number} min Min integer range (inclusive)\n   * @param {number} max Max integer range (exclusive)\n   * @returns {number}\n   */\n  rangeInt(min, max) {\n    return Math.trunc(this.range(min, max));\n  }\n\n  /**\n   * @returns {-1|1}\n   */\n  static sign() {\n    return this.RAND.sign();\n  }\n  /**\n   * @returns {-1|1}\n   */\n  sign() {\n    return this.generator.next() < 0.5 ? -1 : 1;\n  }\n}\n","import { RandomBase } from './RandomBase.js';\n\n/**\n * A very fast 32-bit PRNG.\n *\n * @see https://github.com/bryc/code/blob/master/jshash/PRNGs.md\n */\nexport class SmallFastCounter32 extends RandomBase {\n  /**\n   * @param {number} a An unsigned 32-bit integer.\n   * @param {number} b An unsigned 32-bit integer.\n   * @param {number} c An unsigned 32-bit integer.\n   * @param {number} d An unsigned 32-bit integer.\n   */\n  constructor(a, b, c, d) {\n    super();\n\n    /** @private */\n    this.a = a;\n    /** @private */\n    this.b = b;\n    /** @private */\n    this.c = c;\n    /** @private */\n    this.d = d;\n  }\n\n  /** @override */\n  next() {\n    let { a, b, c, d } = this;\n    a |= 0;\n    b |= 0;\n    c |= 0;\n    d |= 0;\n    let t = (((a + b) | 0) + d) | 0;\n    d = (d + 1) | 0;\n    a = b ^ (b >>> 9);\n    b = (c + (c << 3)) | 0;\n    c = (c << 21) | (c >>> 11);\n    c = (c + t) | 0;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    return (t >>> 0) / 4294967296;\n  }\n}\n"],"names":["RandomBase","next","MathRandom","Math","random","Mulberry32","constructor","seed","super","this","a","t","imul","RAND","instance","bind","choose","range","rangeInt","sign","Object","defineProperty","value","randomGenerator","generator","static","list","floor","length","min","max","trunc","b","c","d"],"mappings":"6QAkBO,MAAMA,EAOXC,OACE,OAAO,CACR,ECzBI,MAAMC,UAAmBF,EAE9BC,OACE,OAAOE,KAAKC,QACb,ECCI,MAAMC,UAAmBL,EAI9BM,YAAYC,GACVC,QAEAC,KAAKF,KAAOA,EAGZE,KAAKC,EAAIH,CACV,CAGDN,OACE,IAAIU,EAAKF,KAAKC,GAAK,WAGnB,OAFAC,EAAIR,KAAKS,KAAKD,EAAKA,IAAM,GAAS,EAAJA,MAC9BA,GAAKA,EAAIR,KAAKS,KAAKD,EAAKA,IAAM,EAAQ,GAAJA,IACpBA,IAAM,MAAS,GAAK,UACnC,yCClBI,MAIME,kBACT,IAAIC,EAAW,IAAIL,KASnB,OAPAA,KAAKR,KAAOQ,KAAKR,KAAKc,KAAKN,MAC3BA,KAAKO,OAASP,KAAKO,OAAOD,KAAKN,MAC/BA,KAAKQ,MAAQR,KAAKQ,MAAMF,KAAKN,MAC7BA,KAAKS,SAAWT,KAAKS,SAASH,KAAKN,MACnCA,KAAKU,KAAOV,KAAKU,KAAKJ,KAAKN,MAE3BW,OAAOC,eAAeZ,KAAM,OAAQ,CAAEa,MAAOR,IACtCA,CACR,CASDR,YAAYiB,GAERd,KAAKe,UADwB,iBAApBD,EACQ,IAAIlB,EAAWkB,GACvBA,GAGQ,IAAIrB,EAGvBO,KAAKR,KAAOQ,KAAKR,KAAKc,KAAKN,MAC3BA,KAAKO,OAASP,KAAKO,OAAOD,KAAKN,MAC/BA,KAAKQ,MAAQR,KAAKQ,MAAMF,KAAKN,MAC7BA,KAAKS,SAAWT,KAAKS,SAASH,KAAKN,MACnCA,KAAKU,KAAOV,KAAKU,KAAKJ,KAAKN,KAC5B,CAEDgB,cACE,OAAOhB,KAAKI,KAAKZ,MAClB,CACDA,OACE,OAAOQ,KAAKe,UAAUvB,MACvB,CAODwB,cAAcC,GACZ,OAAOjB,KAAKI,KAAKG,OAAOU,EACzB,CAMDV,OAAOU,GACL,OAAOA,EAAKvB,KAAKwB,MAAMlB,KAAKe,UAAUvB,OAASyB,EAAKE,QACrD,CAODH,aAAaI,EAAKC,GAChB,OAAOrB,KAAKI,KAAKI,MAAMY,EAAKC,EAC7B,CAMDb,MAAMY,EAAKC,GACT,OAAQA,EAAMD,GAAOpB,KAAKe,UAAUvB,OAAS4B,CAC9C,CAODJ,gBAAgBI,EAAKC,GACnB,OAAOrB,KAAKI,KAAKK,SAASW,EAAKC,EAChC,CAMDZ,SAASW,EAAKC,GACZ,OAAO3B,KAAK4B,MAAMtB,KAAKQ,MAAMY,EAAKC,GACnC,CAKDL,cACE,OAAOhB,KAAKI,KAAKM,MAClB,CAIDA,OACE,OAAOV,KAAKe,UAAUvB,OAAS,IAAO,EAAI,CAC3C,uCC9GI,cAAiCD,EAOtCM,YAAYI,EAAGsB,EAAGC,EAAGC,GACnB1B,QAGAC,KAAKC,EAAIA,EAETD,KAAKuB,EAAIA,EAETvB,KAAKwB,EAAIA,EAETxB,KAAKyB,EAAIA,CACV,CAGDjC,OACE,IAAIS,EAAEA,EAACsB,EAAEA,EAACC,EAAEA,EAACC,EAAEA,GAAMzB,KACrBC,GAAK,EACLsB,GAAK,EACLC,GAAK,EACLC,GAAK,EACL,IAAIvB,GAAOD,EAAIsB,EAAK,GAAKE,EAAK,EAU9B,OATAA,EAAKA,EAAI,EAAK,EACdxB,EAAIsB,EAAKA,IAAM,EACfA,EAAKC,GAAKA,GAAK,GAAM,EACrBA,EAAKA,GAAK,GAAOA,IAAM,GACvBA,EAAKA,EAAItB,EAAK,EACdF,KAAKC,EAAIA,EACTD,KAAKuB,EAAIA,EACTvB,KAAKwB,EAAIA,EACTxB,KAAKyB,EAAIA,GACDvB,IAAM,GAAK,UACpB"}