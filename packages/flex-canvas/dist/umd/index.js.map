{"version":3,"file":"index.js","sources":["../../src/FlexCanvasScaling.js","../../src/FlexCanvas.js","../../src/FlexCanvas.template.js","../../src/FlexCanvas.style.js","../../src/FlexCanvasSizing.js","../../src/index.js"],"sourcesContent":["/**\n * @param {import('./FlexCanvas').ScalingMode} scalingMode\n * @param {HTMLElement} element\n * @param {HTMLCanvasElement} canvas\n * @param {number} canvasWidth\n * @param {number} canvasHeight\n */\nexport function resizeFor(\n  scalingMode,\n  element,\n  canvas,\n  canvasWidth,\n  canvasHeight\n) {\n  const clientRect = element.getBoundingClientRect();\n  const clientWidth = clientRect.width;\n  const clientHeight = clientRect.height;\n  switch (scalingMode) {\n    case 'fill':\n      resizeForFill(\n        canvas,\n        canvasWidth,\n        canvasHeight,\n        clientWidth,\n        clientHeight\n      );\n      return;\n    case 'fit':\n      resizeForFill(\n        canvas,\n        canvasWidth,\n        canvasHeight,\n        clientWidth,\n        clientHeight\n      );\n      return;\n    case 'scale':\n      resizeForScale(\n        canvas,\n        canvasWidth,\n        canvasHeight,\n        clientWidth,\n        clientHeight\n      );\n      return;\n    case 'stretch':\n      resizeForStretch(\n        canvas,\n        clientWidth,\n        clientHeight\n      );\n      return;\n    case 'noscale':\n    default:\n      resizeForNoScale(\n        element,\n        canvasWidth,\n        canvasHeight\n      );\n      return;\n  }\n}\n\n/**\n * @param {HTMLElement} element\n * @param {number} canvasWidth\n * @param {number} canvasHeight\n */\nexport function resizeForNoScale(\n  element,\n  canvasWidth,\n  canvasHeight,\n) {\n  element.style.setProperty('--width', `${canvasWidth}px`);\n  element.style.setProperty('--height', `${canvasHeight}px`);\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} canvasWidth\n * @param {number} canvasHeight\n * @param {number} clientWidth\n * @param {number} clientHeight\n */\nexport function resizeForScale(\n  canvas,\n  canvasWidth,\n  canvasHeight,\n  clientWidth,\n  clientHeight\n) {\n  const ratioX = clientWidth / canvasWidth;\n  const ratioY = clientHeight / canvasHeight;\n  if (ratioX < ratioY) {\n    canvas.style.setProperty('width', `${Math.floor(clientWidth)}px`);\n    canvas.style.setProperty(\n      'height',\n      `${Math.floor(canvasHeight * ratioX)}px`\n    );\n  } else {\n    canvas.style.setProperty('width', `${Math.floor(canvasWidth * ratioY)}px`);\n    canvas.style.setProperty('height', `${Math.floor(clientHeight)}px`);\n  }\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} clientWidth\n * @param {number} clientHeight\n */\nexport function resizeForStretch(\n  canvas,\n  clientWidth,\n  clientHeight\n) {\n  canvas.style.setProperty('width', `${Math.floor(clientWidth)}px`);\n  canvas.style.setProperty('height', `${Math.floor(clientHeight)}px`);\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} canvasWidth\n * @param {number} canvasHeight\n * @param {number} clientWidth\n * @param {number} clientHeight\n */\nexport function resizeForFit(\n  canvas,\n  canvasWidth,\n  canvasHeight,\n  clientWidth,\n  clientHeight\n) {\n  const ratioX = clientWidth / canvasWidth;\n  const ratioY = clientHeight / canvasHeight;\n  if (ratioX < ratioY) {\n    canvasWidth = Math.floor(clientWidth);\n    canvasHeight = Math.floor(canvasHeight * ratioX);\n    canvas.style.setProperty('width', `${canvasWidth}px`);\n    canvas.style.setProperty('height', `${canvasHeight}px`);\n  } else {\n    canvasWidth = Math.floor(canvasWidth * ratioY);\n    canvasHeight = Math.floor(clientHeight);\n    canvas.style.setProperty('width', `${canvasWidth}px`);\n    canvas.style.setProperty('height', `${canvasHeight}px`);\n  }\n  if (canvas.width !== canvasWidth) {\n    canvas.width = canvasWidth;\n  }\n  if (canvas.height !== canvasHeight) {\n    canvas.height = canvasHeight;\n  }\n}\n\n/**\n * @param {HTMLCanvasElement} canvas\n * @param {number} canvasWidth\n * @param {number} canvasHeight\n * @param {number} clientWidth\n * @param {number} clientHeight\n */\nexport function resizeForFill(\n  canvas,\n  canvasWidth,\n  canvasHeight,\n  clientWidth,\n  clientHeight\n) {\n  const ratioX = clientWidth / canvasWidth;\n  const ratioY = clientHeight / canvasHeight;\n  if (ratioX < ratioY) {\n    canvasWidth = Math.floor(clientWidth);\n    canvasHeight = Math.floor(clientHeight);\n    canvas.style.setProperty('width', `${canvasWidth}px`);\n    canvas.style.setProperty('height', `${canvasHeight}px`);\n  } else {\n    canvasWidth = Math.floor(clientWidth);\n    canvasHeight = Math.floor(clientHeight);\n    canvas.style.setProperty('width', `${canvasWidth}px`);\n    canvas.style.setProperty('height', `${canvasHeight}px`);\n  }\n  if (canvas.width !== canvasWidth) {\n    canvas.width = canvasWidth;\n  }\n  if (canvas.height !== canvasHeight) {\n    canvas.height = canvasHeight;\n  }\n}\n","import INNER_STYLE from './FlexCanvas.style';\nimport INNER_HTML from './FlexCanvas.template';\nimport { resizeFor } from './FlexCanvasScaling';\nimport { matchDimensionTo } from './FlexCanvasSizing';\n\n/** @typedef {ScalingModes[keyof ScalingModes]} ScalingMode */\n\n/**\n * The supported ways to scale pixes when canvas resizes.\n */\nconst ScalingModes = /** @type {const} */ ({\n  /**\n   * No scaling is applied. The canvas size maintains a\n   * 1:1 pixel ratio to the defined display dimensions.\n   */\n  NOSCALE: 'noscale',\n  /**\n   * Scales the canvas to fill the entire viewport and\n   * maintains the same aspect ratio. This will adjust\n   * canvas resolution to fit the viewport dimensions.\n   * In other words, the canvas pixel size remains\n   * constant, but the number of pixels in the canvas\n   * will increase or decrease to compensate.\n   */\n  FIT: 'fit',\n  /**\n   * Scales the canvas to fill the entire viewport and\n   * maintains the same aspect ratio and pixel\n   * resolution. This will upscale and downscale the\n   * pixel size depending on the viewport dimentions\n   * in order to preserve the canvas pixel count. In\n   * other words, the number of pixels in the canvas\n   * remain constant but appear larger or smaller to\n   * compensate. This is the default scaling mode.\n   */\n  SCALE: 'scale',\n  /**\n   * Resizes the canvas to fill the entire viewport.\n   * This does not maintain the aspect ratio nor pixel\n   * count (adds and removes pixels to fill size). If you\n   * care about aspect ratio but not pixel count, consider\n   * using 'fit' mode instead.\n   */\n  FILL: 'fill',\n  /**\n   * Scales the canvas to fill the entire viewport.\n   * This does not maintain the aspect ratio but\n   * does preserve pixel count (by stretching the pixel\n   * size). If you care about aspect ratio and pixel\n   * count, consider using 'scale' mode instead.\n   */\n  STRETCH: 'stretch',\n});\n\n/** @typedef {SizingModes[keyof SizingModes]} SizingMode */\n\n/**\n * The supported containers to match to for canvas dimensions.\n */\nconst SizingModes = /** @type {const} */ ({\n  /**\n   * Sizes to the original canvas width and height.\n   */\n  NONE: 'none',\n  /**\n   * Sizes to 100% of parent container.\n   */\n  CONTAINER: 'container',\n  /**\n   * Sizes to 100vw/h of viewport.\n   */\n  VIEWPORT: 'viewport',\n});\n\n/**\n * The default display x dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_WIDTH = 300;\n/**\n * The default display y dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_HEIGHT = 150;\n\nconst TEMPLATE_NODE = Symbol.for('templateNode');\nconst TEMPLATE_STYLE = Symbol.for('styleNode');\n\n/**\n * A canvas wrapper to scale and stretch with respect to the aspect ratio to fill the viewport or container.\n */\nexport class FlexCanvas extends HTMLElement {\n\n  static define(name = 'flex-canvas') {\n    window.customElements.define(name, this);\n  }\n\n  /** @private */\n  static get [TEMPLATE_NODE]() {\n    let t = document.createElement('template');\n    t.innerHTML = INNER_HTML;\n    Object.defineProperty(this, TEMPLATE_NODE, { value: t });\n    return t;\n  }\n\n  /** @private */\n  static get [TEMPLATE_STYLE]() {\n    let t = document.createElement('style');\n    t.innerHTML = INNER_STYLE;\n    Object.defineProperty(this, TEMPLATE_STYLE, { value: t });\n    return t;\n  }\n\n  /**\n   * Override web component behavior.\n   * @protected\n   */\n  static get observedAttributes() {\n    return ['sizing', 'width', 'height'];\n  }\n\n  /**\n   * The scaling mode.\n   * - `noscale`: Do not perform scaling.\n   * - `fit`: Resize resolution to fill the entire viewport and maintains the aspect\n   * ratio. The pixel resolution is changed. This is the default behavior.\n   * - `fill`: Resize resolution to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `stretch`: Perform scaling to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `scale`: Perform scaling to fill the entire viewport and maintains the\n   * aspect ratio and resolution. The pixel resolution remains constant.\n   */\n  get scaling() {\n    return /** @type {ScalingMode} */ (this.getAttribute('scaling'));\n  }\n\n  set scaling(value) {\n    this.setAttribute('scaling', value);\n  }\n\n  /**\n   * The sizing mode.\n   * - `none`: Sizes to canvas.\n   * - `container`: Sizes to 100% of parent container.\n   * - `viewport`: Sizes to 100% of viewport.\n   */\n  get sizing() {\n    return /** @type {SizingMode} */ (this._sizing);\n  }\n\n  set sizing(value) {\n    this.setAttribute('sizing', String(value));\n  }\n\n  /**\n   * The canvas width in pixels. This determines the aspect ratio and canvas buffer size.\n   * @returns {number}\n   */\n  get width() {\n    return this._width;\n  }\n\n  set width(value) {\n    this.setAttribute('width', String(value));\n  }\n\n  /**\n   * The canvas height in pixels. This determines the aspect ratio and canvas buffer size.\n   * @returns {number}\n   */\n  get height() {\n    return this._height;\n  }\n\n  set height(value) {\n    this.setAttribute('height', String(value));\n  }\n\n  get canvas() {\n    return this.canvasElement;\n  }\n\n  /**\n   * @param {object} [opts]\n   * @param {HTMLElement} [opts.root]\n   * @param {SizingMode} [opts.sizing]\n   * @param {number} [opts.width]\n   * @param {number} [opts.height]\n   * @param {number} [opts.aspectRatio]\n   * @param {ScalingMode} [opts.forceScaling]\n   */\n  constructor(opts = undefined) {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    const constructor = /** @type {typeof FlexCanvas} */ (this.constructor);\n    const templateNode = /** @type {HTMLTemplateElement} */ (\n      // @ts-ignore\n      constructor[TEMPLATE_NODE]\n    );\n    const styleNode = /** @type {HTMLStyleElement} */ (\n      // @ts-ignore\n      constructor[TEMPLATE_STYLE]\n    );\n    shadowRoot.appendChild(templateNode.content.cloneNode(true));\n    shadowRoot.appendChild(styleNode.cloneNode(true));\n\n    /**\n     * @private\n     * @type {SizingMode}\n     */\n    this._sizing = 'none';\n    /** @private */\n    this._width = DEFAULT_WIDTH;\n    /** @private */\n    this._height = DEFAULT_HEIGHT;\n\n    /** @private */\n    this.animationFrameHandle = 0;\n\n    /**\n     * @private\n     * @readonly\n     */\n    this.resizeDelay = 0;\n    /** @private */\n    this.resizeTimeoutHandle = 0;\n    /** @private */\n    this.resizeCanvasWidth = 0;\n    /** @private */\n    this.resizeCanvasHeight = 0;\n\n    /** @private */\n    this.canvasSlotElement = /** @type {HTMLSlotElement} */ (\n      shadowRoot.querySelector('slot')\n    );\n    /**\n     * @private\n     * @type {HTMLCanvasElement|null}\n     */\n    this.canvasElement = null;\n\n    /** @private */\n    this.onResize = this.onResize.bind(this);\n    /** @private */\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\n    /** @private */\n    this.onSlotChange = this.onSlotChange.bind(this);\n\n    if (typeof opts !== 'undefined') {\n      const hasFixedWidthOrHeight =\n        typeof opts.width !== 'undefined' || typeof opts.height !== 'undefined';\n      const hasFixedAspectRatio = typeof opts.aspectRatio !== 'undefined';\n      if (hasFixedWidthOrHeight) {\n        let width = Math.round(Number(opts.width));\n        let height = Math.round(Number(opts.height));\n        this.width = width;\n        this.height = height;\n        if (hasFixedAspectRatio) {\n          // Verify the numbers match.\n          let ar = Number(opts.aspectRatio);\n          let expectedWidth = Math.round(height * ar);\n          if (expectedWidth !== width) {\n            throw new Error(\n              'Flex canvas width and height dimensions did not match given' +\n                ` aspect ratio '${ar}' - expected width to be ${expectedWidth} but was ${width}.`\n            );\n          }\n        }\n        if (!opts.forceScaling) {\n          this.scaling = ScalingModes.SCALE;\n        }\n      } else if (hasFixedAspectRatio) {\n        let ar = Number(opts.aspectRatio);\n        let height = DEFAULT_HEIGHT;\n        let expectedWidth = height * ar;\n        this.width = expectedWidth;\n        this.height = height;\n        if (!opts.forceScaling) {\n          this.scaling = ScalingModes.FIT;\n        }\n      } else if (!opts.forceScaling) {\n        this.scaling = ScalingModes.FILL;\n      }\n\n      if (opts.forceScaling) {\n        this.scaling = opts.forceScaling;\n      }\n\n      if (opts.sizing) {\n        this.sizing = opts.sizing;\n      } else if (!hasFixedAspectRatio) {\n        this.sizing = SizingModes.NONE;\n      } else {\n        this.sizing = SizingModes.CONTAINER;\n      }\n\n      if (opts.root) {\n        opts.root.appendChild(this);\n      }\n    }\n  }\n\n  /**\n   * Override web component behavior.\n   * @protected\n   */\n  connectedCallback() {\n    upgradeProperty(this, 'scaling');\n    upgradeProperty(this, 'sizing');\n    upgradeProperty(this, 'width');\n    upgradeProperty(this, 'height');\n\n    // Scaling mode\n    if (!this.hasAttribute('scaling')) {\n      this.setAttribute('scaling', ScalingModes.SCALE);\n    }\n\n    // Allows this element to be focusable\n    if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', '0');\n    }\n\n    this.animationFrameHandle = requestAnimationFrame(this.onAnimationFrame);\n    this.canvasSlotElement.addEventListener('slotchange', this.onSlotChange);\n    if (!this.canvasElement) {\n      let canvas = /** @type {HTMLCanvasElement} */ (\n        this.canvasSlotElement.querySelector('canvas')\n      );\n      this.setCanvasElement(canvas);\n    }\n  }\n\n  /**\n   * Override web component behavior.\n   * @protected\n   */\n  disconnectedCallback() {\n    cancelAnimationFrame(this.animationFrameHandle);\n    this.animationFrameHandle = 0;\n    this.canvasSlotElement.removeEventListener('slotchange', this.onSlotChange);\n  }\n\n  /**\n   * Override web component behavior.\n   * @protected\n   * @param {string} attribute\n   * @param {string} _prev\n   * @param {string} value\n   */\n  attributeChangedCallback(attribute, _prev, value) {\n    switch (attribute) {\n      case 'sizing':\n        // @ts-ignore\n        this._sizing = String(value);\n        matchDimensionTo(this._sizing, this);\n        break;\n      case 'width':\n        this._width = Number(value);\n        if (this.canvasElement) {\n          this.canvasElement.width = this._width;\n        }\n        break;\n      case 'height':\n        this._height = Number(value);\n        if (this.canvasElement) {\n          this.canvasElement.height = this._height;\n        }\n        break;\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} _now\n   */\n  onAnimationFrame(_now) {\n    this.animationFrameHandle = requestAnimationFrame(this.onAnimationFrame);\n\n    if (\n      this.clientWidth === this.resizeCanvasWidth &&\n      this.clientHeight === this.resizeCanvasHeight\n    ) {\n      // Only call onDebounceResize() if new canvas size actually changed since last time.\n      return;\n    }\n\n    this.resizeCanvasWidth = this.clientWidth;\n    this.resizeCanvasHeight = this.clientHeight;\n\n    if (this.resizeDelay > 0) {\n      if (!this.resizeTimeoutHandle) {\n        this.resizeTimeoutHandle = window.setTimeout(\n          this.onResize,\n          this.resizeDelay\n        );\n      }\n    } else {\n      this.onResize();\n    }\n  }\n\n  /** @private */\n  onResize() {\n    window.clearTimeout(this.resizeTimeoutHandle);\n    this.resizeTimeoutHandle = 0;\n\n    const canvas = this.canvasElement;\n    if (!canvas) {\n      return;\n    }\n\n    const scaling = this.scaling;\n    resizeFor(scaling, this, canvas, this._width, this._height);\n  }\n\n  /**\n   * @private\n   * @param {Event} e\n   */\n  onSlotChange(e) {\n    const slot = /** @type {HTMLSlotElement} */ (e.target);\n    let children = slot.assignedElements({ flatten: true });\n    let canvas = /** @type {HTMLCanvasElement} */ (\n      children.find((el) => el instanceof HTMLCanvasElement)\n    );\n    if (canvas) {\n      this.setCanvasElement(canvas);\n    }\n  }\n\n  /**\n   * @private\n   * @param {HTMLCanvasElement} canvas\n   */\n  setCanvasElement(canvas) {\n    canvas.width = this._width;\n    canvas.height = this._height;\n    canvas.style.imageRendering = 'pixelated';\n    this.canvasElement = canvas;\n  }\n\n  /**\n   * @template {keyof GetRenderingContext} T\n   * @param {T} contextId\n   * @param {GetRenderingContextOptions[T]} [options]\n   * @returns {GetRenderingContext[T]}\n   */\n  getContext(contextId, options = undefined) {\n    let result = this.canvasElement?.getContext(contextId, options);\n    if (result && contextId === '2d') {\n      // NOTE: Disable smoothing for pixel-perfect rendering.\n      /** @type {CanvasRenderingContext2D} */ (result).imageSmoothingEnabled =\n        false;\n    }\n    return /** @type {GetRenderingContext[T]} */ (result);\n  }\n}\n\n/**\n * @typedef {'2d'|'webgl'|'webgl2'|'bitmaprenderer'} ContextId\n * @typedef {{\n *  '2d': CanvasRenderingContext2D,\n *  'webgl': WebGLRenderingContext,\n *  'webgl2': WebGL2RenderingContext,\n *  'bitmaprenderer': ImageBitmapRenderingContext\n * }} GetRenderingContext\n * @typedef {{\n *  '2d': CanvasRenderingContext2DSettings,\n *  'webgl': WebGLContextAttributes,\n *  'webgl2': WebGLContextAttributes,\n *  'bitmaprenderer': ImageBitmapRenderingContextSettings\n * }} GetRenderingContextOptions\n */\n\n/**\n * @template {HTMLElement} T\n * @param {T} element\n * @param {keyof T} propertyName\n */\nfunction upgradeProperty(element, propertyName) {\n  if (Object.prototype.hasOwnProperty.call(element, propertyName)) {\n    let value = element[propertyName];\n    delete element[propertyName];\n    element[propertyName] = value;\n  }\n}\n","export default /* html */ `\n<div class=\"container\">\n  <div class=\"padding\"></div>\n  <div class=\"innerContainer\">\n    <div class=\"padding\"></div>\n    <slot><canvas>Oh no! Your browser does not support canvas.</canvas></slot>\n    <div class=\"padding\"></div>\n  </div>\n  <div class=\"padding\"></div>\n</div>`;\n","export default /* css */ `\n:host {\n  display: inline-block;\n  flex: 1;\n  --width: 300px;\n  --height: 150px;\n}\n:host([scaling=\"noscale\"]) {\n  width: var(--width);\n  height: var(--height);\n}\n:host([sizing=\"viewport\"]) {\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n.container {\n  position: relative;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n.innerContainer {\n  display: flex;\n  flex-direction: column;\n}\n.padding {\n  flex: 1;\n}`;\n","/**\n * @param {import('./FlexCanvas').SizingMode} containerType \n * @param {HTMLElement} element\n */\nexport function matchDimensionTo(containerType, element) {\n  switch(containerType) {\n    case 'none':\n      matchDimensionToNone(element);\n      return;\n    case 'container':\n      matchDimensionToContainer(element);\n      return;\n    case 'viewport':\n      matchDimensionToViewport(element);\n      return;\n    default:\n      // NOTE: This is not a known sizing value, skip it.\n  }\n}\n\n/**\n * @param {HTMLElement} element \n */\nexport function matchDimensionToNone(element) {\n  element.style.removeProperty('width');\n  element.style.removeProperty('height');\n}\n\n/**\n * @param {HTMLElement} element \n */\nexport function matchDimensionToContainer(element) {\n  element.style.setProperty('width', '100%');\n  element.style.setProperty('height', '100%');\n}\n\n/**\n * @param {HTMLElement} element \n */\nexport function matchDimensionToViewport(element) {\n  element.style.setProperty('width', '100vw');\n  element.style.setProperty('height', '100vh');\n}\n","import { FlexCanvas } from './FlexCanvas';\n\nexport * from './FlexCanvas';\n\nFlexCanvas.define('flex-canvas');\n"],"names":["resizeFor","scalingMode","element","canvas","canvasWidth","canvasHeight","clientRect","getBoundingClientRect","clientWidth","width","clientHeight","height","resizeForFill","ratioX","ratioY","style","setProperty","Math","floor","resizeForScale","resizeForStretch","resizeForNoScale","ScalingModes","SizingModes","TEMPLATE_NODE","Symbol","for","TEMPLATE_STYLE","FlexCanvas","HTMLElement","define","name","window","customElements","this","t","document","createElement","innerHTML","Object","defineProperty","value","observedAttributes","scaling","getAttribute","setAttribute","sizing","String","_width","_height","canvasElement","constructor","opts","undefined","super","shadowRoot","attachShadow","mode","templateNode","styleNode","appendChild","content","cloneNode","_sizing","animationFrameHandle","resizeDelay","resizeTimeoutHandle","resizeCanvasWidth","resizeCanvasHeight","canvasSlotElement","querySelector","onResize","bind","onAnimationFrame","onSlotChange","hasFixedWidthOrHeight","hasFixedAspectRatio","aspectRatio","round","Number","ar","expectedWidth","Error","forceScaling","root","connectedCallback","upgradeProperty","hasAttribute","requestAnimationFrame","addEventListener","setCanvasElement","disconnectedCallback","cancelAnimationFrame","removeEventListener","attributeChangedCallback","attribute","_prev","containerType","removeProperty","matchDimensionToNone","matchDimensionToContainer","matchDimensionToViewport","matchDimensionTo","_now","setTimeout","clearTimeout","e","assignedElements","flatten","find","el","HTMLCanvasElement","imageRendering","getContext","contextId","options","result","imageSmoothingEnabled","propertyName","prototype","hasOwnProperty","call"],"mappings":"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"}