{"version":3,"file":"milque-scene.cjs.js","sources":["../src/camera/CameraHelper.js","../src/camera/Camera.js","../src/camera/PerspectiveCamera.js","../src/camera/FirstPersonCameraController.js","../src/scenegraph/SceneGraph.js","../src/entity/QueryManager.js","../src/entity/Query.js","../src/entity/Archetype.js","../src/topic/Topic.js","../src/topic/TopicManager.js","../src/loop/AnimationFrameLoop.js","../src/topic/AsyncTopic.js","../src/entity/ComponentClass.js","../src/entity/EntityManager.js","../src/camera/OrthographicCamera.js"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\n\nconst UP = vec3.fromValues(0, 1, 0);\n\nexport function panTo(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  mat4.getTranslation(position, viewMatrix);\n  let translation = vec3.fromValues(\n    (x - position[0]) * dt,\n    (y - position[1]) * dt,\n    (z - position[2]) * dt\n  );\n  mat4.translate(viewMatrix, viewMatrix, translation);\n}\n\nexport function lookAt(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  let rotation = quat.create();\n  mat4.getTranslation(position, viewMatrix);\n  mat4.getRotation(rotation, viewMatrix);\n  let target = vec3.fromValues(x, y, z);\n\n  mat4.lookAt(viewMatrix, position, target, UP);\n\n  let targetRotation = quat.create();\n  mat4.getRotation(targetRotation, viewMatrix);\n  quat.slerp(rotation, rotation, targetRotation, dt);\n\n  mat4.fromRotationTranslation(viewMatrix, rotation, position);\n}\n\n/**\n * Gets a directional ray in the world space from the given normalized\n * screen coordinates and camera matrices.\n *\n * NOTE: In addition to some scaling, the y component from a pointer's\n * position usually has to be flipped to match the normalized screen\n * coordinate space, which assumes a range of [-1, 1] for both x and y,\n * where (0, 0) is the center and (-1, -1) is the bottom-left of the\n * screen.\n *\n * ### Typical Device Screen Coordinate Space:\n * ```\n * (0,0)------------(w,0)\n *    |               |\n *    |   (w/2,h/2)   |\n *    |               |\n * (0,w)------------(w,h)\n * ```\n *\n * ### Normalized Screen Coordinate Space:\n * ```\n * (-1,+1)---------(+1,+1)\n *    |               |\n *    |     (0,0)     |\n *    |               |\n * (-1,-1)---------(+1,-1)\n * ```\n *\n * ### Example Conversion from Device to Normalized:\n * ```\n * let normalizedScreenX = (canvasClientX / canvasWidth) * 2 - 1;\n * let normalizedScreenY = 1 - (canvasClientY / canvasHeight) * 2;\n * ```\n *\n * @param {vec3} out The output vector.\n * @param {number} normalizedScreenCoordX The X screen coordinate normalized to [-1, 1], where -1 is the left side of the screen.\n * @param {number} normalizedScreenCoordY The Y screen coordinate normalized to [-1, 1], where -1 is the bottom side of the screen.\n * @param {mat4} projectionMatrix The projection matrix of the world camera.\n * @param {mat4} viewMatrix The view matrix of the world camera.\n * @param {boolean} [normalized=false] Whether to normalize the result. Usually true for non-orthogonal projections.\n * @returns {vec3} The ray direction in the world space. By default, this is not normalized.\n */\nexport function screenToWorldRay(\n  out,\n  normalizedScreenCoordX,\n  normalizedScreenCoordY,\n  projectionMatrix,\n  viewMatrix,\n  normalized = false\n) {\n  // https://antongerdelan.net/opengl/raycasting.html\n  // To homogeneous clip coords\n  let v = vec4.fromValues(\n    normalizedScreenCoordX,\n    normalizedScreenCoordY,\n    -1,\n    1\n  );\n  // To camera coords\n  let m = mat4.create();\n  mat4.invert(m, projectionMatrix);\n  vec4.transformMat4(v, v, m);\n  v[2] = -1;\n  v[3] = 0;\n  // To world coords\n  mat4.invert(m, viewMatrix);\n  vec4.transformMat4(v, v, m);\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  // Normalized as directional ray\n  if (normalized) {\n    vec3.normalize(out, out);\n  }\n  return out;\n}\n","export class Camera {\n  constructor(projectionMatrix, viewMatrix) {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n  }\n\n  /**\n   * @abstract\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   * @returns {Camera}\n   */\n  // eslint-disable-next-line no-unused-vars\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    return this;\n  }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nconst DEFAULT_FOVY = Math.PI / 3;\n\nexport class PerspectiveCamera extends Camera {\n  constructor(fieldOfView = DEFAULT_FOVY, near = 0.1, far = 1000) {\n    super(mat4.create(), mat4.create());\n\n    this.fieldOfView = Number(fieldOfView);\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /** @override */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const aspectRatio =\n      typeof viewportWidth === 'undefined' ? 1 : viewportWidth / viewportHeight;\n    const { near, far } = this.clippingPlane;\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fieldOfView,\n      aspectRatio,\n      near,\n      far\n    );\n    return this;\n  }\n}\n","import { vec3, mat4 } from 'gl-matrix';\n\nconst TO_RAD_FACTOR = Math.PI / 180;\n\n/**\n * A camera controller that behaves like a traditional first person camera.\n * Pitch is restricted to prevent gimbal lock and roll is ignored.\n *\n * NOTE: Don't forget to lock your pointer, i.e. `canvas.requestPointerLock()`.\n */\nexport class FirstPersonCameraController {\n  constructor(opts = { locky: false }) {\n    this.locky = opts.locky;\n\n    this.position = vec3.create();\n    this.forward = vec3.fromValues(0, 0, -1);\n    this.right = vec3.fromValues(1, 0, 0);\n    this.up = vec3.fromValues(0, 1, 0);\n\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    this.pitch = 0;\n    this.yaw = -90;\n  }\n\n  look(dx, dy, dt = 1) {\n    // NOTE: Increase sensitivity to relatively match movement.\n    dt *= 1000;\n    this.pitch = Math.min(89.9, Math.max(-89.9, this.pitch + dy * dt));\n    this.yaw = (this.yaw + dx * dt) % 360;\n    return this;\n  }\n\n  move(forward, right = 0, up = 0, dt = 1) {\n    this.forwardAmount += forward * dt;\n    this.rightAmount += right * dt;\n    this.upAmount += up * dt;\n    return this;\n  }\n\n  apply(viewMatrix) {\n    let {\n      position,\n      forward,\n      right,\n      up,\n      forwardAmount,\n      rightAmount,\n      upAmount,\n      pitch,\n      yaw,\n    } = this;\n\n    // Calculate forward and right vectors\n    let rady = yaw * TO_RAD_FACTOR;\n    let radp = pitch * TO_RAD_FACTOR;\n    let cosy = Math.cos(rady);\n    let cosp = Math.cos(radp);\n    let siny = Math.sin(rady);\n    let sinp = Math.sin(radp);\n    let dx = cosy * cosp;\n    let dy = sinp;\n    let dz = siny * cosp;\n\n    // Set forward for move vector\n    vec3.normalize(forward, vec3.set(forward, dx, this.locky ? 0 : dy, dz));\n    vec3.normalize(right, vec3.cross(right, forward, up));\n\n    let move = vec3.create();\n    // Move forward\n    vec3.scale(move, forward, forwardAmount);\n    vec3.add(position, position, move);\n    // Move right\n    vec3.scale(move, right, rightAmount);\n    vec3.add(position, position, move);\n    // Move up\n    vec3.scale(move, up, upAmount);\n    vec3.add(position, position, move);\n    // Reset movement\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    // Reset forward for look vector\n    if (this.locky) vec3.set(forward, dx, dy, dz);\n\n    let target = vec3.add(move, position, forward);\n    mat4.lookAt(viewMatrix, position, target, up);\n    return viewMatrix;\n  }\n}\n","const MAX_DEPTH_LEVEL = 100;\n\n/**\n * @typedef {number} SceneNode\n *\n * @callback WalkCallback Called for each node, before traversing its children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {WalkBackCallback|boolean|void} If false, the walk will skip\n * the current node's children and all of its descendents. If a function,\n * it will be called after traversing down all of its children.\n *\n * @callback WalkBackCallback Called if returned by {@link WalkCallback}, after\n * traversing the current node's children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n *\n * @callback WalkChildrenCallback Called for each level of children, before\n * traversing them. This is usually used to determine visit order.\n * @param {Array<SceneNode>} childNodes A list of child nodes to be visited.\n * @param {SceneNode} parentNode The current parent node of these children.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {Array<SceneNode>} The list of children to traverse for this parent.\n */\n\n/**\n * @typedef {ReturnType<create>} SceneGraph\n */\n\nexport function create() {\n    return {\n        /** @type {Array<SceneNode>} */\n        roots: [],\n        /** @type {Record<string, SceneNode>} */\n        parents: {},\n        /** @type {Record<string, Array<SceneNode>>} */\n        children: {},\n    };\n}\n\n/**\n * @param {SceneGraph} a \n */\nexport function clone(a) {\n    return {\n        roots: a.roots.slice(),\n        parents: {\n            ...a.parents,\n        },\n        children: Object.fromEntries(Object.entries(a.children)\n            .map(([k, v]) => [k, v.slice()])),\n    };\n}\n\n/**\n * @param {SceneGraph} out \n * @param {SceneNode} node \n * @param {SceneNode} parentNode \n */\nexport function add(out, node, parentNode = 0) {\n    attach(out, node, parentNode);\n}\n\n/**\n * @param {SceneGraph} graph \n * @param {SceneNode} node \n */\nexport function has(graph, node) {\n    return node in graph.parents;\n}\n\n/**\n * @param {SceneGraph} out \n * @param {SceneNode} childNode \n * @param {SceneNode} parentNode \n */\nexport function parent(out, childNode, parentNode) {\n    detach(out, childNode, getParent(out, childNode));\n    attach(out, childNode, parentNode);\n}\n\n/**\n * @param {SceneGraph} out \n * @param {SceneNode} targetNode \n */\nexport function prune(out, targetNode) {\n    if (!(targetNode in out.parents)) {\n        throw new Error('Cannot delete non-existant scene node for scene graph.');\n    }\n    let parentNode = getParent(out, targetNode);\n    detach(out, targetNode, parentNode);\n    walkImpl(out, targetNode, 0, walkDeleteCallback);\n}\n\n/**\n * @param {SceneGraph} out \n * @param {SceneNode} targetNode \n * @param {SceneNode} replacementNode \n */\nexport function replace(out, targetNode, replacementNode) {\n    let parentNode = getParent(out, targetNode);\n    let grandChildren = getChildren(out, targetNode).slice();\n\n    // Remove the target node from graph\n    detach(out, targetNode, parentNode);\n\n    // Begin grafting the grandchildren by removing them...\n    clearChildren(out, targetNode);\n\n    if (replacementNode) {\n      // Reattach all grandchildren to new replacement node.\n      let replacementParentId = getParent(out, replacementNode);\n      let replacementChildren = getChildren(out, replacementNode);\n\n      // Remove replacement node from previous parent\n      detach(this, replacementNode, replacementParentId);\n\n      // ...and graft them back.\n      replacementChildren.push(...grandChildren);\n\n      // And reattach target parent to new child.\n      attach(this, replacementNode, parentNode);\n    } else {\n      // Reattach all grandchildren to target parent...\n      if (parentNode) {\n        //...as regular children.\n        let parentChildren = getChildren(out, parentNode);\n        parentChildren.push(...grandChildren);\n      } else {\n        //...as root children.\n        getRoots(out).push(...grandChildren);\n      }\n    }\n\n    // ...and repair their parent relations.\n    for (let childNode of grandChildren) {\n        setParent(out, childNode, parentNode);\n    }\n}\n\n/**\n * Walks through every child node in the graph.\n *\n * @param {WalkCallback} callback The function called for each node\n * in the graph, in ordered traversal from parent to child.\n * @param {object} [opts] Any additional options.\n * @param {SceneNode|Array<SceneNode>} [opts.from] The parent node to\n * start walking from, inclusive. By default, it will start from the root\n * nodes.\n * @param {WalkChildrenCallback} [opts.childFilter] The function called before\n * walking through the children. This is usually used to determine the\n * visiting order.\n */\nexport function walk(graph, callback, opts = undefined) {\n    const { from = undefined, childFilter = undefined } = opts || {};\n\n    let fromNodes;\n    if (!from) fromNodes = getRoots(graph);\n    else if (!Array.isArray(from)) fromNodes = [from];\n    else fromNodes = from;\n\n    if (childFilter) fromNodes = childFilter(fromNodes, 0, this);\n    for (let fromNode of fromNodes) {\n        walkImpl(graph, fromNode, 0, callback, childFilter);\n    }\n}\n\n/**\n * @param {SceneGraph} graph\n */\nexport function getRoots(graph) {\n    return graph.roots;\n}\n\n/**\n * @param {SceneGraph} graph \n * @param {SceneNode} node\n */\nexport function getParent(graph, node) {\n    return graph.parents[node];\n}\n\n/**\n * @param {SceneGraph} graph \n * @param {SceneNode} node \n * @param {SceneNode} parentNode \n */\nfunction setParent(graph, node, parentNode) {\n    graph.parents[node] = parentNode;\n}\n\n/**\n * @param {SceneGraph} graph\n * @param {SceneNode} node\n */\nexport function getChildren(graph, node) {\n    if (node in graph.children) {\n        return graph.children[node];\n    } else {\n        let result = [];\n        graph.children[node] = result;\n        return result;\n    }\n}\n\n/**\n * @param {SceneGraph} out \n * @param {SceneNode} node\n */\nfunction clearChildren(out, node) {\n    if (node in out) {\n        out.children[node].length = 0;\n        delete out.children[node];\n    }\n}\n\n/**\n * Attaches a child node to a parent in the scene graph.\n * If no parentNode, then it will attach as a root node.\n *\n * @param {SceneGraph} out The scene graph to attach in.\n * @param {number} childNode The child node to attach from.\n * @param {number} parentNode The parent node to attach to. Can be 0 for null.\n */\nfunction attach(out, childNode, parentNode) {\n    if (parentNode) {\n        // Has new parent; attach to parent. It is now in the graph.\n        getChildren(out, parentNode).push(childNode);\n        setParent(out, childNode, parentNode);\n    } else {\n        // No parent; move to root. It is now in the graph.\n        getRoots(out).push(childNode);\n        setParent(out, childNode, 0);\n    }\n}\n\n/**\n * Detaches a child node from its parent in the scene graph.\n * If has no parentNode, then it will detach as a root node.\n *\n * @param {SceneGraph} out The scene graph attached to.\n * @param {number} childNode The child node to detach.\n * @param {number} parentNode The parent node attached to. Could be 0 for none.\n */\nfunction detach(out, childNode, parentNode) {\n    if (parentNode) {\n        // Has parent; detach from parent. It is now a free node.\n        let children = getChildren(out, parentNode);\n        let childIndex = children.indexOf(childNode);\n        children.splice(childIndex, 1);\n    } else {\n        // No parent; remove from root. It is now a free node.\n        let roots = getRoots(out);\n        let rootIndex = roots.indexOf(childNode);\n        roots.splice(rootIndex, 1);\n    }\n    setParent(out, childNode, 0);\n}\n\n/**\n * Walk down from the parent and through all its descendents.\n *\n * @param {SceneGraph} graph The scene graph containing the nodes to be visited.\n * @param {SceneNode} parentNode The parent node to start walking from.\n * @param {number} level The current call depth level. This is used to limit the call stack.\n * @param {WalkCallback} nodeCallback The function called on each visited node.\n * @param {WalkChildrenCallback} [filterCallback] The function called before\n * walking through the children. This is usually used to determine the visiting order.\n */\nfunction walkImpl(\n    graph,\n    parentNode,\n    level,\n    nodeCallback,\n    filterCallback = undefined) {\n    if (level >= MAX_DEPTH_LEVEL) return;\n\n    let result = nodeCallback(parentNode, graph);\n    if (result === false) return;\n\n    let children = getChildren(graph, parentNode);\n    let nextNodes = filterCallback\n        ? filterCallback(children, parentNode, graph)\n        : children;\n\n    for (let childNode of nextNodes) {\n        walkImpl(graph, childNode, level + 1, nodeCallback, filterCallback);\n    }\n\n    if (typeof result === 'function') {\n        result(parentNode, graph);\n    }\n}\n\nfunction walkDeleteCallback(sceneNode, out) {\n    delete out.parents[sceneNode];\n    delete out.children[sceneNode];\n}\n","import { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityManager} EntityManager */\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n/** @typedef {import('./Query').Query} Query */\n\nexport class QueryManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<EntityId>>}\n         */\n        this.cachedResults = {};\n        /**\n         * @private\n         * @type {Record<string, Query>}\n         */\n        this.keyQueryMapping = {};\n\n        this.onEntityComponentChanged = this.onEntityComponentChanged.bind(this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} added\n     * @param {ComponentClass<?>} removed\n     * @param {boolean} dead\n     */\n    onEntityComponentChanged(entityManager, entityId, added, removed, dead) {\n        for(let query of Object.values(this.keyQueryMapping)) {\n            let entities = this.cachedResults[query.key];\n            if (dead) {\n                let i = entities.indexOf(entityId);\n                if (i >= 0) {\n                    entities.splice(i, 1);\n                }\n            } else if (added) {\n                if (query.hasSelector(Not(added))) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                } else if (query.hasSelector(added) && this.test(entityManager, entityId, query.selectors)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                }\n            } else if (removed) {\n                if (query.hasSelector(Not(removed)) && this.test(entityManager, entityId, query.selectors)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                } else if (query.hasSelector(removed) && this.test(entityManager, entityId, query.selectors)) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @protected\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId\n     * @param {Array<ComponentClass<?>>} selectors\n     */\n    test(entityManager, entityId, selectors) {\n        for(let selector of selectors) {\n            if (isSelectorNot(selector)) {\n                const componentClass = /** @type {SelectorNot<?>} */ (/** @type {unknown} */ (selector)).value;\n                if (entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            } else {\n                const componentClass = /** @type {ComponentClass<?>} */ (/** @type {unknown} */ (selector));\n                if (!entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @protected\n     * @param {Array<EntityId>} out\n     * @param {EntityManager} entityManager \n     * @param {Array<ComponentClass<?>>} selectors\n     */\n    hydrate(out, entityManager, selectors) {\n        if (selectors.length <= 0) {\n            out.length = 0;\n            return out;\n        }\n        let entities = entityManager.entityIds();\n        for(let entityId of entities) {\n            if (this.test(entityManager, entityId, selectors)) {\n                out.push(entityId);\n            }\n        }\n        return out;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query} query\n     * @returns {Array<EntityId>}\n     */\n    findAll(entityManager, query) {\n        const queryKey = query.key;\n        let result;\n        if (!(queryKey in this.keyQueryMapping)) {\n            result = [];\n            this.keyQueryMapping[queryKey] = query;\n            this.cachedResults[queryKey] = result;\n            this.hydrate(result, entityManager, query.selectors);\n        } else {\n            result = this.cachedResults[queryKey];\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query} query \n     */\n    count(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        return result.length;\n    }\n\n    /**\n     * @param {Query} query\n     */\n    clear(query) {\n        const queryKey = query.key;\n        if (!(queryKey in this.keyQueryMapping)) {\n            return;\n        }\n        delete this.keyQueryMapping[queryKey];\n        delete this.cachedResults[queryKey];\n    }\n    \n    reset() {\n        this.keyQueryMapping = {};\n        this.cachedResults = {};\n    }\n}\n\n/**\n * @template T\n * @typedef {SelectorNot<T>|ComponentClass<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef SelectorNot<T>\n * @property {'not'} type\n * @property {string} name\n * @property {ComponentClass<T>} value\n */\n\n/**\n * @template T\n * @param {ComponentClass<T>} componentClass \n * @returns {ComponentClass<T>}\n */\nexport function Not(componentClass) {\n    return {\n        // @ts-ignore\n        type: 'not',\n        name: componentClass.name,\n        value: componentClass,\n    };\n}\n\nexport function isSelectorNot(selector) {\n    return 'type' in selector && selector.type === 'not';\n}\n","import { ComponentClass } from './ComponentClass';\nimport { EntityManager } from './EntityManager';\nimport { isSelectorNot } from './QueryManager';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').Selector<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').SelectorNot<T>} SelectorNot<T>\n */\n\nexport class Query {\n\n    /**\n     * @param {...ComponentClass<?>} selectors \n     */\n    constructor(...selectors) {\n        if (selectors.length <= 0) {\n            throw new Error('Must have at least 1 selector for query.');\n        }\n        this.selectors = selectors;\n        this.key = computeSelectorKey(selectors);\n    }\n\n    /**\n     * @param {Selector<?>} selector\n     */\n    hasSelector(selector) {\n        if (isSelectorNot(selector)) {\n            return this.selectors.findIndex(v => isSelectorNot(v) && v.name === selector.name) >= 0;\n        } else {\n            return this.selectors.findIndex(v => v.name === selector.name) >= 0;\n        }\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {number}\n     */\n    count(entityManager) {\n        return entityManager.queries.count(entityManager, this);\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {Generator<EntityId>}\n     */\n    *findEntityIds(entityManager) {\n        const queryManager = entityManager.queries;\n        for(let entityId of queryManager.findAll(entityManager, this)) {\n            yield entityId;\n        }\n    }\n    \n    /**\n     * @template T\n     * @param {EntityManager} entityManager \n     * @param {ComponentClass<T>} componentClass\n     * @returns {Generator<T>}\n     */\n    *findComponents(entityManager, componentClass) {\n        if (this.selectors.indexOf(componentClass) < 0) {\n            throw new Error(`Cannot find component for class '${componentClass.name}' not in query.`);\n        }\n        const queryManager = entityManager.queries;\n        for(let entityId of queryManager.findAll(entityManager, this)) {\n            yield entityManager.get(entityId, componentClass);\n        }\n    }\n}\n\n/**\n * @param {Array<ComponentClass<?>>} selectors\n */\nfunction computeSelectorKey(selectors) {\n    return selectors.map(s => isSelectorNot(s) ? `!${s.name}` : s.name).sort().join('&');\n}\n","import { ComponentClass } from './ComponentClass';\nimport { EntityManager } from './EntityManager';\nimport { Query } from './Query';\nimport { isSelectorNot } from './QueryManager';\n\n/**\n * @typedef {Record<string, ComponentClass<any>>} ArchetypeComponentMap\n */\n\n/**\n * @template {ArchetypeComponentMap} T\n * @typedef {{[K in keyof T]: T[K] extends ComponentClass<infer V> ? V : never}} ArchetypeComponentInstancesOf<T>\n */\n\n/**\n * @template {ArchetypeComponentMap} T\n */\nexport class Archetype extends Query {\n\n    /**\n     * @param {T} components \n     */\n    constructor(components) {\n        super(...Object.values(components));\n        this.components = components;\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @returns {ArchetypeComponentInstancesOf<T>}\n     */\n    create(ents) {\n        let entityId = ents.create();\n        let result = {};\n        for(let [key, componentClass] of Object.entries(this.components)) {\n            let instance = ents.attach(entityId, componentClass);\n            result[key] = instance;\n        }\n        return /** @type {ArchetypeComponentInstancesOf<T>} */ (result);\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @param {import('./EntityManager').EntityId} entityId \n     */\n    destroy(ents, entityId) {\n        for (let componentClass of Object.values(this.components)) {\n            ents.detach(entityId, componentClass);\n        }\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @param {import('./EntityManager').EntityId} entityId\n     * @returns {ArchetypeComponentInstancesOf<T>}\n     */\n    find(ents, entityId) {\n        if (entityId === null) {\n            return /** @type {ArchetypeComponentInstancesOf<T>} */ ({});\n        }\n        return computeResult({}, ents, entityId, this.components);\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @returns {ArchetypeComponentInstancesOf<T>}\n     */\n    findAny(ents) {\n        const queryManager = ents.queries;\n        let entities = queryManager.findAll(ents, this);\n        if (entities.length <= 0) {\n            return /** @type {ArchetypeComponentInstancesOf<T>} */ ({});\n        }\n        let entityId = entities[Math.floor(Math.random() * entities.length)];\n        return computeResult({}, ents, entityId, this.components);\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @returns {Generator<ArchetypeComponentInstancesOf<T>>}\n     */\n    *findAll(ents) {\n        const queryManager = ents.queries;\n        let result = {};\n        let entities = queryManager.findAll(ents, this);\n        for(let entityId of entities) {\n            yield computeResult(result, ents, entityId, this.components);\n        }\n    }\n}\n\n/**\n * @template T\n * @param {object} out \n * @param {EntityManager} ents \n * @param {import('./EntityManager').EntityId} entityId \n * @param {T} componentClasses\n * @returns {ArchetypeComponentInstancesOf<T>}\n */\nfunction computeResult(out, ents, entityId, componentClasses) {\n    for(let [key, componentClass] of Object.entries(componentClasses)) {\n        if (isSelectorNot(componentClass)) {\n            out[key] = null;\n        } else {\n            out[key] = ents.get(entityId, componentClass);\n        }\n    }\n    return out;\n}\n","/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {import('./TopicManager').TopicCallback<T>} TopicCallback<T>\n */\n\n/**\n * @template T\n */\nexport class Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        this.name = name;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatch(topicManager, attachment) {\n        topicManager.dispatch(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatchImmediately(topicManager, attachment) {\n        topicManager.dispatchImmediately(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    on(topicManager, priority, callback) {\n        topicManager.addEventListener(this, callback, { priority });\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {TopicCallback<T>} callback\n     */\n    off(topicManager, callback) {\n        topicManager.removeEventListener(this, callback);\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    once(topicManager, priority, callback) {\n        let wrapper = (attachment) => {\n            this.off(topicManager, wrapper);\n            return callback(attachment);\n        };\n        return this.on(topicManager, priority, wrapper);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *poll(topicManager, amount) {\n        amount = Math.min(amount, topicManager.count(this));\n        for(let i = 0; i < amount; ++i) {\n            yield topicManager.poll(this);\n        }\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    retain(topicManager, amount) {\n        topicManager.retain(this, amount);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *pollAndRetain(topicManager, amount) {\n        this.retain(topicManager, amount);\n        for(let result of this.poll(topicManager, amount)) {\n            yield result;\n        }\n    }\n}\n","/**\n * @template T\n * @typedef {import('./Topic').Topic<T>} Topic<T>\n */\n\n/**\n * @template T\n * @typedef {(attachment: T) => void|boolean} TopicCallback<T>\n */\n\n/**\n * @template T\n * @typedef TopicCallbackEntry\n * @property {TopicCallback<T>} callback\n * @property {number} priority\n */\n\n/**\n * @template T\n * @param {TopicCallbackEntry<T>} a\n * @param {TopicCallbackEntry<T>} b\n */\nfunction comparator(a, b) {\n    return a.priority - b.priority;\n}\n\n/**\n * A manager for topic states. You should call `flush()` regularly to\n * process dispatched events or use `dispatchImmediately()`.\n */\nexport class TopicManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedIn = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedOut = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<TopicCallbackEntry<?>>>}\n         */\n        this.callbacks = {};\n        /**\n         * @protected\n         * @type {Record<string, number>}\n         */\n        this.maxRetains = {};\n        /**\n         * @private\n         * @type {Record<string, Topic<?>>}\n         */\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     * @param {object} [opts]\n     * @param {number} [opts.priority]\n     */\n    addEventListener(topic, callback, opts = undefined) {\n        const { priority = 0 } = opts;\n        let callbacks = this.callbacksOf(topic);\n        callbacks.push({\n            callback,\n            priority,\n        });\n        callbacks.sort(comparator);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     */\n    removeEventListener(topic, callback) {\n        let callbacks = this.callbacksOf(topic);\n        let i = callbacks.findIndex(v => v.callback === callback);\n        if (i >= 0) {\n            callbacks.splice(i, 1);\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    countEventListeners(topic) {\n        return this.callbacksOf(topic).length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    dispatch(topic, attachment) {\n        let incoming = this.incomingOf(topic);\n        incoming.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment\n     */\n    dispatchImmediately(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    async dispatchImmediatelyAndWait(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = await callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    count(topic) {\n        let outgoing = this.outgoingOf(topic);\n        return outgoing.length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     */\n    poll(topic) {\n        let outgoing = this.outgoingOf(topic);\n        if (outgoing.length <= 0) {\n            return null;\n        }\n        let result = outgoing.shift();\n        return result;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     * @param {number} amount\n     */\n    retain(topic, amount) {\n        const topicName = topic.name;\n        let max = Math.max(amount, this.maxRetains[topicName] || 0);\n        this.maxRetains[topicName] = max;\n    }\n\n    /**\n     * @param {number} [maxPerTopic]\n     */\n    flush(maxPerTopic = 100) {\n        for(const topicName of Object.keys(this.cachedIn)) {\n            const topic = this.nameTopicMapping[topicName];\n            const incoming = this.cachedIn[topicName];\n            const outgoing = this.cachedOut[topicName];\n            const retain = this.maxRetains[topicName] || 0;\n            if (retain < outgoing.length) {\n                outgoing.splice(0, outgoing.length - retain);\n            }\n            let max = Math.min(maxPerTopic, incoming.length);\n            for(let i = 0; i < max; ++i) {\n                let attachment = incoming.shift();\n                if (typeof attachment === 'object' && attachment instanceof Promise) {\n                    this.dispatchImmediately(topic, attachment);\n                } else {\n                    this.dispatchImmediately(topic, attachment);\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic \n     */\n    getPendingRetainCount(topic) {\n        return this.maxRetains[topic.name] || 0;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    getPendingFlushCount(topic) {\n        let incoming = this.incomingOf(topic);\n        return incoming.length;\n    }\n\n    reset() {\n        this.cachedIn = {};\n        this.cachedOut = {};\n        this.callbacks = {};\n        this.maxRetains = {};\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    incomingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedIn) {\n            return this.cachedIn[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = result;\n            this.cachedOut[topicName] = [];\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    outgoingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedOut) {\n            return this.cachedOut[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = [];\n            this.cachedOut[topicName] = result;\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<TopicCallbackEntry<T>>}\n     */\n    callbacksOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.callbacks) {\n            return this.callbacks[topicName];\n        } else {\n            let result = [];\n            this.callbacks[topicName] = result;\n            return result;\n        }\n    }\n}\n","/**\n * @typedef {(frameDetail: AnimationFrameLoop) => void} AnimationFrameLoopCallback\n * \n * @typedef AnimationFrameDetail\n * @property {number} prevTime\n * @property {number} currentTime\n * @property {number} deltaTime\n */\n\nexport class AnimationFrameLoop {\n    \n    /**\n     * @param {AnimationFrameLoopCallback} callback \n     * @param {object} [opts]\n     * @param {Window} [opts.animationFrameHandler]\n     */\n    constructor(callback, opts = undefined) {\n        const { animationFrameHandler = window } = opts || {};\n\n        /** @type {ReturnType<requestAnimationFrame>} */\n        this.handle = 0;\n        /** @type {AnimationFrameDetail} */\n        this.detail = {\n            prevTime: -1,\n            currentTime: -1,\n            deltaTime: 0,\n        };\n\n        /** @protected */\n        this.animationFrameHandler = animationFrameHandler;\n\n        /** @protected */\n        this.callback = callback;\n\n        this.next = this.next.bind(this);\n        this.start = this.start.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n\n    get running() {\n        return this.handle !== 0;\n    }\n    \n    next(now = performance.now()) {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        let d = this.detail;\n        d.prevTime = d.currentTime;\n        d.currentTime = now;\n        d.deltaTime = d.currentTime - d.prevTime;\n        this.callback(this);\n    }\n\n    start() {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        return this;\n    }\n\n    cancel() {\n        this.animationFrameHandler.cancelAnimationFrame(this.handle);\n        return this;\n    }\n}\n","import { Topic } from './Topic';\n\n/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {(attachment: T) => Promise<void>} AsyncTopicCallback<T>\n */\n\n/** @template T */\nexport class AsyncTopic extends Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        super(name);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    async dispatch(topicManager, attachment) {\n        // TODO: Topics don't really support async yet. 1. No result processing. 2. TopicManager doesn't really care.\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    async dispatchImmediately(topicManager, attachment) {\n        // @ts-ignore\n        await topicManager.dispatchImmediatelyAndWait(this, attachment);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    on(topicManager, priority, callback) {\n        // @ts-ignore\n        return super.on(topicManager, priority, callback);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    off(topicManager, callback) {\n        // @ts-ignore\n        return super.off(topicManager, callback);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    once(topicManager, priority, callback) {\n        // @ts-ignore\n        return super.once(topicManager, priority, callback);\n    }\n}","/**\n * @template T\n */\nexport class ComponentClass {\n    /**\n     * @param {string} name \n     * @param {() => T} [newCallback]\n     * @param {(component: T) => void} [deleteCallback] \n     */\n    constructor(name, newCallback = () => null, deleteCallback = () => {}) {\n        this.name = name;\n        this.new = newCallback;\n        this.delete = deleteCallback;\n    }\n}\n","import { ComponentClass } from './ComponentClass';\nimport { QueryManager } from './QueryManager';\n\n/**\n * @template T\n * @typedef {Record<number, T>} ComponentInstanceMap<T>\n */\n\n/**\n * @typedef {Record<string, ComponentInstanceMap<?>>} ComponentClassMap\n * @typedef {number} EntityId\n * @typedef {string} ComponentName\n */\n\n/**\n * @callback EntityComponentChangedCallback\n * @param {EntityManager} entityManager\n * @param {EntityId} entityId\n * @param {ComponentClass<?>} attached\n * @param {ComponentClass<?>} detached\n * @param {boolean} dead\n */\n\nexport class EntityManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {ComponentClassMap}\n         */\n        this.components = {};\n        /** @private */\n        this.nameClassMapping = {};\n        /**\n         * @private\n         * @type {EntityId}\n         */\n        this.nextAvailableEntityId = 1;\n        /**\n         * @protected\n         * @type {Array<[string, ...any]>}\n         */\n        this.queue = [];\n        /** @private */\n        this.listeners = [];\n        this.queries = new QueryManager();\n    }\n\n    /**\n     * @protected\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} attached\n     * @param {ComponentClass<?>} detached\n     * @param {boolean} dead\n     */\n    entityComponentChangedCallback(entityId, attached, detached, dead) {\n        this.queries.onEntityComponentChanged(this, entityId, attached, detached, dead);\n        for(let callback of this.listeners) {\n            callback(this, entityId, attached, detached, dead);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    addEventListener(event, callback) {\n        if (event === 'change') {\n            this.listeners.push(callback);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    removeEventListener(event, callback) {\n        if (event === 'change') {\n            let i = this.listeners.indexOf(callback);\n            if (i >= 0) {\n                this.listeners.splice(i, 1);\n            }\n        }\n    }\n\n    flush() {\n        while (this.queue.length > 0) {\n            let [type, ...args] = this.queue.shift();\n            switch (type) {\n                case 'attach': {\n                    let [entityId, componentClass, instance] = args;\n                    this.attachImmediately(entityId, componentClass, instance);\n                } break;\n                case 'detach': {\n                    let [entityId, componentClass] = args;\n                    this.detachImmediately(entityId, componentClass);\n                } break;\n                case 'clear': {\n                    let [componentClass] = args;\n                    this.clearImmediately(componentClass);\n                } break;\n            }\n        }\n    }\n\n    /**\n     * @returns {EntityId}\n     */\n    create() {\n        let entityId = this.nextAvailableEntityId++;\n        this.entityComponentChangedCallback(entityId, null, null, false);\n        return entityId;\n    }\n\n    /**\n     * @param {EntityId} entityId \n     */\n    destroy(entityId) {\n        const components = this.components;\n        for (const componentName of Object.keys(components)) {\n            const instanceMap = components[componentName];\n            if (entityId in instanceMap) {\n                delete instanceMap[entityId];\n                this.entityComponentChangedCallback(entityId, null, this.nameClassMapping[componentName], false);\n            }\n        }\n        this.entityComponentChangedCallback(entityId, null, null, true);\n    }\n\n    /**\n     * Whether the entity exists with all provided component classes.\n     * \n     * @param {EntityId} entityId \n     * @param {...ComponentClass<?>} componentClasses\n     */\n    exists(entityId, ...componentClasses) {\n        if (componentClasses.length > 0) {\n            for(const componentClass of componentClasses) {\n                let instanceMap = this.mapOf(componentClass);\n                if (!(entityId in instanceMap)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let instanceMap of Object.values(this.components)) {\n                if (entityId in instanceMap) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attach(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        this.queue.push(['attach', entityId, componentClass, instance]);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attachImmediately(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        let instanceMap = this.mapOf(componentClass);\n        instanceMap[entityId] = instance;\n        this.entityComponentChangedCallback(entityId, componentClass, null, false);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     */\n    detach(entityId, componentClass) {\n        this.queue.push(['detach', entityId, componentClass]);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     */\n    detachImmediately(entityId, componentClass) {\n        let instanceMap = this.mapOf(componentClass);\n        let instance = instanceMap[entityId];\n        delete instanceMap[entityId];\n        componentClass.delete(instance);\n        this.entityComponentChangedCallback(entityId, null, componentClass, false);\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     */\n    clear(componentClass) {\n        this.queue.push(['clear', componentClass]);\n    }\n\n    /**\n     * @param {ComponentClass<any>} componentClass \n     */\n    clearImmediately(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        const instanceMap = components[componentName];\n        let entities = Object.keys(instanceMap).map(Number);\n        let instances = Object.values(instanceMap);\n        components[componentName] = {};\n        this.nameClassMapping[componentName] = componentClass;\n        for(let instance of instances) {\n            componentClass.delete(instance);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, componentClass, false);\n        }\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @returns {T}\n     */\n    get(entityId, componentClass) {\n        return this.mapOf(componentClass)[entityId] || null;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     * @returns {number}\n     */\n    count(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).length;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass\n     */\n    keysOf(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).map(Number);\n    }\n\n    /**\n     * @template T\n     * @param {ComponentClass<T>} componentClass \n     * @returns {Array<T>}\n     */\n    valuesOf(componentClass) {\n        return Object.values(this.mapOf(componentClass));\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {ComponentClass<T>} componentClass\n     * @returns {ComponentInstanceMap<T>} A map of entity ids to component instance data.\n     */\n    mapOf(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        if (!(componentName in components)) {\n            /** @type {ComponentInstanceMap<T>} */\n            let map = {};\n            components[componentName] = map;\n            this.nameClassMapping[componentName] = componentClass;\n            return map;\n        } else {\n            return components[componentName];\n        }\n    }\n\n    /** @returns {Set<EntityId>} */\n    entityIds() {\n        let result = new Set();\n        for (let instanceMap of Object.values(this.components)) {\n            for(let entityId of Object.keys(instanceMap)) {\n                result.add(Number(entityId));\n            }\n        }\n        return result;\n    }\n\n    /** @returns {Array<ComponentClass<?>>} */\n    componentClasses() {\n        return Object.values(this.nameClassMapping);\n    }\n\n    reset() {\n        const components = this.components;\n        /** @type {Set<EntityId>} */\n        let entities = new Set();\n        for(const componentName of Object.keys(components)) {\n            const componentClass = this.nameClassMapping[componentName];\n            const instanceMap = components[componentName];\n            for(let entityId of Object.keys(instanceMap)) {\n                entities.add(Number(entityId));\n            }\n            this.clearImmediately(componentClass);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, null, true);\n        }\n        entities.clear();\n        this.queries.reset();\n        this.components = {};\n        this.nextAvailableEntityId = 1;\n        this.queue.length = 0;\n        this.listeners.length = 0;\n    }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nexport class OrthographicCamera extends Camera {\n  /**\n   * @param {number} [left]\n   * @param {number} [top]\n   * @param {number} [right]\n   * @param {number} [bottom]\n   * @param {number} [near]\n   * @param {number} [far]\n   */\n  constructor(\n    left = undefined,\n    top = undefined,\n    right = undefined,\n    bottom = undefined,\n    near = -1000,\n    far = 1000\n  ) {\n    super(mat4.create(), mat4.create());\n\n    this.orthoBounds = {\n      left: typeof left === 'undefined' ? undefined : Number(left),\n      top: typeof top === 'undefined' ? undefined : Number(top),\n      right: typeof right === 'undefined' ? undefined : Number(right),\n      bottom: typeof bottom === 'undefined' ? undefined : Number(bottom),\n    };\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /**\n   * If both the bounds and viewport dimensions are defined, the orthographic\n   * projection will be set the defined bounds adjusted with respect to\n   * the aspect ratio. This is usually the desired behavior.\n   *\n   * If the bounds are `undefined`, the orthographic projection will\n   * be set to the viewport dimensions. This is useful for pixel-perfect\n   * projections.\n   *\n   * If viewport dimensions are `undefined`, the orthographic projection\n   * will only use the defined bounds. This is useful if you are already\n   * performing your own calculations for the bounds or desire a static\n   * projection.\n   *\n   * @override\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const { near, far } = this.clippingPlane;\n    const { left, top, right, bottom } = this.orthoBounds;\n\n    let projectionMatrix = this.projectionMatrix;\n    let hasViewport = typeof viewportWidth !== 'undefined';\n    let hasBounds = typeof left !== 'undefined';\n\n    if (hasViewport) {\n      if (hasBounds) {\n        // Use the defined bounds with respect to the viewport aspect ratio\n        const aspectRatio = viewportWidth / viewportHeight;\n        mat4.ortho(\n          projectionMatrix,\n          left * aspectRatio,\n          right * aspectRatio,\n          bottom,\n          top,\n          near,\n          far\n        );\n      } else {\n        // Use the viewport dimensions as bounds\n        mat4.ortho(\n          projectionMatrix,\n          0,\n          viewportWidth,\n          viewportHeight,\n          0,\n          near,\n          far\n        );\n      }\n    } else {\n      if (hasBounds) {\n        // Use the defined bounds as-is\n        mat4.ortho(projectionMatrix, left, right, bottom, top, near, far);\n      } else {\n        // Use default bounds (since nothing else exists)\n        mat4.ortho(projectionMatrix, -1, 1, 1, -1, -1, 1);\n      }\n    }\n    return this;\n  }\n}\n"],"names":["UP","vec3","fromValues","Camera","constructor","projectionMatrix","viewMatrix","this","resize","viewportWidth","viewportHeight","DEFAULT_FOVY","Math","PI","TO_RAD_FACTOR","MAX_DEPTH_LEVEL","getRoots","graph","roots","getParent","node","parents","setParent","parentNode","getChildren","children","result","attach","out","childNode","push","detach","childIndex","indexOf","splice","rootIndex","walkImpl","level","nodeCallback","filterCallback","nextNodes","walkDeleteCallback","sceneNode","a","slice","Object","fromEntries","entries","map","k","v","targetNode","Error","replacementNode","grandChildren","length","clearChildren","replacementParentId","replacementChildren","callback","opts","from","childFilter","fromNodes","Array","isArray","fromNode","QueryManager","cachedResults","keyQueryMapping","onEntityComponentChanged","bind","entityManager","entityId","added","removed","dead","query","values","entities","key","i","hasSelector","Not","test","selectors","selector","isSelectorNot","componentClass","value","exists","hydrate","entityIds","findAll","queryKey","count","clear","reset","type","name","Query","s","sort","join","computeSelectorKey","findIndex","queries","findEntityIds","queryManager","findComponents","get","computeResult","ents","componentClasses","Topic","dispatch","topicManager","attachment","dispatchImmediately","on","priority","addEventListener","off","removeEventListener","once","wrapper","poll","amount","min","retain","pollAndRetain","comparator","b","animationFrameHandler","window","handle","detail","prevTime","currentTime","deltaTime","next","start","cancel","running","now","performance","requestAnimationFrame","d","cancelAnimationFrame","components","super","create","instance","destroy","find","findAny","floor","random","async","dispatchImmediatelyAndWait","newCallback","deleteCallback","new","delete","nameClassMapping","nextAvailableEntityId","queue","listeners","entityComponentChangedCallback","attached","detached","event","flush","args","shift","attachImmediately","detachImmediately","clearImmediately","componentName","keys","instanceMap","mapOf","Number","instances","keysOf","valuesOf","Set","add","locky","position","forward","right","up","forwardAmount","rightAmount","upAmount","pitch","yaw","look","dx","dy","dt","max","move","apply","rady","radp","cosy","cos","cosp","siny","sin","dz","normalize","set","cross","scale","target","mat4","lookAt","left","top","bottom","near","far","orthoBounds","undefined","clippingPlane","hasBounds","aspectRatio","ortho","fieldOfView","perspective","cachedIn","cachedOut","callbacks","maxRetains","nameTopicMapping","topic","callbacksOf","countEventListeners","incomingOf","outgoingOf","outgoing","topicName","maxPerTopic","incoming","getPendingRetainCount","getPendingFlushCount","x","y","z","rotation","quat","getTranslation","getRotation","targetRotation","slerp","fromRotationTranslation","translation","translate","normalizedScreenCoordX","normalizedScreenCoordY","normalized","vec4","m","invert","transformMat4"],"mappings":"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"}