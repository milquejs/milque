{"version":3,"file":"milque-display.cjs.js","sources":["../src/DisplayPort.js"],"sourcesContent":["const INNER_HTML = /* html */`\n<div class=\"container\">\n  <label class=\"hidden\" id=\"title\">display-port</label>\n  <label class=\"hidden\" id=\"fps\">00</label>\n  <label class=\"hidden\" id=\"dimension\">0x0</label>\n  <div class=\"content\">\n    <slot id=\"inner\">\n      <canvas>\n        Oh no! Your browser does not support canvas.\n      </canvas>\n    </slot>\n    <slot name=\"overlay\"></slot>\n  </div>\n  <slot name=\"frame\"></slot>\n</div>`;\n\nconst INNER_STYLE = /* css */`\n:host {\n  display: inline-block;\n  color: #555555;\n}\n\n.container {\n  display: flex;\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.content {\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n.content > *:not(canvas) {\n  width: 100%;\n  height: 100%;\n}\n\ncanvas {\n  background: #000000;\n  image-rendering: pixelated;\n}\n\nlabel {\n  position: absolute;\n  font-family: monospace;\n  color: currentColor;\n}\n\n#inner {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n#title {\n  left: 0.5rem;\n  top: 0.5rem;\n}\n\n#fps {\n  right: 0.5rem;\n  top: 0.5rem;\n}\n\n#dimension {\n  left: 0.5rem;\n  bottom: 0.5rem;\n}\n\n.hidden {\n  display: none;\n}\n\n:host([debug]) .container {\n  outline: 6px dashed rgba(0, 0, 0, 0.1);\n  outline-offset: -4px;\n  background-color: rgba(0, 0, 0, 0.1);\n}\n\n:host([mode='noscale']) canvas {\n  margin: 0;\n  top: 0;\n  left: 0;\n}\n\n:host([mode='stretch']) canvas,\n:host([mode='scale']) canvas {\n  width: 100%;\n  height: 100%;\n}\n\n:host([mode='fit']),\n:host([mode='scale']),\n:host([mode='center']),\n:host([mode='stretch']),\n:host([mode='fill']) {\n  width: 100%;\n  height: 100%;\n}\n\n:host([full]) {\n  width: 100vw !important;\n  height: 100vh !important;\n}\n\n:host([disabled]) {\n  display: none;\n}\n\nslot {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n::slotted(*) {\n  pointer-events: auto;\n}`;\n\n/**\n * No scaling is applied. The canvas size maintains a\n * 1:1 pixel ratio to the defined display dimensions.\n */\nexport const MODE_NOSCALE = 'noscale';\n\n/**\n * No scaling is applied, but the element fills the\n * entire viewport. The canvas size maintains a 1:1\n * pixel ratio to the defined display dimensions and\n * is centered inside the scaled element.\n */\nexport const MODE_CENTER = 'center';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio. This will adjust\n * canvas resolution to fit the viewport dimensions.\n * In other words, the canvas pixel size remains\n * constant, but the number of pixels in the canvas\n * will increase or decrease to compensate. This is\n * the default scaling mode.\n */\nexport const MODE_FIT = 'fit';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio and pixel\n * resolution. This will upscale and downscale the\n * pixel size depending on the viewport dimentions\n * in order to preserve the canvas pixel count. In\n * other words, the number of pixels in the canvas\n * remain constant but appear larger or smaller to\n * compensate.\n */\nexport const MODE_SCALE = 'scale';\n\n/**\n * Resizes the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio nor pixel\n * count (adds and removes pixels to fill size). If you\n * care about aspect ratio but not pixel count, consider\n * using 'fit' mode instead.\n */\nexport const MODE_FILL = 'fill';\n\n/**\n * Scales the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio but\n * does preserve pixel count (by stretching the pixel\n * size). If you care about aspect ratio and pixel\n * count, consider using 'scale' mode instead.\n */\nexport const MODE_STRETCH = 'stretch';\n\n/**\n * The default display x dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_WIDTH = 300;\n/**\n * The default display y dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_HEIGHT = 150;\n\n/** The default display scaling mode. */\nconst DEFAULT_MODE = MODE_FIT;\n\n/** The default resize timeout */\nconst DELAYED_RESIZE_MILLIS = 200;\n\n/**\n * @typedef {CustomEvent} FrameEvent\n * @property {number} detail.now\n * The current time in milliseconds.\n * @property {number} detail.prevTime\n * The previous frame time in milliseconds.\n * @property {number} detail.deltaTime\n * The time taken between the current and previous\n * frame in milliseconds.\n * @property {HTMLCanvasElement} detail.canvas\n * The canvas element.\n */\n\n/**\n * @typedef {MODE_CENTER|MODE_FIT|MODE_NOSCALE|MODE_SCALE|MODE_FILL|MODE_STRETCH} DisplayScaling\n */\n\n/**\n * A canvas that can scale and stretch with respect to the aspect ratio to fill\n * the viewport size.\n *\n * To start drawing, you should get the canvas context like so:\n *\n * For Canvas2D:\n * ```\n * const display = document.querySelector('display-port');\n * const ctx = display.canvas.getContext('2d');\n * ctx.drawText(0, 0, 'Hello World!');\n * ```\n *\n * For WebGL:\n * ```\n * const display = document.querySelector('display-port');\n * const gl = display.canvas.getContext('webgl');\n * gl.clear(gl.COLOR_BUFFER_BIT);\n * ```\n *\n * Usually, you would want to set the `width` and `height` attributes to define\n * the canvas size and aspect ratio in pixels. You can also change the scaling\n * behavior by setting the `mode` attribute.\n *\n * And for convenience, this element also dispatches a `frame` event every animation\n * frame (60 fps). This is basically the same as calling `requestAnimationFrame()`.\n *\n * NOTE: The viewport size is usually the parent container size. However, in the\n * rare case the element must be nested in a child container, you can define the\n * boolean attribute `full` to force the dimensions to be the actual window size.\n */\nexport class DisplayPort extends HTMLElement {\n\n  /**\n   * @param {object} [opts]\n   * @param {HTMLElement} [opts.root]\n   * @param {string} [opts.id]\n   * @param {DisplayScaling} [opts.mode]\n   * @param {number} [opts.width]\n   * @param {number} [opts.height]\n   * @param {boolean} [opts.debug]\n   */\n  static create(opts = {}) {\n    const {\n      root = document.body,\n      id = undefined,\n      mode = DEFAULT_MODE,\n      width = DEFAULT_WIDTH,\n      height = DEFAULT_HEIGHT,\n      debug = false\n    } = opts || {};\n    let result = new DisplayPort();\n    result.id = id;\n    result.mode = mode;\n    result.width = width;\n    result.height = height;\n    result.debug = debug;\n    root.appendChild(result);\n    return result;\n  }\n\n  static define(customElements = window.customElements) {\n    customElements.define('display-port', this);\n  }\n\n  /** @private */\n  static get [Symbol.for('templateNode')]() {\n    let t = document.createElement('template');\n    t.innerHTML = INNER_HTML;\n    Object.defineProperty(this, Symbol.for('templateNode'), { value: t });\n    return t;\n  }\n\n  /** @private */\n  static get [Symbol.for('styleNode')]() {\n    let t = document.createElement('style');\n    t.innerHTML = INNER_STYLE;\n    Object.defineProperty(this, Symbol.for('styleNode'), { value: t });\n    return t;\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  static get observedAttributes() {\n    return [\n      'debug',\n      'disabled',\n      // 'mode',\n      'width',\n      'height',\n      'onframe',\n      // Built-in attributes\n      'id',\n      'class',\n    ];\n  }\n\n  /**\n   * The scaling mode.\n   * - `noscale`: Do not perform scaling.\n   * - `center`: Do not perform scaling but stretch the display to fill the entire\n   * viewport. The unscaled canvas is centered.\n   * - `fit`: Resize resolution to fill the entire viewport and maintains the aspect\n   * ratio. The pixel resolution is changed. This is the default behavior.\n   * - `fill`: Resize resolution to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `stretch`: Perform scaling to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `scale`: Perform scaling to fill the entire viewport and maintains the\n   * aspect ratio and resolution. The pixel resolution remains constant.\n   * @returns {DisplayScaling} The current scaling mode.\n   */\n  get mode() {\n    return /** @type {DisplayScaling} */ (this.getAttribute('mode'));\n  }\n\n  set mode(value) {\n    this.setAttribute('mode', value);\n  }\n\n  /**\n   * Set to true for debug information.\n   * @returns {boolean}\n   */\n  get debug() {\n    return this._debug;\n  }\n\n  set debug(value) {\n    this.toggleAttribute('debug', value);\n  }\n\n  /**\n   * If disabled, animation frames will not fire.\n   * @returns {boolean}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  /**\n   * The canvas width in pixels. This determines the aspect ratio and canvas buffer size.\n   * @returns {number}\n   */\n  get width() {\n    return this._width;\n  }\n\n  set width(value) {\n    this.setAttribute('width', String(value));\n  }\n\n  /**\n   * The canvas height in pixels. This determines the aspect ratio and canvas buffer size.\n   */\n  get height() {\n    return this._height;\n  }\n\n  set height(value) {\n    this.setAttribute('height', String(value));\n  }\n\n  /** Fired every animation frame. */\n  get onframe() {\n    return this._onframe;\n  }\n\n  set onframe(value) {\n    if (this._onframe) this.removeEventListener('frame', this._onframe);\n    this._onframe = value;\n    if (this._onframe) this.addEventListener('frame', value);\n  }\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('templateNode')].content.cloneNode(true)\n    );\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('styleNode')].cloneNode(true)\n    );\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this._canvasElement = null;\n    /**\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this._contentElement = shadowRoot.querySelector('.content');\n    /**\n     * @private\n     * @type {HTMLSlotElement}\n     */\n    this._innerElement = shadowRoot.querySelector('#inner');\n\n    /** @private */\n    this._titleElement = shadowRoot.querySelector('#title');\n    /** @private */\n    this._fpsElement = shadowRoot.querySelector('#fps');\n    /** @private */\n    this._dimensionElement = shadowRoot.querySelector('#dimension');\n\n    /** @private */\n    this._debug = false;\n    /** @private */\n    this._disabled = false;\n    /** @private */\n    this._width = DEFAULT_WIDTH;\n    /** @private */\n    this._height = DEFAULT_HEIGHT;\n    /** @private */\n    this._onframe = undefined;\n\n    /** @private */\n    this._animationRequestHandle = 0;\n    /** @private */\n    this._prevAnimationFrameTime = 0;\n\n    /** @private */\n    this._resizeTimeoutHandle = 0;\n    /** @private */\n    this._resizeCanvasWidth = 0;\n    /** @private */\n    this._resizeCanvasHeight = 0;\n\n    /** @private */\n    this._frameEvent = new CustomEvent('frame', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        now: 0,\n        prevTime: 0,\n        deltaTime: 0,\n        canvas: this._canvasElement,\n      },\n    });\n    /** @private */\n    this._resizeEvent = new CustomEvent('resize', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        width: 0,\n        height: 0,\n      },\n    });\n\n    /** @private */\n    this.update = this.update.bind(this);\n\n    /** @private */\n    this.onDelayCanvasResize = this.onDelayCanvasResize.bind(this);\n\n    /** @private */\n    this.onSlotChange = this.onSlotChange.bind(this);\n  }\n\n  /** Get the canvas element. */\n  get canvas() {\n    return this._canvasElement;\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  connectedCallback() {\n    upgradeProperty(this, 'mode');\n    upgradeProperty(this, 'debug');\n    upgradeProperty(this, 'disabled');\n    upgradeProperty(this, 'width');\n    upgradeProperty(this, 'height');\n    upgradeProperty(this, 'onframe');\n\n    if (!this.hasAttribute('mode')) {\n      this.setAttribute('mode', DEFAULT_MODE);\n    }\n\n    // Allows this element to be focusable\n    if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', '0');\n    }\n\n    this._innerElement.addEventListener('slotchange', this.onSlotChange);\n    this._canvasElement = this._innerElement.querySelector('canvas');\n    if (this._canvasElement) {\n      this.updateCanvasSize(true);\n      this.resume();\n    }\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  disconnectedCallback() {\n    this._innerElement.removeEventListener('slotchange', this.onSlotChange);\n    this.pause();\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  attributeChangedCallback(attribute, prev, value) {\n    switch (attribute) {\n      case 'debug':\n        {\n          this._debug = value !== null;\n        }\n        break;\n      case 'disabled':\n        {\n          this._disabled = value !== null;\n        }\n        break;\n      case 'width':\n        {\n          this._width = Number(value);\n        }\n        break;\n      case 'height':\n        {\n          this._height = Number(value);\n        }\n        break;\n      case 'onframe':\n        {\n          this.onframe = new Function(\n            'event',\n            'with(document){with(this){' + value + '}}'\n          ).bind(this);\n        }\n        break;\n    }\n\n    switch (attribute) {\n      case 'disabled':\n        if (value) {\n          this.update(0);\n          this.pause();\n        } else {\n          this.resume();\n        }\n        break;\n      // NOTE: For debugging purposes...\n      case 'id':\n      case 'class':\n        this._titleElement.innerHTML = `display-port${\n          this.className ? '.' + this.className : ''\n        }${this.hasAttribute('id') ? '#' + this.getAttribute('id') : ''}`;\n        break;\n      case 'debug':\n        this._titleElement.classList.toggle('hidden', value);\n        this._fpsElement.classList.toggle('hidden', value);\n        this._dimensionElement.classList.toggle('hidden', value);\n        break;\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e \n   */\n  onSlotChange(e) {\n    const slot = /** @type {HTMLSlotElement} */ (e.target);\n    let children = slot.assignedElements({ flatten: true });\n    let canvas = /** @type {HTMLCanvasElement} */ (children.find(el => el instanceof HTMLCanvasElement));\n    if (!canvas) {\n      throw new Error('No valid canvas element found for display.');\n    }\n    this._canvasElement = canvas;\n    this.updateCanvasSize(true);\n    this.resume();\n  }\n\n  /**\n   * @param {'2d'|'webgl'|'webgl2'} [contextId]\n   * @param {CanvasRenderingContext2DSettings} [options]\n   */\n  getContext(contextId = '2d', options = undefined) {\n    return this._canvasElement.getContext(contextId, options);\n  }\n\n  /** Pause animation of the display frames. */\n  pause() {\n    window.cancelAnimationFrame(this._animationRequestHandle);\n  }\n\n  /** Resume animation of the display frames. */\n  resume() {\n    this._animationRequestHandle = window.requestAnimationFrame(this.update);\n  }\n\n  /** @private */\n  update(now) {\n    this._animationRequestHandle = window.requestAnimationFrame(this.update);\n    this.updateCanvasSize(false);\n    const deltaTime = now - this._prevAnimationFrameTime;\n    this._prevAnimationFrameTime = now;\n\n    // NOTE: For debugging purposes...\n    if (this._debug) {\n      // Update FPS...\n      const frames =\n        deltaTime <= 0\n          ? '--'\n          : String(Math.round(1000 / deltaTime)).padStart(2, '0');\n      if (this._fpsElement.textContent !== frames) {\n        this._fpsElement.textContent = frames;\n      }\n\n      // Update dimensions...\n      const mode = this.mode;\n      if (mode === MODE_NOSCALE) {\n        let result = `${this._width}x${this._height}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      } else {\n        let result = `${this._width}x${this._height}|${this.shadowRoot.host.clientWidth}x${this.shadowRoot.host.clientHeight}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      }\n    }\n\n    let event = this._frameEvent;\n    let detail = event.detail;\n    detail.now = now;\n    detail.prevTime = this._prevAnimationFrameTime;\n    detail.deltaTime = deltaTime;\n    this.dispatchEvent(this._frameEvent);\n  }\n\n  /** @private */\n  onDelayCanvasResize() {\n    this._resizeTimeoutHandle = null;\n    this.updateCanvasSize(true);\n  }\n\n  delayCanvasResize(canvasWidth, canvasHeight) {\n    if (\n      canvasWidth !== this._resizeCanvasWidth ||\n      canvasHeight !== this._resizeCanvasHeight\n    ) {\n      // Only call onDelayCanvasResize, if new canvas size actually changed since last time.\n      this._resizeCanvasWidth = canvasWidth;\n      this._resizeCanvasHeight = canvasHeight;\n      if (this._resizeTimeoutHandle) {\n        window.clearTimeout(this._resizeTimeoutHandle);\n      }\n      this._resizeTimeoutHandle = window.setTimeout(\n        this.onDelayCanvasResize,\n        DELAYED_RESIZE_MILLIS\n      );\n    }\n  }\n\n  /** @private */\n  updateCanvasSize(force = true) {\n    const clientRect = this.shadowRoot.host.getBoundingClientRect();\n    const clientWidth = clientRect.width;\n    const clientHeight = clientRect.height;\n\n    let canvas = this._canvasElement;\n    let canvasWidth = this._width;\n    let canvasHeight = this._height;\n\n    const mode = this.mode;\n    if (mode === MODE_STRETCH || mode === MODE_FILL) {\n      canvasWidth = clientWidth;\n      canvasHeight = clientHeight;\n    } else if (mode !== MODE_NOSCALE) {\n      if (\n        clientWidth < canvasWidth ||\n        clientHeight < canvasHeight ||\n        mode === MODE_FIT ||\n        mode == MODE_SCALE\n      ) {\n        let ratioX = clientWidth / canvasWidth;\n        let ratioY = clientHeight / canvasHeight;\n\n        if (ratioX < ratioY) {\n          canvasWidth = clientWidth;\n          canvasHeight = canvasHeight * ratioX;\n        } else {\n          canvasWidth = canvasWidth * ratioY;\n          canvasHeight = clientHeight;\n        }\n      }\n    }\n\n    canvasWidth = Math.floor(canvasWidth);\n    canvasHeight = Math.floor(canvasHeight);\n\n    if (typeof force === 'undefined') {\n      force =\n        canvas.clientWidth !== canvasWidth ||\n        canvas.clientHeight !== canvasHeight;\n    }\n\n    if (!force) {\n      this.delayCanvasResize(canvasWidth, canvasHeight);\n      return;\n    }\n\n    let fontSize =\n      Math.min(canvasWidth / this._width, canvasHeight / this._height) * 0.5;\n    // NOTE: Update the inner container for the default slotted children.\n    // To anchor children outside the canvas, use the slot named 'frame'.\n    this._innerElement.style.fontSize = `font-size: ${fontSize}em`;\n    if (force) {\n      if (mode === MODE_SCALE) {\n        canvas.width = this._width;\n        canvas.height = this._height;\n      } else if (mode !== MODE_STRETCH) {\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n      }\n      let contentStyle = this._contentElement.style;\n      contentStyle.width = `${canvasWidth}px`;\n      contentStyle.height = `${canvasHeight}px`;\n\n      if (mode === MODE_FIT || mode === MODE_FILL) {\n        this._width = canvasWidth;\n        this._height = canvasHeight;\n      }\n\n      let event = this._resizeEvent;\n      let detail = event.detail;\n      detail.width = canvasWidth;\n      detail.height = canvasHeight;\n      this.dispatchEvent(this._resizeEvent);\n    }\n  }\n}\n\nfunction upgradeProperty(element, propertyName) {\n  if (Object.prototype.hasOwnProperty.call(element, propertyName)) {\n    let value = element[propertyName];\n    delete element[propertyName];\n    element[propertyName] = value;\n  }\n}\n"],"names":["MODE_NOSCALE","MODE_FIT","MODE_SCALE","MODE_FILL","MODE_STRETCH","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_MODE","DisplayPort","HTMLElement","static","opts","root","document","body","id","mode","width","height","debug","result","appendChild","customElements","window","define","this","Symbol","for","t","createElement","innerHTML","Object","defineProperty","value","observedAttributes","getAttribute","setAttribute","_debug","toggleAttribute","disabled","_disabled","_width","String","_height","onframe","_onframe","removeEventListener","addEventListener","constructor","super","shadowRoot","attachShadow","content","cloneNode","_canvasElement","_contentElement","querySelector","_innerElement","_titleElement","_fpsElement","_dimensionElement","undefined","_animationRequestHandle","_prevAnimationFrameTime","_resizeTimeoutHandle","_resizeCanvasWidth","_resizeCanvasHeight","_frameEvent","CustomEvent","composed","bubbles","detail","now","prevTime","deltaTime","canvas","_resizeEvent","update","bind","onDelayCanvasResize","onSlotChange","connectedCallback","upgradeProperty","hasAttribute","updateCanvasSize","resume","disconnectedCallback","pause","attributeChangedCallback","attribute","prev","Number","Function","className","classList","toggle","e","assignedElements","flatten","find","el","HTMLCanvasElement","Error","getContext","contextId","options","cancelAnimationFrame","requestAnimationFrame","frames","Math","round","padStart","textContent","host","clientWidth","clientHeight","dispatchEvent","delayCanvasResize","canvasWidth","canvasHeight","clearTimeout","setTimeout","force","clientRect","getBoundingClientRect","ratioX","ratioY","floor","fontSize","min","style","contentStyle","element","propertyName","prototype","hasOwnProperty","call"],"mappings":"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"}