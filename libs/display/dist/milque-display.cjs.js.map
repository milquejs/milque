{"version":3,"file":"milque-display.cjs.js","sources":["../src/DisplayPort.js","../src/FlexCanvas.js"],"sourcesContent":["const INNER_HTML = /* html */`\n<div class=\"container\">\n  <label class=\"hidden\" id=\"title\">display-port</label>\n  <label class=\"hidden\" id=\"fps\">00</label>\n  <label class=\"hidden\" id=\"dimension\">0x0</label>\n  <div class=\"content\">\n    <slot id=\"inner\">\n      <canvas>\n        Oh no! Your browser does not support canvas.\n      </canvas>\n    </slot>\n    <slot name=\"overlay\"></slot>\n  </div>\n  <slot name=\"frame\"></slot>\n</div>`;\n\nconst INNER_STYLE = /* css */`\n:host {\n  display: inline-block;\n  color: #555555;\n}\n\n.container {\n  display: flex;\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.content {\n  position: relative;\n  margin: auto;\n  overflow: hidden;\n}\n\n.content > *:not(canvas) {\n  width: 100%;\n  height: 100%;\n}\n\ncanvas {\n  background: #000000;\n  image-rendering: pixelated;\n}\n\nlabel {\n  position: absolute;\n  font-family: monospace;\n  color: currentColor;\n}\n\n#inner {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n#title {\n  left: 0.5rem;\n  top: 0.5rem;\n}\n\n#fps {\n  right: 0.5rem;\n  top: 0.5rem;\n}\n\n#dimension {\n  left: 0.5rem;\n  bottom: 0.5rem;\n}\n\n.hidden {\n  display: none;\n}\n\n:host([debug]) .container {\n  outline: 6px dashed rgba(0, 0, 0, 0.1);\n  outline-offset: -4px;\n  background-color: rgba(0, 0, 0, 0.1);\n}\n\n:host([mode='noscale']) canvas {\n  margin: 0;\n  top: 0;\n  left: 0;\n}\n\n:host([mode='stretch']) canvas,\n:host([mode='scale']) canvas {\n  width: 100%;\n  height: 100%;\n}\n\n:host([mode='fit']),\n:host([mode='scale']),\n:host([mode='center']),\n:host([mode='stretch']),\n:host([mode='fill']) {\n  width: 100%;\n  height: 100%;\n}\n\n:host([full]) {\n  width: 100vw !important;\n  height: 100vh !important;\n}\n\n:host([disabled]) {\n  display: none;\n}\n\nslot {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\n\n::slotted(*) {\n  pointer-events: auto;\n}`;\n\n/**\n * No scaling is applied. The canvas size maintains a\n * 1:1 pixel ratio to the defined display dimensions.\n */\nexport const MODE_NOSCALE = 'noscale';\n\n/**\n * No scaling is applied, but the element fills the\n * entire viewport. The canvas size maintains a 1:1\n * pixel ratio to the defined display dimensions and\n * is centered inside the scaled element.\n */\nexport const MODE_CENTER = 'center';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio. This will adjust\n * canvas resolution to fit the viewport dimensions.\n * In other words, the canvas pixel size remains\n * constant, but the number of pixels in the canvas\n * will increase or decrease to compensate. This is\n * the default scaling mode.\n */\nexport const MODE_FIT = 'fit';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio and pixel\n * resolution. This will upscale and downscale the\n * pixel size depending on the viewport dimentions\n * in order to preserve the canvas pixel count. In\n * other words, the number of pixels in the canvas\n * remain constant but appear larger or smaller to\n * compensate.\n */\nexport const MODE_SCALE = 'scale';\n\n/**\n * Resizes the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio nor pixel\n * count (adds and removes pixels to fill size). If you\n * care about aspect ratio but not pixel count, consider\n * using 'fit' mode instead.\n */\nexport const MODE_FILL = 'fill';\n\n/**\n * Scales the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio but\n * does preserve pixel count (by stretching the pixel\n * size). If you care about aspect ratio and pixel\n * count, consider using 'scale' mode instead.\n */\nexport const MODE_STRETCH = 'stretch';\n\n/**\n * The default display x dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_WIDTH = 300;\n/**\n * The default display y dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_HEIGHT = 150;\n\n/** The default display scaling mode. */\nconst DEFAULT_MODE = MODE_FIT;\n\n/** The default resize timeout */\nconst DELAYED_RESIZE_MILLIS = 200;\n\n/**\n * @typedef {CustomEvent} FrameEvent\n * @property {number} detail.now\n * The current time in milliseconds.\n * @property {number} detail.prevTime\n * The previous frame time in milliseconds.\n * @property {number} detail.deltaTime\n * The time taken between the current and previous\n * frame in milliseconds.\n * @property {HTMLCanvasElement} detail.canvas\n * The canvas element.\n */\n\n/**\n * @typedef {MODE_CENTER|MODE_FIT|MODE_NOSCALE|MODE_SCALE|MODE_FILL|MODE_STRETCH} DisplayScaling\n */\n\n/**\n * A canvas that can scale and stretch with respect to the aspect ratio to fill\n * the viewport size.\n *\n * To start drawing, you should get the canvas context like so:\n *\n * For Canvas2D:\n * ```\n * const display = document.querySelector('display-port');\n * const ctx = display.canvas.getContext('2d');\n * ctx.drawText(0, 0, 'Hello World!');\n * ```\n *\n * For WebGL:\n * ```\n * const display = document.querySelector('display-port');\n * const gl = display.canvas.getContext('webgl');\n * gl.clear(gl.COLOR_BUFFER_BIT);\n * ```\n *\n * Usually, you would want to set the `width` and `height` attributes to define\n * the canvas size and aspect ratio in pixels. You can also change the scaling\n * behavior by setting the `mode` attribute.\n *\n * And for convenience, this element also dispatches a `frame` event every animation\n * frame (60 fps). This is basically the same as calling `requestAnimationFrame()`.\n *\n * NOTE: The viewport size is usually the parent container size. However, in the\n * rare case the element must be nested in a child container, you can define the\n * boolean attribute `full` to force the dimensions to be the actual window size.\n */\nexport class DisplayPort extends HTMLElement {\n\n  /**\n   * @param {object} [opts]\n   * @param {HTMLElement} [opts.root]\n   * @param {string} [opts.id]\n   * @param {DisplayScaling} [opts.mode]\n   * @param {number} [opts.width]\n   * @param {number} [opts.height]\n   * @param {boolean} [opts.debug]\n   */\n  static create(opts = {}) {\n    const {\n      root = document.body,\n      id = undefined,\n      mode = DEFAULT_MODE,\n      width = DEFAULT_WIDTH,\n      height = DEFAULT_HEIGHT,\n      debug = false\n    } = opts || {};\n    let result = new DisplayPort();\n    result.id = id;\n    result.mode = mode;\n    result.width = width;\n    result.height = height;\n    result.debug = debug;\n    root.appendChild(result);\n    return result;\n  }\n\n  static define(customElements = window.customElements) {\n    customElements.define('display-port', this);\n  }\n\n  /** @private */\n  static get [Symbol.for('templateNode')]() {\n    let t = document.createElement('template');\n    t.innerHTML = INNER_HTML;\n    Object.defineProperty(this, Symbol.for('templateNode'), { value: t });\n    return t;\n  }\n\n  /** @private */\n  static get [Symbol.for('styleNode')]() {\n    let t = document.createElement('style');\n    t.innerHTML = INNER_STYLE;\n    Object.defineProperty(this, Symbol.for('styleNode'), { value: t });\n    return t;\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  static get observedAttributes() {\n    return [\n      'debug',\n      'disabled',\n      // 'mode',\n      'width',\n      'height',\n      'onframe',\n      // Built-in attributes\n      'id',\n      'class',\n    ];\n  }\n\n  /**\n   * The scaling mode.\n   * - `noscale`: Do not perform scaling.\n   * - `center`: Do not perform scaling but stretch the display to fill the entire\n   * viewport. The unscaled canvas is centered.\n   * - `fit`: Resize resolution to fill the entire viewport and maintains the aspect\n   * ratio. The pixel resolution is changed. This is the default behavior.\n   * - `fill`: Resize resolution to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `stretch`: Perform scaling to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `scale`: Perform scaling to fill the entire viewport and maintains the\n   * aspect ratio and resolution. The pixel resolution remains constant.\n   * @returns {DisplayScaling} The current scaling mode.\n   */\n  get mode() {\n    return /** @type {DisplayScaling} */ (this.getAttribute('mode'));\n  }\n\n  set mode(value) {\n    this.setAttribute('mode', value);\n  }\n\n  /**\n   * Set to true for debug information.\n   * @returns {boolean}\n   */\n  get debug() {\n    return this._debug;\n  }\n\n  set debug(value) {\n    this.toggleAttribute('debug', value);\n  }\n\n  /**\n   * If disabled, animation frames will not fire.\n   * @returns {boolean}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  /**\n   * The canvas width in pixels. This determines the aspect ratio and canvas buffer size.\n   * @returns {number}\n   */\n  get width() {\n    return this._width;\n  }\n\n  set width(value) {\n    this.setAttribute('width', String(value));\n  }\n\n  /**\n   * The canvas height in pixels. This determines the aspect ratio and canvas buffer size.\n   */\n  get height() {\n    return this._height;\n  }\n\n  set height(value) {\n    this.setAttribute('height', String(value));\n  }\n\n  /** Fired every animation frame. */\n  get onframe() {\n    return this._onframe;\n  }\n\n  set onframe(value) {\n    if (this._onframe) this.removeEventListener('frame', this._onframe);\n    this._onframe = value;\n    if (this._onframe) this.addEventListener('frame', value);\n  }\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('templateNode')].content.cloneNode(true)\n    );\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('styleNode')].cloneNode(true)\n    );\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this._canvasElement = null;\n    /**\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this._contentElement = shadowRoot.querySelector('.content');\n    /**\n     * @private\n     * @type {HTMLSlotElement}\n     */\n    this._innerElement = shadowRoot.querySelector('#inner');\n\n    /** @private */\n    this._titleElement = shadowRoot.querySelector('#title');\n    /** @private */\n    this._fpsElement = shadowRoot.querySelector('#fps');\n    /** @private */\n    this._dimensionElement = shadowRoot.querySelector('#dimension');\n\n    /** @private */\n    this._debug = false;\n    /** @private */\n    this._disabled = false;\n    /** @private */\n    this._width = DEFAULT_WIDTH;\n    /** @private */\n    this._height = DEFAULT_HEIGHT;\n    /** @private */\n    this._onframe = undefined;\n\n    /** @private */\n    this._animationRequestHandle = 0;\n    /** @private */\n    this._prevAnimationFrameTime = 0;\n\n    /** @private */\n    this._resizeTimeoutHandle = 0;\n    /** @private */\n    this._resizeCanvasWidth = 0;\n    /** @private */\n    this._resizeCanvasHeight = 0;\n\n    /** @private */\n    this._frameEvent = new CustomEvent('frame', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        now: 0,\n        prevTime: 0,\n        deltaTime: 0,\n        canvas: this._canvasElement,\n      },\n    });\n    /** @private */\n    this._resizeEvent = new CustomEvent('resize', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        width: 0,\n        height: 0,\n      },\n    });\n\n    /** @private */\n    this.update = this.update.bind(this);\n\n    /** @private */\n    this.onDelayCanvasResize = this.onDelayCanvasResize.bind(this);\n\n    /** @private */\n    this.onSlotChange = this.onSlotChange.bind(this);\n  }\n\n  /** Get the canvas element. */\n  get canvas() {\n    return this._canvasElement;\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  connectedCallback() {\n    upgradeProperty(this, 'mode');\n    upgradeProperty(this, 'debug');\n    upgradeProperty(this, 'disabled');\n    upgradeProperty(this, 'width');\n    upgradeProperty(this, 'height');\n    upgradeProperty(this, 'onframe');\n\n    if (!this.hasAttribute('mode')) {\n      this.setAttribute('mode', DEFAULT_MODE);\n    }\n\n    // Allows this element to be focusable\n    if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', '0');\n    }\n\n    this._innerElement.addEventListener('slotchange', this.onSlotChange);\n    this._canvasElement = this._innerElement.querySelector('canvas');\n    if (this._canvasElement) {\n      this.updateCanvasSize(true);\n      this.resume();\n    }\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  disconnectedCallback() {\n    this._innerElement.removeEventListener('slotchange', this.onSlotChange);\n    this.pause();\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  attributeChangedCallback(attribute, prev, value) {\n    switch (attribute) {\n      case 'debug':\n        {\n          this._debug = value !== null;\n        }\n        break;\n      case 'disabled':\n        {\n          this._disabled = value !== null;\n        }\n        break;\n      case 'width':\n        {\n          this._width = Number(value);\n        }\n        break;\n      case 'height':\n        {\n          this._height = Number(value);\n        }\n        break;\n      case 'onframe':\n        {\n          this.onframe = new Function(\n            'event',\n            'with(document){with(this){' + value + '}}'\n          ).bind(this);\n        }\n        break;\n    }\n\n    switch (attribute) {\n      case 'disabled':\n        if (value) {\n          this.update(0);\n          this.pause();\n        } else {\n          this.resume();\n        }\n        break;\n      // NOTE: For debugging purposes...\n      case 'id':\n      case 'class':\n        this._titleElement.innerHTML = `display-port${\n          this.className ? '.' + this.className : ''\n        }${this.hasAttribute('id') ? '#' + this.getAttribute('id') : ''}`;\n        break;\n      case 'debug':\n        this._titleElement.classList.toggle('hidden', value);\n        this._fpsElement.classList.toggle('hidden', value);\n        this._dimensionElement.classList.toggle('hidden', value);\n        break;\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} e \n   */\n  onSlotChange(e) {\n    const slot = /** @type {HTMLSlotElement} */ (e.target);\n    let children = slot.assignedElements({ flatten: true });\n    let canvas = /** @type {HTMLCanvasElement} */ (children.find(el => el instanceof HTMLCanvasElement));\n    if (!canvas) {\n      throw new Error('No valid canvas element found for display.');\n    }\n    this._canvasElement = canvas;\n    this.updateCanvasSize(true);\n    this.resume();\n  }\n\n  /**\n   * @param {'2d'|'webgl'|'webgl2'} [contextId]\n   * @param {CanvasRenderingContext2DSettings} [options]\n   */\n  getContext(contextId = '2d', options = undefined) {\n    return this._canvasElement.getContext(contextId, options);\n  }\n\n  /** Pause animation of the display frames. */\n  pause() {\n    window.cancelAnimationFrame(this._animationRequestHandle);\n  }\n\n  /** Resume animation of the display frames. */\n  resume() {\n    this._animationRequestHandle = window.requestAnimationFrame(this.update);\n  }\n\n  /** @private */\n  update(now) {\n    this._animationRequestHandle = window.requestAnimationFrame(this.update);\n    this.updateCanvasSize(false);\n    const deltaTime = now - this._prevAnimationFrameTime;\n    this._prevAnimationFrameTime = now;\n\n    // NOTE: For debugging purposes...\n    if (this._debug) {\n      // Update FPS...\n      const frames =\n        deltaTime <= 0\n          ? '--'\n          : String(Math.round(1000 / deltaTime)).padStart(2, '0');\n      if (this._fpsElement.textContent !== frames) {\n        this._fpsElement.textContent = frames;\n      }\n\n      // Update dimensions...\n      const mode = this.mode;\n      if (mode === MODE_NOSCALE) {\n        let result = `${this._width}x${this._height}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      } else {\n        let result = `${this._width}x${this._height}|${this.shadowRoot.host.clientWidth}x${this.shadowRoot.host.clientHeight}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      }\n    }\n\n    let event = this._frameEvent;\n    let detail = event.detail;\n    detail.now = now;\n    detail.prevTime = this._prevAnimationFrameTime;\n    detail.deltaTime = deltaTime;\n    this.dispatchEvent(this._frameEvent);\n  }\n\n  /** @private */\n  onDelayCanvasResize() {\n    this._resizeTimeoutHandle = null;\n    this.updateCanvasSize(true);\n  }\n\n  delayCanvasResize(canvasWidth, canvasHeight) {\n    if (\n      canvasWidth !== this._resizeCanvasWidth ||\n      canvasHeight !== this._resizeCanvasHeight\n    ) {\n      // Only call onDelayCanvasResize, if new canvas size actually changed since last time.\n      this._resizeCanvasWidth = canvasWidth;\n      this._resizeCanvasHeight = canvasHeight;\n      if (this._resizeTimeoutHandle) {\n        window.clearTimeout(this._resizeTimeoutHandle);\n      }\n      this._resizeTimeoutHandle = window.setTimeout(\n        this.onDelayCanvasResize,\n        DELAYED_RESIZE_MILLIS\n      );\n    }\n  }\n\n  /** @private */\n  updateCanvasSize(force = true) {\n    const clientRect = this.shadowRoot.host.getBoundingClientRect();\n    const clientWidth = clientRect.width;\n    const clientHeight = clientRect.height;\n\n    let canvas = this._canvasElement;\n    let canvasWidth = this._width;\n    let canvasHeight = this._height;\n\n    const mode = this.mode;\n    if (mode === MODE_STRETCH || mode === MODE_FILL) {\n      canvasWidth = clientWidth;\n      canvasHeight = clientHeight;\n    } else if (mode !== MODE_NOSCALE) {\n      if (\n        clientWidth < canvasWidth ||\n        clientHeight < canvasHeight ||\n        mode === MODE_FIT ||\n        mode == MODE_SCALE\n      ) {\n        let ratioX = clientWidth / canvasWidth;\n        let ratioY = clientHeight / canvasHeight;\n\n        if (ratioX < ratioY) {\n          canvasWidth = clientWidth;\n          canvasHeight = canvasHeight * ratioX;\n        } else {\n          canvasWidth = canvasWidth * ratioY;\n          canvasHeight = clientHeight;\n        }\n      }\n    }\n\n    canvasWidth = Math.floor(canvasWidth);\n    canvasHeight = Math.floor(canvasHeight);\n\n    if (typeof force === 'undefined') {\n      force =\n        canvas.clientWidth !== canvasWidth ||\n        canvas.clientHeight !== canvasHeight;\n    }\n\n    if (!force) {\n      this.delayCanvasResize(canvasWidth, canvasHeight);\n      return;\n    }\n\n    let fontSize =\n      Math.min(canvasWidth / this._width, canvasHeight / this._height) * 0.5;\n    // NOTE: Update the inner container for the default slotted children.\n    // To anchor children outside the canvas, use the slot named 'frame'.\n    this._innerElement.style.fontSize = `font-size: ${fontSize}em`;\n    if (force) {\n      if (mode === MODE_SCALE) {\n        canvas.width = this._width;\n        canvas.height = this._height;\n      } else if (mode !== MODE_STRETCH) {\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n      }\n      let contentStyle = this._contentElement.style;\n      contentStyle.width = `${canvasWidth}px`;\n      contentStyle.height = `${canvasHeight}px`;\n\n      if (mode === MODE_FIT || mode === MODE_FILL) {\n        this._width = canvasWidth;\n        this._height = canvasHeight;\n      }\n\n      let event = this._resizeEvent;\n      let detail = event.detail;\n      detail.width = canvasWidth;\n      detail.height = canvasHeight;\n      this.dispatchEvent(this._resizeEvent);\n    }\n  }\n}\n\nfunction upgradeProperty(element, propertyName) {\n  if (Object.prototype.hasOwnProperty.call(element, propertyName)) {\n    let value = element[propertyName];\n    delete element[propertyName];\n    element[propertyName] = value;\n  }\n}\n","const INNER_HTML = /* html */`<div class=\"container\">\n  <div class=\"padding\"></div>\n  <div class=\"innerContainer\">\n    <div class=\"padding\"></div>\n    <slot><canvas>Oh no! Your browser does not support canvas.</canvas></slot>\n    <div class=\"padding\"></div>\n  </div>\n  <div class=\"padding\"></div>\n</div>`;\n\nconst INNER_STYLE = /* css */`\n:host {\n  display: inline-block;\n  flex: 1;\n  --width: 300px;\n  --height: 150px;\n}\n:host([scaling=\"noscale\"]) {\n  width: var(--width);\n  height: var(--height);\n}\n:host([sizing=\"viewport\"]) {\n    position: fixed;\n    top: 0;\n    left: 0;\n}\n.container {\n  position: relative;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n.innerContainer {\n  display: flex;\n  flex-direction: column;\n}\n.padding {\n  flex: 1;\n}`;\n\n/**\n * No scaling is applied. The canvas size maintains a\n * 1:1 pixel ratio to the defined display dimensions.\n */\nconst SCALING_NOSCALE = 'noscale';\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio. This will adjust\n * canvas resolution to fit the viewport dimensions.\n * In other words, the canvas pixel size remains\n * constant, but the number of pixels in the canvas\n * will increase or decrease to compensate. This is\n * the default scaling mode.\n */\nconst SCALING_FIT = 'fit';\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio and pixel\n * resolution. This will upscale and downscale the\n * pixel size depending on the viewport dimentions\n * in order to preserve the canvas pixel count. In\n * other words, the number of pixels in the canvas\n * remain constant but appear larger or smaller to\n * compensate.\n */\nconst SCALING_SCALE = 'scale';\n/**\n * Resizes the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio nor pixel\n * count (adds and removes pixels to fill size). If you\n * care about aspect ratio but not pixel count, consider\n * using 'fit' mode instead.\n */\nconst SCALING_FILL = 'fill';\n/**\n * Scales the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio but\n * does preserve pixel count (by stretching the pixel\n * size). If you care about aspect ratio and pixel\n * count, consider using 'scale' mode instead.\n */\nconst SCALING_STRETCH = 'stretch';\n\n/**\n * Sizes the canvas width and height.\n */\nconst SIZING_NONE = 'none';\n/**\n * Sizes to 100% of parent container.\n */\nconst SIZING_CONTAINER = 'conatiner';\n/**\n * Sizes to 100% of viewport.\n */\nconst SIZING_VIEWPORT = 'viewport';\n\n/**\n * The default display x dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_WIDTH = 300;\n/**\n * The default display y dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_HEIGHT = 150;\n\n/**\n * @typedef {SIZING_NONE|SIZING_CONTAINER|SIZING_VIEWPORT|string} SizingMode\n */\n\n/**\n * @typedef {SCALING_NOSCALE|SCALING_SCALE|SCALING_FILL|SCALING_FIT|SCALING_STRETCH} ScalingMode\n */\n\n/**\n * A canvas wrapper to scale and stretch with respect to the aspect ratio to fill the viewport or container.\n */\nexport class FlexCanvas extends HTMLElement {\n\n    /**\n     * @param {object} [opts]\n     * @param {HTMLElement} [opts.root]\n     * @param {string} [opts.id]\n     * @param {ScalingMode} [opts.scaling]\n     * @param {SizingMode} [opts.sizing]\n     * @param {number} [opts.width]\n     * @param {number} [opts.height]\n     */\n    static create(opts = {}) {\n        const {\n            root = document.body,\n            id = undefined,\n            scaling = SCALING_SCALE,\n            sizing = SIZING_CONTAINER,\n            width = DEFAULT_WIDTH,\n            height = DEFAULT_HEIGHT,\n        } = opts || {};\n        let result = new FlexCanvas();\n        result.id = id;\n        result.scaling = scaling;\n        result.sizing = sizing;\n        result.width = width;\n        result.height = height;\n        root.appendChild(result);\n        return result;\n    }\n\n    static define(tagName = 'flex-canvas', customElements = window.customElements) {\n        customElements.define(tagName, this);\n    }\n\n    /** @private */\n    static get [Symbol.for('templateNode')]() {\n        let t = document.createElement('template');\n        t.innerHTML = INNER_HTML;\n        Object.defineProperty(this, Symbol.for('templateNode'), { value: t });\n        return t;\n    }\n\n    /** @private */\n    static get [Symbol.for('styleNode')]() {\n        let t = document.createElement('style');\n        t.innerHTML = INNER_STYLE;\n        Object.defineProperty(this, Symbol.for('styleNode'), { value: t });\n        return t;\n    }\n\n    /**\n     * @protected\n     * Override for web component.\n     */\n    static get observedAttributes() {\n        return [\n            'sizing',\n            'width',\n            'height',\n            'resize-delay',\n        ];\n    }\n\n    /**\n     * The scaling mode.\n     * - `noscale`: Do not perform scaling.\n     * - `fit`: Resize resolution to fill the entire viewport and maintains the aspect\n     * ratio. The pixel resolution is changed. This is the default behavior.\n     * - `fill`: Resize resolution to fill the entire viewport but does not maintain\n     * aspect ratio.\n     * - `stretch`: Perform scaling to fill the entire viewport but does not maintain\n     * aspect ratio.\n     * - `scale`: Perform scaling to fill the entire viewport and maintains the\n     * aspect ratio and resolution. The pixel resolution remains constant.\n     */\n    get scaling() {\n        return /** @type {ScalingMode} */ (this.getAttribute('scaling'));\n    }\n\n    set scaling(value) {\n        this.setAttribute('scaling', value);\n    }\n\n    /**\n     * The sizing mode.\n     * - `none`: Sizes to canvas.\n     * - `container`: Sizes to 100% of parent container.\n     * - `viewport`: Sizes to 100% of viewport.\n     */\n    get sizing() {\n        return /** @type {SizingMode} */ (this._sizing);\n    }\n\n    set sizing(value) {\n        this.setAttribute('sizing', String(value));\n    }\n\n    /**\n     * @returns {number}\n     */\n    get resizeDelay() {\n        return this._resizeDelay;\n    }\n\n    set resizeDelay(value) {\n        this.setAttribute('resize-delay', String(value));\n    }\n\n    /**\n     * The canvas width in pixels. This determines the aspect ratio and canvas buffer size.\n     * @returns {number}\n     */\n    get width() {\n        return this._width;\n    }\n\n    set width(value) {\n        this.setAttribute('width', String(value));\n    }\n\n    /**\n     * The canvas height in pixels. This determines the aspect ratio and canvas buffer size.\n     */\n    get height() {\n        return this._height;\n    }\n\n    set height(value) {\n        this.setAttribute('height', String(value));\n    }\n\n    constructor() {\n        super();\n        const shadowRoot = this.attachShadow({ mode: 'open' });\n        shadowRoot.appendChild(this.constructor[Symbol.for('templateNode')].content.cloneNode(true));\n        shadowRoot.appendChild(this.constructor[Symbol.for('styleNode')].cloneNode(true));\n\n        /** @private */\n        this._sizing = 'none';\n        /** @private */\n        this._width = DEFAULT_WIDTH;\n        /** @private */\n        this._height = DEFAULT_HEIGHT;\n        /** @private */\n        this._resizeDelay = 0;\n\n        /** @private */\n        this.animationFrameHandle = 0;\n\n        /** @private */\n        this.resizeTimeoutHandle = 0;\n        /** @private */\n        this.resizeCanvasWidth = 0;\n        /** @private */\n        this.resizeCanvasHeight = 0;\n\n        /** @private */\n        this.canvasSlotElement = shadowRoot.querySelector('slot');\n        /** @private */\n        this.canvasElement = null;\n\n        /** @private */\n        this.onResize = this.onResize.bind(this);\n        /** @private */\n        this.onAnimationFrame = this.onAnimationFrame.bind(this);\n        /** @private */\n        this.onSlotChange = this.onSlotChange.bind(this);\n    }\n\n    /**\n     * @protected\n     * Override for web component.\n     */\n    connectedCallback() {\n        upgradeProperty(this, 'scaling');\n        upgradeProperty(this, 'sizing');\n        upgradeProperty(this, 'width');\n        upgradeProperty(this, 'height');\n        upgradeProperty(this, 'resize-delay');\n\n        // Scaling mode\n        if (!this.hasAttribute('scaling')) {\n            this.setAttribute('scaling', SCALING_SCALE);\n        }\n\n        // Allows this element to be focusable\n        if (!this.hasAttribute('tabindex')) {\n            this.setAttribute('tabindex', '0');\n        }\n\n        this.animationFrameHandle = requestAnimationFrame(this.onAnimationFrame);\n        this.canvasSlotElement.addEventListener('slotchange', this.onSlotChange);\n        if (!this.canvasElement) {\n            this.canvasElement = this.canvasSlotElement.querySelector('canvas');\n        }\n    }\n\n    /**\n     * @protected\n     * Override for web component.\n     */\n    disconnectedCallback() {\n        cancelAnimationFrame(this.animationFrameHandle);\n        this.animationFrameHandle = null;\n        this.canvasSlotElement.removeEventListener('slotchange', this.onSlotChange);\n    }\n\n    /**\n     * @protected\n     * Override for web component.\n     */\n    attributeChangedCallback(attribute, prev, value) {\n        switch (attribute) {\n            case 'sizing':\n                {\n                    this._sizing = String(value);\n                    switch (this._sizing) {\n                        case 'none':\n                            this.style.removeProperty('width');\n                            this.style.removeProperty('height');\n                            break;\n                        case 'container':\n                            this.style.setProperty('width', '100%');\n                            this.style.setProperty('height', '100%');\n                            break;\n                        case 'viewport':\n                            this.style.setProperty('width', '100vw');\n                            this.style.setProperty('height', '100vh');\n                            break;\n                        default:\n                            let [x, y] = this._sizing.split(' ');\n                            if (x && y) {\n                                this.style.setProperty('width', x);\n                                this.style.setProperty('height', y);\n                            }\n                            break;\n                    }\n                }\n                break;\n            case 'width':\n                this._width = Number(value);\n                break;\n            case 'height':\n                this._height = Number(value);\n                break;\n            case 'resize-delay':\n                this._resizeDelay = Number(value);\n                break;\n        }\n    }\n\n    /**\n     * @private\n     * @param {number} now \n     */\n    onAnimationFrame(now) {\n        this.animationFrameHandle = requestAnimationFrame(this.onAnimationFrame);\n\n        if (this.clientWidth === this.resizeCanvasWidth && this.clientHeight === this.resizeCanvasHeight) {\n            // Only call onDebounceResize() if new canvas size actually changed since last time.\n            return;\n        }\n\n        this.resizeCanvasWidth = this.clientWidth;\n        this.resizeCanvasHeight = this.clientHeight;\n\n        if (this._resizeDelay > 0) {\n            if (!this.resizeTimeoutHandle) {\n                this.resizeTimeoutHandle = window.setTimeout(this.onResize, this._resizeDelay);\n            }\n        } else {\n            this.onResize();\n        }\n    }\n\n    /** @private */\n    onResize() {\n        window.clearTimeout(this.resizeTimeoutHandle);\n        this.resizeTimeoutHandle = null;\n\n        const canvas = this.canvasElement;\n        if (!canvas) {\n            return;\n        }\n\n        const scaling = this.scaling;\n        const clientRect = this.getBoundingClientRect();\n        const clientWidth = clientRect.width;\n        const clientHeight = clientRect.height;\n\n        let canvasWidth = this._width;\n        let canvasHeight = this._height;\n        let ratioX = clientWidth / canvasWidth;\n        let ratioY = clientHeight / canvasHeight;\n\n        // noscale\n        if (scaling === 'noscale') {\n            // Do nothing :)\n        }\n\n        // scale\n        if (scaling === 'scale') {\n            if (ratioX < ratioY) {\n                canvas.style.setProperty('width', `${Math.floor(clientWidth)}px`);\n                canvas.style.setProperty('height', `${Math.floor(canvasHeight * ratioX)}px`);\n            } else {\n                canvas.style.setProperty('width', `${Math.floor(canvasWidth * ratioY)}px`);\n                canvas.style.setProperty('height', `${Math.floor(clientHeight)}px`);\n            }\n        }\n\n        // stretch\n        if (scaling === 'stretch') {\n            canvas.style.setProperty('width', `${Math.floor(clientWidth)}px`);\n            canvas.style.setProperty('height', `${Math.floor(clientHeight)}px`);\n        }\n\n        // fit\n        if (scaling === 'fit') {\n            if (ratioX < ratioY) {\n                canvasWidth = Math.floor(clientWidth);\n                canvasHeight = Math.floor(canvasHeight * ratioX);\n                canvas.style.setProperty('width', `${canvasWidth}px`);\n                canvas.style.setProperty('height', `${canvasHeight}px`);\n            } else {\n                canvasWidth = Math.floor(canvasWidth * ratioY);\n                canvasHeight = Math.floor(clientHeight);\n                canvas.style.setProperty('width', `${canvasWidth}px`);\n                canvas.style.setProperty('height', `${canvasHeight}px`);\n            }\n        }\n\n        // fill\n        if (scaling === 'fill') {\n            if (ratioX < ratioY) {\n                canvasWidth = Math.floor(clientWidth);\n                canvasHeight = Math.floor(clientHeight);\n                canvas.style.setProperty('width', `${canvasWidth}px`);\n                canvas.style.setProperty('height', `${canvasHeight}px`);\n            } else {\n                canvasWidth = Math.floor(clientWidth);\n                canvasHeight = Math.floor(clientHeight);\n                canvas.style.setProperty('width', `${canvasWidth}px`);\n                canvas.style.setProperty('height', `${canvasHeight}px`);\n            }\n        }\n\n        if (canvas.width !== canvasWidth) {\n            canvas.width = canvasWidth;\n            this.style.setProperty('--width', `${canvasWidth}px`);\n        }\n        if (canvas.height !== canvasHeight) {\n            canvas.height = canvasHeight;\n            this.style.setProperty('--height', `${canvasHeight}px`);\n        }\n    }\n\n    /**\n     * @private\n     * @param {Event} e \n     */\n    onSlotChange(e) {\n        const slot = /** @type {HTMLSlotElement} */ (e.target);\n        let children = slot.assignedElements({ flatten: true });\n        let canvas = /** @type {HTMLCanvasElement} */ (children.find(el => el instanceof HTMLCanvasElement));\n        if (canvas) {\n            this.canvasElement = canvas;\n        }\n    }\n\n    /**\n     * @param {'2d'|'webgl'|'webgl2'} [contextId]\n     * @param {CanvasRenderingContext2DSettings} [options]\n     */\n    getContext(contextId = '2d', options = undefined) {\n        return this.canvasElement.getContext(contextId, options);\n    }\n}\n\nfunction upgradeProperty(element, propertyName) {\n    if (Object.prototype.hasOwnProperty.call(element, propertyName)) {\n        let value = element[propertyName];\n        delete element[propertyName];\n        element[propertyName] = value;\n    }\n}\n"],"names":["MODE_NOSCALE","MODE_FIT","MODE_SCALE","MODE_FILL","MODE_STRETCH","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_MODE","DisplayPort","HTMLElement","static","opts","root","document","body","id","mode","width","height","debug","result","appendChild","customElements","window","define","this","Symbol","for","t","createElement","innerHTML","Object","defineProperty","value","observedAttributes","getAttribute","setAttribute","_debug","toggleAttribute","disabled","_disabled","_width","String","_height","onframe","_onframe","removeEventListener","addEventListener","constructor","super","shadowRoot","attachShadow","content","cloneNode","_canvasElement","_contentElement","querySelector","_innerElement","_titleElement","_fpsElement","_dimensionElement","undefined","_animationRequestHandle","_prevAnimationFrameTime","_resizeTimeoutHandle","_resizeCanvasWidth","_resizeCanvasHeight","_frameEvent","CustomEvent","composed","bubbles","detail","now","prevTime","deltaTime","canvas","_resizeEvent","update","bind","onDelayCanvasResize","onSlotChange","connectedCallback","upgradeProperty","hasAttribute","updateCanvasSize","resume","disconnectedCallback","pause","attributeChangedCallback","attribute","prev","Number","Function","className","classList","toggle","e","assignedElements","flatten","find","el","HTMLCanvasElement","Error","getContext","contextId","options","cancelAnimationFrame","requestAnimationFrame","frames","Math","round","padStart","textContent","host","clientWidth","clientHeight","dispatchEvent","delayCanvasResize","canvasWidth","canvasHeight","clearTimeout","setTimeout","force","clientRect","getBoundingClientRect","ratioX","ratioY","floor","fontSize","min","style","contentStyle","element","propertyName","prototype","hasOwnProperty","call","SCALING_SCALE","SIZING_CONTAINER","FlexCanvas","scaling","sizing","tagName","resizeDelay","_resizeDelay","_sizing","animationFrameHandle","resizeTimeoutHandle","resizeCanvasWidth","resizeCanvasHeight","canvasSlotElement","canvasElement","onResize","onAnimationFrame","removeProperty","setProperty","x","y","split"],"mappings":"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"}