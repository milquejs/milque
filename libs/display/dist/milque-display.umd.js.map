{"version":3,"file":"milque-display.umd.js","sources":["../src/DisplayPort.js"],"sourcesContent":["import INNER_HTML from './DisplayPort.template.html';\nimport INNER_STYLE from './DisplayPort.module.css';\n\n/**\n * No scaling is applied. The canvas size maintains a\n * 1:1 pixel ratio to the defined display dimensions.\n */\nexport const MODE_NOSCALE = 'noscale';\n\n/**\n * No scaling is applied, but the element fills the\n * entire viewport. The canvas size maintains a 1:1\n * pixel ratio to the defined display dimensions and\n * is centered inside the scaled element.\n */\nexport const MODE_CENTER = 'center';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio. This will adjust\n * canvas resolution to fit the viewport dimensions.\n * In other words, the canvas pixel size remains\n * constant, but the number of pixels in the canvas\n * will increase or decrease to compensate. This is\n * the default scaling mode.\n */\nexport const MODE_FIT = 'fit';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio and pixel\n * resolution. This will upscale and downscale the\n * pixel size depending on the viewport dimentions\n * in order to preserve the canvas pixel count. In\n * other words, the number of pixels in the canvas\n * remain constant but appear larger or smaller to\n * compensate.\n */\nexport const MODE_SCALE = 'scale';\n\n/**\n * Resizes the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio nor pixel\n * count (adds and removes pixels to fill size). If you\n * care about aspect ratio but not pixel count, consider\n * using 'fit' mode instead.\n */\nexport const MODE_FILL = 'fill';\n\n/**\n * Scales the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio but\n * does preserve pixel count (by stretching the pixel\n * size). If you care about aspect ratio and pixel\n * count, consider using 'scale' mode instead.\n */\nexport const MODE_STRETCH = 'stretch';\n\n/**\n * The default display x dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_WIDTH = 300;\n/**\n * The default display y dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_HEIGHT = 150;\n\n/** The default display scaling mode. */\nconst DEFAULT_MODE = MODE_FIT;\n\n/** The default resize timeout */\nconst DELAYED_RESIZE_MILLIS = 200;\n\n/**\n * @typedef {CustomEvent} FrameEvent\n * @property {number} detail.now\n * The current time in milliseconds.\n * @property {number} detail.prevTime\n * The previous frame time in milliseconds.\n * @property {number} detail.deltaTime\n * The time taken between the current and previous\n * frame in milliseconds.\n * @property {HTMLCanvasElement} detail.canvas\n * The canvas element.\n */\n\n/**\n * @typedef {MODE_CENTER\n *          |MODE_FIT\n *          |MODE_NOSCALE\n *          |MODE_SCALE\n *          |MODE_FILL\n *          |MODE_STRETCH} DisplayScaling\n */\n\n/**\n * A canvas that can scale and stretch with respect to the aspect ratio to fill\n * the viewport size.\n *\n * To start drawing, you should get the canvas context like so:\n *\n * For Canvas2D:\n * ```\n * const display = document.querySelector('display-port');\n * const ctx = display.canvas.getContext('2d');\n * ctx.drawText(0, 0, 'Hello World!');\n * ```\n *\n * For WebGL:\n * ```\n * const display = document.querySelector('display-port');\n * const gl = display.canvas.getContext('webgl');\n * gl.clear(gl.COLOR_BUFFER_BIT);\n * ```\n *\n * Usually, you would want to set the `width` and `height` attributes to define\n * the canvas size and aspect ratio in pixels. You can also change the scaling\n * behavior by setting the `mode` attribute.\n *\n * And for convenience, this element also dispatches a `frame` event every animation\n * frame (60 fps). This is basically the same as calling `requestAnimationFrame()`.\n *\n * NOTE: The viewport size is usually the parent container size. However, in the\n * rare case the element must be nested in a child container, you can define the\n * boolean attribute `full` to force the dimensions to be the actual window size.\n */\nexport class DisplayPort extends HTMLElement {\n  /** @private */\n  static get [Symbol.for('templateNode')]() {\n    let t = document.createElement('template');\n    t.innerHTML = INNER_HTML;\n    Object.defineProperty(this, Symbol.for('templateNode'), { value: t });\n    return t;\n  }\n\n  /** @private */\n  static get [Symbol.for('styleNode')]() {\n    let t = document.createElement('style');\n    t.innerHTML = INNER_STYLE;\n    Object.defineProperty(this, Symbol.for('styleNode'), { value: t });\n    return t;\n  }\n\n  static define(customElements = window.customElements) {\n    customElements.define('display-port', this);\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  static get observedAttributes() {\n    return [\n      'debug',\n      'disabled',\n      // 'mode',\n      'width',\n      'height',\n      'onframe',\n      // Built-in attributes\n      'id',\n      'class',\n    ];\n  }\n\n  /**\n   * The scaling mode.\n   * - `noscale`: Do not perform scaling.\n   * - `center`: Do not perform scaling but stretch the display to fill the entire\n   * viewport. The unscaled canvas is centered.\n   * - `fit`: Resize resolution to fill the entire viewport and maintains the aspect\n   * ratio. The pixel resolution is changed. This is the default behavior.\n   * - `fill`: Resize resolution to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `stretch`: Perform scaling to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `scale`: Perform scaling to fill the entire viewport and maintains the\n   * aspect ratio and resolution. The pixel resolution remains constant.\n   * @returns {DisplayScaling} The current scaling mode.\n   */\n  get mode() {\n    return /** @type {DisplayScaling} */ (this.getAttribute('mode'));\n  }\n\n  set mode(value) {\n    this.setAttribute('mode', value);\n  }\n\n  /**\n   * Set to true for debug information.\n   * @returns {boolean}\n   */\n  get debug() {\n    return this._debug;\n  }\n\n  set debug(value) {\n    this.toggleAttribute('debug', value);\n  }\n\n  /**\n   * If disabled, animation frames will not fire.\n   * @returns {boolean}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  /**\n   * The canvas width in pixels. This determines the aspect ratio and canvas buffer size.\n   * @returns {number}\n   */\n  get width() {\n    return this._width;\n  }\n\n  set width(value) {\n    this.setAttribute('width', String(value));\n  }\n\n  /**\n   * The canvas height in pixels. This determines the aspect ratio and canvas buffer size.\n   */\n  get height() {\n    return this._height;\n  }\n\n  set height(value) {\n    this.setAttribute('height', String(value));\n  }\n\n  /** Fired every animation frame. */\n  get onframe() {\n    return this._onframe;\n  }\n\n  set onframe(value) {\n    if (this._onframe) this.removeEventListener('frame', this._onframe);\n    this._onframe = value;\n    if (this._onframe) this.addEventListener('frame', value);\n  }\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('templateNode')].content.cloneNode(true)\n    );\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('styleNode')].cloneNode(true)\n    );\n\n    /** @private */\n    this._canvasElement = shadowRoot.querySelector('canvas');\n    /**\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this._contentElement = shadowRoot.querySelector('.content');\n    /**\n     * @private\n     * @type {HTMLSlotElement}\n     */\n    this._innerElement = shadowRoot.querySelector('#inner');\n\n    /** @private */\n    this._titleElement = shadowRoot.querySelector('#title');\n    /** @private */\n    this._fpsElement = shadowRoot.querySelector('#fps');\n    /** @private */\n    this._dimensionElement = shadowRoot.querySelector('#dimension');\n\n    /** @private */\n    this._debug = false;\n    /** @private */\n    this._disabled = false;\n    /** @private */\n    this._width = DEFAULT_WIDTH;\n    /** @private */\n    this._height = DEFAULT_HEIGHT;\n    /** @private */\n    this._onframe = undefined;\n\n    /** @private */\n    this._animationRequestHandle = 0;\n    /** @private */\n    this._prevAnimationFrameTime = 0;\n\n    /** @private */\n    this._resizeTimeoutHandle = 0;\n    /** @private */\n    this._resizeCanvasWidth = 0;\n    /** @private */\n    this._resizeCanvasHeight = 0;\n\n    /** @private */\n    this._frameEvent = new CustomEvent('frame', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        now: 0,\n        prevTime: 0,\n        deltaTime: 0,\n        canvas: this._canvasElement,\n      },\n    });\n    /** @private */\n    this._resizeEvent = new CustomEvent('resize', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        width: 0,\n        height: 0,\n      },\n    });\n\n    /** @private */\n    this.update = this.update.bind(this);\n    /** @private */\n    this.onDelayCanvasResize = this.onDelayCanvasResize.bind(this);\n  }\n\n  /** Get the canvas element. */\n  get canvas() {\n    return this._canvasElement;\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  connectedCallback() {\n    upgradeProperty(this, 'mode');\n    upgradeProperty(this, 'debug');\n    upgradeProperty(this, 'disabled');\n    upgradeProperty(this, 'width');\n    upgradeProperty(this, 'height');\n    upgradeProperty(this, 'onframe');\n\n    if (!this.hasAttribute('mode')) {\n      this.setAttribute('mode', DEFAULT_MODE);\n    }\n\n    // Allows this element to be focusable\n    if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', '0');\n    }\n\n    this.updateCanvasSize(true);\n    this.resume();\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  disconnectedCallback() {\n    this.pause();\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  attributeChangedCallback(attribute, prev, value) {\n    switch (attribute) {\n      case 'debug':\n        {\n          this._debug = value !== null;\n        }\n        break;\n      case 'disabled':\n        {\n          this._disabled = value !== null;\n        }\n        break;\n      case 'width':\n        {\n          this._width = Number(value);\n        }\n        break;\n      case 'height':\n        {\n          this._height = Number(value);\n        }\n        break;\n      case 'onframe':\n        {\n          this.onframe = new Function(\n            'event',\n            'with(document){with(this){' + value + '}}'\n          ).bind(this);\n        }\n        break;\n    }\n\n    switch (attribute) {\n      case 'disabled':\n        if (value) {\n          this.update(0);\n          this.pause();\n        } else {\n          this.resume();\n        }\n        break;\n      // NOTE: For debugging purposes...\n      case 'id':\n      case 'class':\n        this._titleElement.innerHTML = `display-port${\n          this.className ? '.' + this.className : ''\n        }${this.hasAttribute('id') ? '#' + this.getAttribute('id') : ''}`;\n        break;\n      case 'debug':\n        this._titleElement.classList.toggle('hidden', value);\n        this._fpsElement.classList.toggle('hidden', value);\n        this._dimensionElement.classList.toggle('hidden', value);\n        break;\n    }\n  }\n\n  /**\n   * @param {'2d'|'webgl'|'webgl2'} [contextId]\n   * @param {CanvasRenderingContext2DSettings} [options]\n   */\n  getContext(contextId = '2d', options = undefined) {\n    return this._canvasElement.getContext(contextId, options);\n  }\n\n  /** Pause animation of the display frames. */\n  pause() {\n    cancelAnimationFrame(this._animationRequestHandle);\n  }\n\n  /** Resume animation of the display frames. */\n  resume() {\n    this._animationRequestHandle = requestAnimationFrame(this.update);\n  }\n\n  /** @private */\n  update(now) {\n    this._animationRequestHandle = requestAnimationFrame(this.update);\n    this.updateCanvasSize(false);\n    const deltaTime = now - this._prevAnimationFrameTime;\n    this._prevAnimationFrameTime = now;\n\n    // NOTE: For debugging purposes...\n    if (this._debug) {\n      // Update FPS...\n      const frames =\n        deltaTime <= 0\n          ? '--'\n          : String(Math.round(1000 / deltaTime)).padStart(2, '0');\n      if (this._fpsElement.textContent !== frames) {\n        this._fpsElement.textContent = frames;\n      }\n\n      // Update dimensions...\n      const mode = this.mode;\n      if (mode === MODE_NOSCALE) {\n        let result = `${this._width}x${this._height}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      } else {\n        let result = `${this._width}x${this._height}|${this.shadowRoot.host.clientWidth}x${this.shadowRoot.host.clientHeight}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      }\n    }\n\n    let event = this._frameEvent;\n    let detail = event.detail;\n    detail.now = now;\n    detail.prevTime = this._prevAnimationFrameTime;\n    detail.deltaTime = deltaTime;\n    this.dispatchEvent(this._frameEvent);\n  }\n\n  /** @private */\n  onDelayCanvasResize() {\n    this._resizeTimeoutHandle = 0;\n    this.updateCanvasSize(true);\n  }\n\n  delayCanvasResize(canvasWidth, canvasHeight) {\n    if (\n      canvasWidth !== this._resizeCanvasWidth ||\n      canvasHeight !== this._resizeCanvasHeight\n    ) {\n      // Only call onDelayCanvasResize, if new canvas size actually changed since last time.\n      this._resizeCanvasWidth = canvasWidth;\n      this._resizeCanvasHeight = canvasHeight;\n      if (this._resizeTimeoutHandle) {\n        clearTimeout(this._resizeTimeoutHandle);\n      }\n      this._resizeTimeoutHandle = setTimeout(\n        this.onDelayCanvasResize,\n        DELAYED_RESIZE_MILLIS\n      );\n    }\n  }\n\n  /** @private */\n  updateCanvasSize(force = true) {\n    const clientRect = this.shadowRoot.host.getBoundingClientRect();\n    const clientWidth = clientRect.width;\n    const clientHeight = clientRect.height;\n\n    let canvas = this._canvasElement;\n    let canvasWidth = this._width;\n    let canvasHeight = this._height;\n\n    const mode = this.mode;\n    if (mode === MODE_STRETCH || mode === MODE_FILL) {\n      canvasWidth = clientWidth;\n      canvasHeight = clientHeight;\n    } else if (mode !== MODE_NOSCALE) {\n      if (\n        clientWidth < canvasWidth ||\n        clientHeight < canvasHeight ||\n        mode === MODE_FIT ||\n        mode == MODE_SCALE\n      ) {\n        let ratioX = clientWidth / canvasWidth;\n        let ratioY = clientHeight / canvasHeight;\n\n        if (ratioX < ratioY) {\n          canvasWidth = clientWidth;\n          canvasHeight = canvasHeight * ratioX;\n        } else {\n          canvasWidth = canvasWidth * ratioY;\n          canvasHeight = clientHeight;\n        }\n      }\n    }\n\n    canvasWidth = Math.floor(canvasWidth);\n    canvasHeight = Math.floor(canvasHeight);\n\n    if (typeof force === 'undefined') {\n      force =\n        canvas.clientWidth !== canvasWidth ||\n        canvas.clientHeight !== canvasHeight;\n    }\n\n    if (!force) {\n      this.delayCanvasResize(canvasWidth, canvasHeight);\n      return;\n    }\n\n    let fontSize =\n      Math.min(canvasWidth / this._width, canvasHeight / this._height) * 0.5;\n    // NOTE: Update the inner container for the default slotted children.\n    // To anchor children outside the canvas, use the slot named 'frame'.\n    this._innerElement.style.fontSize = `font-size: ${fontSize}em`;\n    if (force) {\n      if (mode === MODE_SCALE) {\n        canvas.width = this._width;\n        canvas.height = this._height;\n      } else if (mode !== MODE_STRETCH) {\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n      }\n      let contentStyle = this._contentElement.style;\n      contentStyle.width = `${canvasWidth}px`;\n      contentStyle.height = `${canvasHeight}px`;\n\n      if (mode === MODE_FIT || mode === MODE_FILL) {\n        this._width = canvasWidth;\n        this._height = canvasHeight;\n      }\n\n      let event = this._resizeEvent;\n      let detail = event.detail;\n      detail.width = canvasWidth;\n      detail.height = canvasHeight;\n      this.dispatchEvent(this._resizeEvent);\n    }\n  }\n}\nDisplayPort.define();\n\nfunction upgradeProperty(element, propertyName) {\n  if (Object.prototype.hasOwnProperty.call(element, propertyName)) {\n    let value = element[propertyName];\n    delete element[propertyName];\n    element[propertyName] = value;\n  }\n}\n"],"names":["MODE_NOSCALE","MODE_FIT","MODE_SCALE","MODE_FILL","MODE_STRETCH","DEFAULT_MODE","DisplayPort","HTMLElement","Symbol","for","t","document","createElement","innerHTML","Object","defineProperty","this","value","static","customElements","window","define","observedAttributes","mode","getAttribute","setAttribute","debug","_debug","toggleAttribute","disabled","_disabled","width","_width","String","height","_height","onframe","_onframe","removeEventListener","addEventListener","constructor","super","shadowRoot","attachShadow","appendChild","content","cloneNode","_canvasElement","querySelector","_contentElement","_innerElement","_titleElement","_fpsElement","_dimensionElement","undefined","_animationRequestHandle","_prevAnimationFrameTime","_resizeTimeoutHandle","_resizeCanvasWidth","_resizeCanvasHeight","_frameEvent","CustomEvent","composed","bubbles","detail","now","prevTime","deltaTime","canvas","_resizeEvent","update","bind","onDelayCanvasResize","connectedCallback","upgradeProperty","hasAttribute","updateCanvasSize","resume","disconnectedCallback","pause","attributeChangedCallback","attribute","prev","Number","Function","className","classList","toggle","getContext","contextId","options","cancelAnimationFrame","requestAnimationFrame","frames","Math","round","padStart","textContent","result","host","clientWidth","clientHeight","dispatchEvent","delayCanvasResize","canvasWidth","canvasHeight","clearTimeout","setTimeout","force","clientRect","getBoundingClientRect","ratioX","ratioY","floor","fontSize","min","style","contentStyle","element","propertyName","prototype","hasOwnProperty","call"],"mappings":"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"}