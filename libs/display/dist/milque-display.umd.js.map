{"version":3,"file":"milque-display.umd.js","sources":["../src/DisplayPort.js"],"sourcesContent":["import INNER_HTML from './DisplayPort.template.html';\nimport INNER_STYLE from './DisplayPort.module.css';\n\n/**\n * No scaling is applied. The canvas size maintains a\n * 1:1 pixel ratio to the defined display dimensions.\n */\nexport const MODE_NOSCALE = 'noscale';\n\n/**\n * No scaling is applied, but the element fills the\n * entire viewport. The canvas size maintains a 1:1\n * pixel ratio to the defined display dimensions and\n * is centered inside the scaled element.\n */\nexport const MODE_CENTER = 'center';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio. This will adjust\n * canvas resolution to fit the viewport dimensions.\n * In other words, the canvas pixel size remains\n * constant, but the number of pixels in the canvas\n * will increase or decrease to compensate. This is\n * the default scaling mode.\n */\nexport const MODE_FIT = 'fit';\n\n/**\n * Scales the canvas to fill the entire viewport and\n * maintains the same aspect ratio and pixel\n * resolution. This will upscale and downscale the\n * pixel size depending on the viewport dimentions\n * in order to preserve the canvas pixel count. In\n * other words, the number of pixels in the canvas\n * remain constant but appear larger or smaller to\n * compensate.\n */\nexport const MODE_SCALE = 'scale';\n\n/**\n * Resizes the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio nor pixel\n * count (adds and removes pixels to fill size). If you\n * care about aspect ratio but not pixel count, consider\n * using 'fit' mode instead.\n */\nexport const MODE_FILL = 'fill';\n\n/**\n * Scales the canvas to fill the entire viewport.\n * This does not maintain the aspect ratio but\n * does preserve pixel count (by stretching the pixel\n * size). If you care about aspect ratio and pixel\n * count, consider using 'scale' mode instead.\n */\nexport const MODE_STRETCH = 'stretch';\n\n/**\n * The default display x dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_WIDTH = 300;\n/**\n * The default display y dimensions. This is\n * the same as the canvas element default.\n */\nconst DEFAULT_HEIGHT = 150;\n\n/** The default display scaling mode. */\nconst DEFAULT_MODE = MODE_FIT;\n\n/** The default resize timeout */\nconst DELAYED_RESIZE_MILLIS = 200;\n\n/**\n * @typedef {CustomEvent} FrameEvent\n * @property {number} detail.now\n * The current time in milliseconds.\n * @property {number} detail.prevTime\n * The previous frame time in milliseconds.\n * @property {number} detail.deltaTime\n * The time taken between the current and previous\n * frame in milliseconds.\n * @property {HTMLCanvasElement} detail.canvas\n * The canvas element.\n */\n\n/**\n * @typedef {MODE_CENTER\n *          |MODE_FIT\n *          |MODE_NOSCALE\n *          |MODE_SCALE\n *          |MODE_FILL\n *          |MODE_STRETCH} DisplayScaling\n */\n\n/**\n * A canvas that can scale and stretch with respect to the aspect ratio to fill\n * the viewport size.\n *\n * To start drawing, you should get the canvas context like so:\n *\n * For Canvas2D:\n * ```\n * const display = document.querySelector('display-port');\n * const ctx = display.canvas.getContext('2d');\n * ctx.drawText(0, 0, 'Hello World!');\n * ```\n *\n * For WebGL:\n * ```\n * const display = document.querySelector('display-port');\n * const gl = display.canvas.getContext('webgl');\n * gl.clear(gl.COLOR_BUFFER_BIT);\n * ```\n *\n * Usually, you would want to set the `width` and `height` attributes to define\n * the canvas size and aspect ratio in pixels. You can also change the scaling\n * behavior by setting the `mode` attribute.\n *\n * And for convenience, this element also dispatches a `frame` event every animation\n * frame (60 fps). This is basically the same as calling `requestAnimationFrame()`.\n *\n * NOTE: The viewport size is usually the parent container size. However, in the\n * rare case the element must be nested in a child container, you can define the\n * boolean attribute `full` to force the dimensions to be the actual window size.\n */\nexport class DisplayPort extends HTMLElement {\n\n  /**\n   * @param {object} [opts]\n   * @param {HTMLElement} [opts.root]\n   * @param {string} [opts.id]\n   * @param {DisplayScaling} [opts.mode]\n   * @param {number} [opts.width]\n   * @param {number} [opts.height]\n   * @param {boolean} [opts.debug]\n   */\n  static create(opts = {}) {\n    const {\n      root = document.body,\n      id = undefined,\n      mode = DEFAULT_MODE,\n      width = DEFAULT_WIDTH,\n      height = DEFAULT_HEIGHT,\n      debug = false\n    } = opts || {};\n    let result = new DisplayPort();\n    result.id = id;\n    result.mode = mode;\n    result.width = width;\n    result.height = height;\n    result.debug = debug;\n    root.appendChild(result);\n    return result;\n  }\n\n  /** @private */\n  static get [Symbol.for('templateNode')]() {\n    let t = document.createElement('template');\n    t.innerHTML = INNER_HTML;\n    Object.defineProperty(this, Symbol.for('templateNode'), { value: t });\n    return t;\n  }\n\n  /** @private */\n  static get [Symbol.for('styleNode')]() {\n    let t = document.createElement('style');\n    t.innerHTML = INNER_STYLE;\n    Object.defineProperty(this, Symbol.for('styleNode'), { value: t });\n    return t;\n  }\n\n  static define(customElements = window.customElements) {\n    customElements.define('display-port', this);\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  static get observedAttributes() {\n    return [\n      'debug',\n      'disabled',\n      // 'mode',\n      'width',\n      'height',\n      'onframe',\n      // Built-in attributes\n      'id',\n      'class',\n    ];\n  }\n\n  /**\n   * The scaling mode.\n   * - `noscale`: Do not perform scaling.\n   * - `center`: Do not perform scaling but stretch the display to fill the entire\n   * viewport. The unscaled canvas is centered.\n   * - `fit`: Resize resolution to fill the entire viewport and maintains the aspect\n   * ratio. The pixel resolution is changed. This is the default behavior.\n   * - `fill`: Resize resolution to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `stretch`: Perform scaling to fill the entire viewport but does not maintain\n   * aspect ratio.\n   * - `scale`: Perform scaling to fill the entire viewport and maintains the\n   * aspect ratio and resolution. The pixel resolution remains constant.\n   * @returns {DisplayScaling} The current scaling mode.\n   */\n  get mode() {\n    return /** @type {DisplayScaling} */ (this.getAttribute('mode'));\n  }\n\n  set mode(value) {\n    this.setAttribute('mode', value);\n  }\n\n  /**\n   * Set to true for debug information.\n   * @returns {boolean}\n   */\n  get debug() {\n    return this._debug;\n  }\n\n  set debug(value) {\n    this.toggleAttribute('debug', value);\n  }\n\n  /**\n   * If disabled, animation frames will not fire.\n   * @returns {boolean}\n   */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  /**\n   * The canvas width in pixels. This determines the aspect ratio and canvas buffer size.\n   * @returns {number}\n   */\n  get width() {\n    return this._width;\n  }\n\n  set width(value) {\n    this.setAttribute('width', String(value));\n  }\n\n  /**\n   * The canvas height in pixels. This determines the aspect ratio and canvas buffer size.\n   */\n  get height() {\n    return this._height;\n  }\n\n  set height(value) {\n    this.setAttribute('height', String(value));\n  }\n\n  /** Fired every animation frame. */\n  get onframe() {\n    return this._onframe;\n  }\n\n  set onframe(value) {\n    if (this._onframe) this.removeEventListener('frame', this._onframe);\n    this._onframe = value;\n    if (this._onframe) this.addEventListener('frame', value);\n  }\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('templateNode')].content.cloneNode(true)\n    );\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('styleNode')].cloneNode(true)\n    );\n\n    /** @private */\n    this._canvasElement = shadowRoot.querySelector('canvas');\n    /**\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this._contentElement = shadowRoot.querySelector('.content');\n    /**\n     * @private\n     * @type {HTMLSlotElement}\n     */\n    this._innerElement = shadowRoot.querySelector('#inner');\n\n    /** @private */\n    this._titleElement = shadowRoot.querySelector('#title');\n    /** @private */\n    this._fpsElement = shadowRoot.querySelector('#fps');\n    /** @private */\n    this._dimensionElement = shadowRoot.querySelector('#dimension');\n\n    /** @private */\n    this._debug = false;\n    /** @private */\n    this._disabled = false;\n    /** @private */\n    this._width = DEFAULT_WIDTH;\n    /** @private */\n    this._height = DEFAULT_HEIGHT;\n    /** @private */\n    this._onframe = undefined;\n\n    /** @private */\n    this._animationRequestHandle = 0;\n    /** @private */\n    this._prevAnimationFrameTime = 0;\n\n    /** @private */\n    this._resizeTimeoutHandle = 0;\n    /** @private */\n    this._resizeCanvasWidth = 0;\n    /** @private */\n    this._resizeCanvasHeight = 0;\n\n    /** @private */\n    this._frameEvent = new CustomEvent('frame', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        now: 0,\n        prevTime: 0,\n        deltaTime: 0,\n        canvas: this._canvasElement,\n      },\n    });\n    /** @private */\n    this._resizeEvent = new CustomEvent('resize', {\n      composed: true,\n      bubbles: false,\n      detail: {\n        width: 0,\n        height: 0,\n      },\n    });\n\n    /** @private */\n    this.update = this.update.bind(this);\n    /** @private */\n    this.onDelayCanvasResize = this.onDelayCanvasResize.bind(this);\n  }\n\n  /** Get the canvas element. */\n  get canvas() {\n    return this._canvasElement;\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  connectedCallback() {\n    upgradeProperty(this, 'mode');\n    upgradeProperty(this, 'debug');\n    upgradeProperty(this, 'disabled');\n    upgradeProperty(this, 'width');\n    upgradeProperty(this, 'height');\n    upgradeProperty(this, 'onframe');\n\n    if (!this.hasAttribute('mode')) {\n      this.setAttribute('mode', DEFAULT_MODE);\n    }\n\n    // Allows this element to be focusable\n    if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', '0');\n    }\n\n    this.updateCanvasSize(true);\n    this.resume();\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  disconnectedCallback() {\n    this.pause();\n  }\n\n  /**\n   * @protected\n   * Override for web component.\n   */\n  attributeChangedCallback(attribute, prev, value) {\n    switch (attribute) {\n      case 'debug':\n        {\n          this._debug = value !== null;\n        }\n        break;\n      case 'disabled':\n        {\n          this._disabled = value !== null;\n        }\n        break;\n      case 'width':\n        {\n          this._width = Number(value);\n        }\n        break;\n      case 'height':\n        {\n          this._height = Number(value);\n        }\n        break;\n      case 'onframe':\n        {\n          this.onframe = new Function(\n            'event',\n            'with(document){with(this){' + value + '}}'\n          ).bind(this);\n        }\n        break;\n    }\n\n    switch (attribute) {\n      case 'disabled':\n        if (value) {\n          this.update(0);\n          this.pause();\n        } else {\n          this.resume();\n        }\n        break;\n      // NOTE: For debugging purposes...\n      case 'id':\n      case 'class':\n        this._titleElement.innerHTML = `display-port${\n          this.className ? '.' + this.className : ''\n        }${this.hasAttribute('id') ? '#' + this.getAttribute('id') : ''}`;\n        break;\n      case 'debug':\n        this._titleElement.classList.toggle('hidden', value);\n        this._fpsElement.classList.toggle('hidden', value);\n        this._dimensionElement.classList.toggle('hidden', value);\n        break;\n    }\n  }\n\n  /**\n   * @param {'2d'|'webgl'|'webgl2'} [contextId]\n   * @param {CanvasRenderingContext2DSettings} [options]\n   */\n  getContext(contextId = '2d', options = undefined) {\n    return this._canvasElement.getContext(contextId, options);\n  }\n\n  /** Pause animation of the display frames. */\n  pause() {\n    window.cancelAnimationFrame(this._animationRequestHandle);\n  }\n\n  /** Resume animation of the display frames. */\n  resume() {\n    this._animationRequestHandle = window.requestAnimationFrame(this.update);\n  }\n\n  /** @private */\n  update(now) {\n    this._animationRequestHandle = window.requestAnimationFrame(this.update);\n    this.updateCanvasSize(false);\n    const deltaTime = now - this._prevAnimationFrameTime;\n    this._prevAnimationFrameTime = now;\n\n    // NOTE: For debugging purposes...\n    if (this._debug) {\n      // Update FPS...\n      const frames =\n        deltaTime <= 0\n          ? '--'\n          : String(Math.round(1000 / deltaTime)).padStart(2, '0');\n      if (this._fpsElement.textContent !== frames) {\n        this._fpsElement.textContent = frames;\n      }\n\n      // Update dimensions...\n      const mode = this.mode;\n      if (mode === MODE_NOSCALE) {\n        let result = `${this._width}x${this._height}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      } else {\n        let result = `${this._width}x${this._height}|${this.shadowRoot.host.clientWidth}x${this.shadowRoot.host.clientHeight}`;\n        if (this._dimensionElement.textContent !== result) {\n          this._dimensionElement.textContent = result;\n        }\n      }\n    }\n\n    let event = this._frameEvent;\n    let detail = event.detail;\n    detail.now = now;\n    detail.prevTime = this._prevAnimationFrameTime;\n    detail.deltaTime = deltaTime;\n    this.dispatchEvent(this._frameEvent);\n  }\n\n  /** @private */\n  onDelayCanvasResize() {\n    this._resizeTimeoutHandle = null;\n    this.updateCanvasSize(true);\n  }\n\n  delayCanvasResize(canvasWidth, canvasHeight) {\n    if (\n      canvasWidth !== this._resizeCanvasWidth ||\n      canvasHeight !== this._resizeCanvasHeight\n    ) {\n      // Only call onDelayCanvasResize, if new canvas size actually changed since last time.\n      this._resizeCanvasWidth = canvasWidth;\n      this._resizeCanvasHeight = canvasHeight;\n      if (this._resizeTimeoutHandle) {\n        window.clearTimeout(this._resizeTimeoutHandle);\n      }\n      this._resizeTimeoutHandle = window.setTimeout(\n        this.onDelayCanvasResize,\n        DELAYED_RESIZE_MILLIS\n      );\n    }\n  }\n\n  /** @private */\n  updateCanvasSize(force = true) {\n    const clientRect = this.shadowRoot.host.getBoundingClientRect();\n    const clientWidth = clientRect.width;\n    const clientHeight = clientRect.height;\n\n    let canvas = this._canvasElement;\n    let canvasWidth = this._width;\n    let canvasHeight = this._height;\n\n    const mode = this.mode;\n    if (mode === MODE_STRETCH || mode === MODE_FILL) {\n      canvasWidth = clientWidth;\n      canvasHeight = clientHeight;\n    } else if (mode !== MODE_NOSCALE) {\n      if (\n        clientWidth < canvasWidth ||\n        clientHeight < canvasHeight ||\n        mode === MODE_FIT ||\n        mode == MODE_SCALE\n      ) {\n        let ratioX = clientWidth / canvasWidth;\n        let ratioY = clientHeight / canvasHeight;\n\n        if (ratioX < ratioY) {\n          canvasWidth = clientWidth;\n          canvasHeight = canvasHeight * ratioX;\n        } else {\n          canvasWidth = canvasWidth * ratioY;\n          canvasHeight = clientHeight;\n        }\n      }\n    }\n\n    canvasWidth = Math.floor(canvasWidth);\n    canvasHeight = Math.floor(canvasHeight);\n\n    if (typeof force === 'undefined') {\n      force =\n        canvas.clientWidth !== canvasWidth ||\n        canvas.clientHeight !== canvasHeight;\n    }\n\n    if (!force) {\n      this.delayCanvasResize(canvasWidth, canvasHeight);\n      return;\n    }\n\n    let fontSize =\n      Math.min(canvasWidth / this._width, canvasHeight / this._height) * 0.5;\n    // NOTE: Update the inner container for the default slotted children.\n    // To anchor children outside the canvas, use the slot named 'frame'.\n    this._innerElement.style.fontSize = `font-size: ${fontSize}em`;\n    if (force) {\n      if (mode === MODE_SCALE) {\n        canvas.width = this._width;\n        canvas.height = this._height;\n      } else if (mode !== MODE_STRETCH) {\n        canvas.width = canvasWidth;\n        canvas.height = canvasHeight;\n      }\n      let contentStyle = this._contentElement.style;\n      contentStyle.width = `${canvasWidth}px`;\n      contentStyle.height = `${canvasHeight}px`;\n\n      if (mode === MODE_FIT || mode === MODE_FILL) {\n        this._width = canvasWidth;\n        this._height = canvasHeight;\n      }\n\n      let event = this._resizeEvent;\n      let detail = event.detail;\n      detail.width = canvasWidth;\n      detail.height = canvasHeight;\n      this.dispatchEvent(this._resizeEvent);\n    }\n  }\n}\nDisplayPort.define();\n\nfunction upgradeProperty(element, propertyName) {\n  if (Object.prototype.hasOwnProperty.call(element, propertyName)) {\n    let value = element[propertyName];\n    delete element[propertyName];\n    element[propertyName] = value;\n  }\n}\n"],"names":["MODE_NOSCALE","MODE_FIT","MODE_SCALE","MODE_FILL","MODE_STRETCH","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_MODE","DisplayPort","HTMLElement","static","opts","root","document","body","id","mode","width","height","debug","result","appendChild","Symbol","for","t","createElement","innerHTML","Object","defineProperty","this","value","customElements","window","define","observedAttributes","getAttribute","setAttribute","_debug","toggleAttribute","disabled","_disabled","_width","String","_height","onframe","_onframe","removeEventListener","addEventListener","constructor","super","shadowRoot","attachShadow","content","cloneNode","_canvasElement","querySelector","_contentElement","_innerElement","_titleElement","_fpsElement","_dimensionElement","undefined","_animationRequestHandle","_prevAnimationFrameTime","_resizeTimeoutHandle","_resizeCanvasWidth","_resizeCanvasHeight","_frameEvent","CustomEvent","composed","bubbles","detail","now","prevTime","deltaTime","canvas","_resizeEvent","update","bind","onDelayCanvasResize","connectedCallback","upgradeProperty","hasAttribute","updateCanvasSize","resume","disconnectedCallback","pause","attributeChangedCallback","attribute","prev","Number","Function","className","classList","toggle","getContext","contextId","options","cancelAnimationFrame","requestAnimationFrame","frames","Math","round","padStart","textContent","host","clientWidth","clientHeight","dispatchEvent","delayCanvasResize","canvasWidth","canvasHeight","clearTimeout","setTimeout","force","clientRect","getBoundingClientRect","ratioX","ratioY","floor","fontSize","min","style","contentStyle","element","propertyName","prototype","hasOwnProperty","call"],"mappings":"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"}