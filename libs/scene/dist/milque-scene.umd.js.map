{"version":3,"file":"milque-scene.umd.js","sources":["../src/camera/CameraHelper.js","../src/camera/Camera.js","../src/camera/PerspectiveCamera.js","../src/camera/FirstPersonCameraController.js","../src/scenegraph/SceneGraph.js","../src/entity/QueryManager.js","../src/entity/Query.js","../src/entity/Archetype.js","../src/topic/Topic.js","../src/topic/TopicManager.js","../src/loop/AnimationFrameLoop.js","../src/topic/AsyncTopic.js","../src/entity/ComponentClass.js","../src/entity/EntityManager.js","../src/camera/OrthographicCamera.js"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\n\nconst UP = vec3.fromValues(0, 1, 0);\n\nexport function panTo(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  mat4.getTranslation(position, viewMatrix);\n  let translation = vec3.fromValues(\n    (x - position[0]) * dt,\n    (y - position[1]) * dt,\n    (z - position[2]) * dt\n  );\n  mat4.translate(viewMatrix, viewMatrix, translation);\n}\n\nexport function lookAt(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  let rotation = quat.create();\n  mat4.getTranslation(position, viewMatrix);\n  mat4.getRotation(rotation, viewMatrix);\n  let target = vec3.fromValues(x, y, z);\n\n  mat4.lookAt(viewMatrix, position, target, UP);\n\n  let targetRotation = quat.create();\n  mat4.getRotation(targetRotation, viewMatrix);\n  quat.slerp(rotation, rotation, targetRotation, dt);\n\n  mat4.fromRotationTranslation(viewMatrix, rotation, position);\n}\n\n/**\n * Gets a directional ray in the world space from the given normalized\n * screen coordinates and camera matrices.\n *\n * NOTE: In addition to some scaling, the y component from a pointer's\n * position usually has to be flipped to match the normalized screen\n * coordinate space, which assumes a range of [-1, 1] for both x and y,\n * where (0, 0) is the center and (-1, -1) is the bottom-left of the\n * screen.\n *\n * ### Typical Device Screen Coordinate Space:\n * ```\n * (0,0)------------(w,0)\n *    |               |\n *    |   (w/2,h/2)   |\n *    |               |\n * (0,w)------------(w,h)\n * ```\n *\n * ### Normalized Screen Coordinate Space:\n * ```\n * (-1,+1)---------(+1,+1)\n *    |               |\n *    |     (0,0)     |\n *    |               |\n * (-1,-1)---------(+1,-1)\n * ```\n *\n * ### Example Conversion from Device to Normalized:\n * ```\n * let normalizedScreenX = (canvasClientX / canvasWidth) * 2 - 1;\n * let normalizedScreenY = 1 - (canvasClientY / canvasHeight) * 2;\n * ```\n *\n * @param {vec3} out The output vector.\n * @param {number} normalizedScreenCoordX The X screen coordinate normalized to [-1, 1], where -1 is the left side of the screen.\n * @param {number} normalizedScreenCoordY The Y screen coordinate normalized to [-1, 1], where -1 is the bottom side of the screen.\n * @param {mat4} projectionMatrix The projection matrix of the world camera.\n * @param {mat4} viewMatrix The view matrix of the world camera.\n * @param {boolean} [normalized=false] Whether to normalize the result. Usually true for non-orthogonal projections.\n * @returns {vec3} The ray direction in the world space. By default, this is not normalized.\n */\nexport function screenToWorldRay(\n  out,\n  normalizedScreenCoordX,\n  normalizedScreenCoordY,\n  projectionMatrix,\n  viewMatrix,\n  normalized = false\n) {\n  // https://antongerdelan.net/opengl/raycasting.html\n  // To homogeneous clip coords\n  let v = vec4.fromValues(\n    normalizedScreenCoordX,\n    normalizedScreenCoordY,\n    -1,\n    1\n  );\n  // To camera coords\n  let m = mat4.create();\n  mat4.invert(m, projectionMatrix);\n  vec4.transformMat4(v, v, m);\n  v[2] = -1;\n  v[3] = 0;\n  // To world coords\n  mat4.invert(m, viewMatrix);\n  vec4.transformMat4(v, v, m);\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  // Normalized as directional ray\n  if (normalized) {\n    vec3.normalize(out, out);\n  }\n  return out;\n}\n","export class Camera {\n  constructor(projectionMatrix, viewMatrix) {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n  }\n\n  /**\n   * @abstract\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   * @returns {Camera}\n   */\n  // eslint-disable-next-line no-unused-vars\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    return this;\n  }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nconst DEFAULT_FOVY = Math.PI / 3;\n\nexport class PerspectiveCamera extends Camera {\n  constructor(fieldOfView = DEFAULT_FOVY, near = 0.1, far = 1000) {\n    super(mat4.create(), mat4.create());\n\n    this.fieldOfView = Number(fieldOfView);\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /** @override */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const aspectRatio =\n      typeof viewportWidth === 'undefined' ? 1 : viewportWidth / viewportHeight;\n    const { near, far } = this.clippingPlane;\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fieldOfView,\n      aspectRatio,\n      near,\n      far\n    );\n    return this;\n  }\n}\n","import { vec3, mat4 } from 'gl-matrix';\n\nconst TO_RAD_FACTOR = Math.PI / 180;\n\n/**\n * A camera controller that behaves like a traditional first person camera.\n * Pitch is restricted to prevent gimbal lock and roll is ignored.\n *\n * NOTE: Don't forget to lock your pointer, i.e. `canvas.requestPointerLock()`.\n */\nexport class FirstPersonCameraController {\n  constructor(opts = { locky: false }) {\n    this.locky = opts.locky;\n\n    this.position = vec3.create();\n    this.forward = vec3.fromValues(0, 0, -1);\n    this.right = vec3.fromValues(1, 0, 0);\n    this.up = vec3.fromValues(0, 1, 0);\n\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    this.pitch = 0;\n    this.yaw = -90;\n  }\n\n  look(dx, dy, dt = 1) {\n    // NOTE: Increase sensitivity to relatively match movement.\n    dt *= 1000;\n    this.pitch = Math.min(89.9, Math.max(-89.9, this.pitch + dy * dt));\n    this.yaw = (this.yaw + dx * dt) % 360;\n    return this;\n  }\n\n  move(forward, right = 0, up = 0, dt = 1) {\n    this.forwardAmount += forward * dt;\n    this.rightAmount += right * dt;\n    this.upAmount += up * dt;\n    return this;\n  }\n\n  apply(viewMatrix) {\n    let {\n      position,\n      forward,\n      right,\n      up,\n      forwardAmount,\n      rightAmount,\n      upAmount,\n      pitch,\n      yaw,\n    } = this;\n\n    // Calculate forward and right vectors\n    let rady = yaw * TO_RAD_FACTOR;\n    let radp = pitch * TO_RAD_FACTOR;\n    let cosy = Math.cos(rady);\n    let cosp = Math.cos(radp);\n    let siny = Math.sin(rady);\n    let sinp = Math.sin(radp);\n    let dx = cosy * cosp;\n    let dy = sinp;\n    let dz = siny * cosp;\n\n    // Set forward for move vector\n    vec3.normalize(forward, vec3.set(forward, dx, this.locky ? 0 : dy, dz));\n    vec3.normalize(right, vec3.cross(right, forward, up));\n\n    let move = vec3.create();\n    // Move forward\n    vec3.scale(move, forward, forwardAmount);\n    vec3.add(position, position, move);\n    // Move right\n    vec3.scale(move, right, rightAmount);\n    vec3.add(position, position, move);\n    // Move up\n    vec3.scale(move, up, upAmount);\n    vec3.add(position, position, move);\n    // Reset movement\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    // Reset forward for look vector\n    if (this.locky) vec3.set(forward, dx, dy, dz);\n\n    let target = vec3.add(move, position, forward);\n    mat4.lookAt(viewMatrix, position, target, up);\n    return viewMatrix;\n  }\n}\n","const MAX_DEPTH_LEVEL = 100;\n\n/**\n * @typedef {number} SceneNode\n *\n * @typedef SceneNodeInfo\n * @property {SceneNode} parent The parent node. If the node does not have a parent,\n * it will be 0.\n * @property {Array<SceneNode>} children The list of child nodes.\n *\n * @callback WalkCallback Called for each node, before traversing its children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {WalkBackCallback|boolean|void} If false, the walk will skip\n * the current node's children and all of its descendents. If a function,\n * it will be called after traversing down all of its children.\n *\n * @callback WalkBackCallback Called if returned by {@link WalkCallback}, after\n * traversing the current node's children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n *\n * @callback WalkChildrenCallback Called for each level of children, before\n * traversing them. This is usually used to determine visit order.\n * @param {Array<SceneNode>} childNodes A list of child nodes to be visited.\n * @param {SceneNode} parentNode The current parent node of these children.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {Array<SceneNode>} The list of children to traverse for this parent.\n */\n\n/**\n * A tree-like graph of nodes with n-children.\n */\nexport class SceneGraph {\n  /**\n   * Constructs an empty scene graph.\n   */\n  constructor() {\n    this.nodes = {};\n    this.roots = [];\n\n    this._nextAvailableSceneNodeId = 1;\n  }\n\n  /**\n   * Creates a scene node in the scene graph.\n   *\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * node.\n   * @returns {SceneNode} The created scene node.\n   */\n  createSceneNode(parentNode = undefined) {\n    let sceneNode = this._nextAvailableSceneNodeId++;\n    let info = createSceneNodeInfo(sceneNode);\n    this.nodes[sceneNode] = info;\n    attach(parentNode, sceneNode, this);\n    return sceneNode;\n  }\n\n  /**\n   * Creates multiple scene nodes in the scene graph.\n   *\n   * @param {number} count The number of scene nodes to create.\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * nodes.\n   * @returns {Array<SceneNode>} A list of created scene nodes.\n   */\n  createSceneNodes(count, parentNode = undefined) {\n    let result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(this.createSceneNode(parentNode));\n    }\n    return result;\n  }\n\n  /**\n   * Deletes a scene node from the scene graph, along with all\n   * of its descendents.\n   *\n   * @param {SceneNode} sceneNode The scene node to remove.\n   */\n  deleteSceneNode(sceneNode) {\n    if (sceneNode in this.nodes) {\n      let info = this.nodes[sceneNode];\n      detach(info.parent, sceneNode, this);\n      walkImpl(this, sceneNode, 0, walkDeleteCallback);\n    } else {\n      throw new Error('Cannot delete non-existant scene node for scene graph.');\n    }\n  }\n\n  /**\n   * Deletes all given scene nodes from the scene graph, along with all\n   * of their descendents.\n   *\n   * @param {Array<SceneNode>} sceneNodes A list of scene nodes to remove.\n   */\n  deleteSceneNodes(sceneNodes) {\n    for (let sceneNode of sceneNodes) {\n      this.deleteSceneNode(sceneNode);\n    }\n  }\n\n  /**\n   * Get the scene node's info.\n   *\n   * @param {SceneNode} sceneNode The scene node to get info for.\n   * @returns {SceneNodeInfo} The info for the given scene node.\n   */\n  getSceneNodeInfo(sceneNode) {\n    return this.nodes[sceneNode];\n  }\n\n  /**\n   * Changes the parent of the scene node with the new parent node in\n   * the graph.\n   *\n   * @param {SceneNode} sceneNode The target scene node to change.\n   * @param {SceneNode} parentNode The scene node to set as the parent.\n   */\n  parentSceneNode(sceneNode, parentNode) {\n    let info = this.nodes[sceneNode];\n    detach(info.parent, sceneNode, this);\n    attach(parentNode, sceneNode, this);\n  }\n\n  /**\n   * Replaces the scene node with the new replacement node in the graph,\n   * inheriting its parent and children.\n   *\n   * @param {SceneNode} sceneNode The target scene node to replace.\n   * @param {SceneNode} replacementNode The scene node to replace with. If falsey,\n   * it will remove the target scene node and the target's parent will adopt\n   * its grandchildren. If the target did not have parents, the grandchildren will\n   * become root nodes in the graph.\n   */\n  replaceSceneNode(sceneNode, replacementNode) {\n    let info = this.nodes[sceneNode];\n    let parentNode = info.parent;\n    let grandChildren = info.children.slice();\n\n    // Remove the target node from graph\n    detach(parentNode, sceneNode, this);\n\n    // Begin grafting the grandchildren by removing them...\n    info.children.length = 0;\n\n    if (replacementNode) {\n      // Reattach all grandchildren to new replacement node.\n      let replacementInfo = this.nodes[replacementNode];\n      let replacementParent = replacementInfo.parent;\n\n      // Remove replacement node from previous parent\n      detach(replacementParent, replacementNode, this);\n\n      // ...and graft them back.\n      replacementInfo.children.push(...grandChildren);\n\n      // And reattach target parent to new child.\n      attach(parentNode, replacementNode, this);\n    } else {\n      // Reattach all grandchildren to target parent...\n      if (parentNode) {\n        //...as regular children.\n        let parentInfo = this.nodes[parentNode];\n        parentInfo.children.push(...grandChildren);\n      } else {\n        //...as root children.\n        this.roots.push(...grandChildren);\n      }\n    }\n\n    // ...and repair their parent relations.\n    for (let childNode of grandChildren) {\n      this.nodes[childNode].parent = parentNode;\n    }\n  }\n\n  /**\n   * Walks through every child node in the graph.\n   *\n   * @param {WalkCallback} callback The function called for each node\n   * in the graph, in ordered traversal from parent to child.\n   * @param {object} [opts] Any additional options.\n   * @param {SceneNode|Array<SceneNode>} [opts.from] The parent node to\n   * start walking from, inclusive. By default, it will start from the root\n   * nodes.\n   * @param {WalkChildrenCallback} [opts.childFilter] The function called before\n   * walking through the children. This is usually used to determine the\n   * visiting order.\n   */\n  walk(callback, opts = undefined) {\n    const { from = undefined, childFilter = undefined } = opts || {};\n\n    let fromNodes;\n    if (!from) fromNodes = this.roots;\n    else if (!Array.isArray(from)) fromNodes = [from];\n    else fromNodes = from;\n\n    if (childFilter) fromNodes = childFilter(fromNodes, 0, this);\n    for (let fromNode of fromNodes) {\n      walkImpl(this, fromNode, 0, callback, childFilter);\n    }\n  }\n}\n\n/**\n * @param {SceneNode} key The scene node handle.\n * @returns {SceneNodeInfo} The scene node metadata.\n */\nfunction createSceneNodeInfo(key) {\n  return {\n    parent: 0,\n    children: [],\n  };\n}\n\n/**\n * Attaches a child node to a parent in the scene graph. If parentNode is\n * null, then it will attach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction attach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has new parent; attach to parent. It is now in the graph.\n    sceneGraph.nodes[parentNode].children.push(childNode);\n    sceneGraph.nodes[childNode].parent = parentNode;\n  } else {\n    // No parent; move to root. It is now in the graph.\n    sceneGraph.roots.push(childNode);\n    sceneGraph.nodes[childNode].parent = 0;\n  }\n}\n\n/**\n * Detaches a child node from its parent in the scene graph. If parentNode is\n * null, then it will detach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction detach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has parent; detach from parent. It is now a free node.\n    let children = sceneGraph.nodes[parentNode].children;\n    let childIndex = children.indexOf(childNode);\n    children.splice(childIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  } else {\n    // No parent; remove from root. It is now a free node.\n    let roots = sceneGraph.roots;\n    let rootIndex = roots.indexOf(childNode);\n    roots.splice(rootIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  }\n}\n\n/**\n * Walk down from the parent and through all its descendents.\n *\n * @param {SceneGraph} sceneGraph The scene graph containing the nodes to be visited.\n * @param {SceneNode} parentNode The parent node to start walking from.\n * @param {number} level The current call depth level. This is used to limit the call stack.\n * @param {WalkCallback} nodeCallback The function called on each visited node.\n * @param {WalkChildrenCallback} [filterCallback] The function called before\n * walking through the children. This is usually used to determine the visiting order.\n */\nfunction walkImpl(\n  sceneGraph,\n  parentNode,\n  level,\n  nodeCallback,\n  filterCallback = undefined\n) {\n  if (level >= MAX_DEPTH_LEVEL) return;\n\n  let result = nodeCallback(parentNode, sceneGraph);\n  if (result === false) return;\n\n  let parentInfo = sceneGraph.nodes[parentNode];\n  let nextNodes = filterCallback\n    ? filterCallback(parentInfo.children, parentNode, sceneGraph)\n    : parentInfo.children;\n\n  for (let childNode of nextNodes) {\n    walkImpl(sceneGraph, childNode, level + 1, nodeCallback, filterCallback);\n  }\n\n  if (typeof result === 'function') {\n    result(parentNode, sceneGraph);\n  }\n}\n\nfunction walkDeleteCallback(sceneNode, sceneGraph) {\n  delete sceneGraph.nodes[sceneNode];\n}\n","import { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityManager} EntityManager */\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\nexport class QueryManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<EntityId>>}\n         */\n        this.cachedResults = {};\n        /**\n         * @private\n         * @type {Record<string, import('./Query').Query<?>>}\n         */\n        this.keyQueryMapping = {};\n\n        this.onEntityComponentChanged = this.onEntityComponentChanged.bind(this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} added\n     * @param {ComponentClass<?>} removed\n     * @param {boolean} dead\n     */\n    onEntityComponentChanged(entityManager, entityId, added, removed, dead) {\n        for(let query of Object.values(this.keyQueryMapping)) {\n            let entities = this.cachedResults[query.key];\n            if (dead) {\n                let i = entities.indexOf(entityId);\n                if (i >= 0) {\n                    entities.splice(i, 1);\n                }\n            } else if (added) {\n                if (query.hasSelector(Not(added))) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                } else if (query.hasSelector(added) && this.test(entityManager, entityId, query.selectors)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                }\n            } else if (removed) {\n                if (query.hasSelector(Not(removed)) && this.test(entityManager, entityId, query.selectors)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                } else if (query.hasSelector(removed) && this.test(entityManager, entityId, query.selectors)) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @protected\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId\n     * @param {Array<ComponentClass<?>>} selectors\n     */\n    test(entityManager, entityId, selectors) {\n        for(let selector of selectors) {\n            if (isSelectorNot(selector)) {\n                const componentClass = /** @type {SelectorNot<?>} */ (/** @type {unknown} */ (selector)).value;\n                if (entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            } else {\n                const componentClass = /** @type {ComponentClass<?>} */ (/** @type {unknown} */ (selector));\n                if (!entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @protected\n     * @param {Array<EntityId>} out\n     * @param {EntityManager} entityManager \n     * @param {Array<ComponentClass<?>>} selectors\n     */\n    hydrate(out, entityManager, selectors) {\n        if (selectors.length <= 0) {\n            out.length = 0;\n            return out;\n        }\n        let entities = entityManager.entityIds();\n        for(let entityId of entities) {\n            if (this.test(entityManager, entityId, selectors)) {\n                out.push(entityId);\n            }\n        }\n        return out;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {import('./Query').Query<?>} query\n     * @returns {Array<EntityId>}\n     */\n    findAll(entityManager, query) {\n        const queryKey = query.key;\n        let result;\n        if (!(queryKey in this.keyQueryMapping)) {\n            result = [];\n            this.keyQueryMapping[queryKey] = query;\n            this.cachedResults[queryKey] = result;\n            this.hydrate(result, entityManager, query.selectors);\n        } else {\n            result = this.cachedResults[queryKey];\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {import('./Query').Query<?>} query \n     */\n    count(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        return result.length;\n    }\n\n    /**\n     * @param {import('./Query').Query<?>} query\n     */\n    clear(query) {\n        const queryKey = query.key;\n        if (!(queryKey in this.keyQueryMapping)) {\n            return;\n        }\n        delete this.keyQueryMapping[queryKey];\n        delete this.cachedResults[queryKey];\n    }\n    \n    reset() {\n        this.keyQueryMapping = {};\n        this.cachedResults = {};\n    }\n}\n\n/**\n * @template T\n * @typedef {SelectorNot<T>|ComponentClass<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef SelectorNot<T>\n * @property {'not'} type\n * @property {string} name\n * @property {ComponentClass<T>} value\n */\n\n/**\n * @template T\n * @param {ComponentClass<T>} componentClass \n * @returns {ComponentClass<T>}\n */\nexport function Not(componentClass) {\n    return {\n        // @ts-ignore\n        type: 'not',\n        name: componentClass.name,\n        value: componentClass,\n    };\n}\n\nexport function isSelectorNot(selector) {\n    return 'type' in selector && selector.type === 'not';\n}\n","import { ComponentClass } from './ComponentClass';\nimport { EntityManager } from './EntityManager';\nimport { isSelectorNot } from './QueryManager';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').Selector<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').SelectorNot<T>} SelectorNot<T>\n */\n\nexport class Query {\n\n    /**\n     * @param {...ComponentClass<?>} selectors \n     */\n    constructor(...selectors) {\n        if (selectors.length <= 0) {\n            throw new Error('Must have at least 1 selector for query.');\n        }\n        this.selectors = selectors;\n        this.key = computeSelectorKey(selectors);\n    }\n\n    /**\n     * @param {Selector<?>} selector\n     */\n    hasSelector(selector) {\n        if (isSelectorNot(selector)) {\n            return this.selectors.findIndex(v => isSelectorNot(v) && v.name === selector.name) >= 0;\n        } else {\n            return this.selectors.findIndex(v => v.name === selector.name) >= 0;\n        }\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {number}\n     */\n    count(entityManager) {\n        return entityManager.queries.count(entityManager, this);\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {Generator<EntityId>}\n     */\n    *findEntityIds(entityManager) {\n        const queryManager = entityManager.queries;\n        for(let entityId of queryManager.findAll(entityManager, this)) {\n            yield entityId;\n        }\n    }\n    \n    /**\n     * @template T\n     * @param {EntityManager} entityManager \n     * @param {ComponentClass<T>} componentClass\n     * @returns {Generator<T>}\n     */\n    *findComponents(entityManager, componentClass) {\n        if (this.selectors.indexOf(componentClass) < 0) {\n            throw new Error(`Cannot find component for class '${componentClass.name}' not in query.`);\n        }\n        const queryManager = entityManager.queries;\n        for(let entityId of queryManager.findAll(entityManager, this)) {\n            yield entityManager.get(entityId, componentClass);\n        }\n    }\n}\n\n/**\n * @param {Array<ComponentClass<?>>} selectors\n */\nfunction computeSelectorKey(selectors) {\n    return selectors.map(s => isSelectorNot(s) ? `!${s.name}` : s.name).sort().join('&');\n}\n","import { ComponentClass } from './ComponentClass';\nimport { EntityManager } from './EntityManager';\nimport { Query } from './Query';\nimport { isSelectorNot } from './QueryManager';\n\n/**\n * @typedef {Record<string, ComponentClass<any>>} ArchetypeComponentMap\n */\n\n/**\n * @template {ArchetypeComponentMap} T\n * @typedef {{[K in keyof T]: T[K] extends ComponentClass<infer V> ? V : never}} ArchetypeComponentInstancesOf<T>\n */\n\n/**\n * @template {ArchetypeComponentMap} T\n */\nexport class Archetype extends Query {\n\n    /**\n     * @param {T} componentMap \n     */\n    constructor(componentMap) {\n        super(...Object.values(componentMap));\n        /** @private */\n        this.componentClasses = componentMap;\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @returns {ArchetypeComponentInstancesOf<T>}\n     */\n    create(ents) {\n        let entityId = ents.create();\n        let result = {};\n        for(let [key, componentClass] of Object.entries(this.componentClasses)) {\n            let instance = ents.attach(entityId, componentClass);\n            result[key] = instance;\n        }\n        return /** @type {ArchetypeComponentInstancesOf<T>} */ (result);\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @param {import('./EntityManager').EntityId} entityId \n     */\n    destroy(ents, entityId) {\n        for (let componentClass of Object.values(this.componentClasses)) {\n            ents.detach(entityId, componentClass);\n        }\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @param {import('./EntityManager').EntityId} entityId\n     * @returns {ArchetypeComponentInstancesOf<T>}\n     */\n    find(ents, entityId) {\n        if (entityId === null) {\n            return /** @type {ArchetypeComponentInstancesOf<T>} */ ({});\n        }\n        return computeResult({}, ents, entityId, this.componentClasses);\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @returns {ArchetypeComponentInstancesOf<T>}\n     */\n    findAny(ents) {\n        const queryManager = ents.queries;\n        let entities = queryManager.findAll(ents, this);\n        if (entities.length <= 0) {\n            return /** @type {ArchetypeComponentInstancesOf<T>} */ ({});\n        }\n        let entityId = entities[Math.floor(Math.random() * entities.length)];\n        return computeResult({}, ents, entityId, this.componentClasses);\n    }\n\n    /**\n     * @param {EntityManager} ents \n     * @returns {Generator<ArchetypeComponentInstancesOf<T>>}\n     */\n    *findAll(ents) {\n        const queryManager = ents.queries;\n        let result = {};\n        let entities = queryManager.findAll(ents, this);\n        for(let entityId of entities) {\n            yield computeResult(result, ents, entityId, this.componentClasses);\n        }\n    }\n}\n\n/**\n * @template T\n * @param {object} out \n * @param {EntityManager} ents \n * @param {import('./EntityManager').EntityId} entityId \n * @param {T} componentClasses\n * @returns {ArchetypeComponentInstancesOf<T>}\n */\nfunction computeResult(out, ents, entityId, componentClasses) {\n    for(let [key, componentClass] of Object.entries(componentClasses)) {\n        if (isSelectorNot(componentClass)) {\n            out[key] = null;\n        } else {\n            out[key] = ents.get(entityId, componentClass);\n        }\n    }\n    return out;\n}\n","/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {import('./TopicManager').TopicCallback<T>} TopicCallback<T>\n */\n\n/**\n * @template T\n */\nexport class Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        this.name = name;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatch(topicManager, attachment) {\n        topicManager.dispatch(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatchImmediately(topicManager, attachment) {\n        topicManager.dispatchImmediately(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    on(topicManager, priority, callback) {\n        topicManager.addEventListener(this, callback, { priority });\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {TopicCallback<T>} callback\n     */\n    off(topicManager, callback) {\n        topicManager.removeEventListener(this, callback);\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    once(topicManager, priority, callback) {\n        let wrapper = (attachment) => {\n            this.off(topicManager, wrapper);\n            return callback(attachment);\n        };\n        return this.on(topicManager, priority, wrapper);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *poll(topicManager, amount) {\n        amount = Math.min(amount, topicManager.count(this));\n        for(let i = 0; i < amount; ++i) {\n            yield topicManager.poll(this);\n        }\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    retain(topicManager, amount) {\n        topicManager.retain(this, amount);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *pollAndRetain(topicManager, amount) {\n        this.retain(topicManager, amount);\n        for(let result of this.poll(topicManager, amount)) {\n            yield result;\n        }\n    }\n}\n","/**\n * @template T\n * @typedef {import('./Topic').Topic<T>} Topic<T>\n */\n\n/**\n * @template T\n * @typedef {(attachment: T) => void|boolean} TopicCallback<T>\n */\n\n/**\n * @template T\n * @typedef TopicCallbackEntry\n * @property {TopicCallback<T>} callback\n * @property {number} priority\n */\n\n/**\n * @template T\n * @param {TopicCallbackEntry<T>} a\n * @param {TopicCallbackEntry<T>} b\n */\nfunction comparator(a, b) {\n    return a.priority - b.priority;\n}\n\n/**\n * A manager for topic states. You should call `flush()` regularly to\n * process dispatched events or use `dispatchImmediately()`.\n */\nexport class TopicManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedIn = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedOut = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<TopicCallbackEntry<?>>>}\n         */\n        this.callbacks = {};\n        /**\n         * @protected\n         * @type {Record<string, number>}\n         */\n        this.maxRetains = {};\n        /**\n         * @private\n         * @type {Record<string, Topic<?>>}\n         */\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     * @param {object} [opts]\n     * @param {number} [opts.priority]\n     */\n    addEventListener(topic, callback, opts = undefined) {\n        const { priority = 0 } = opts;\n        let callbacks = this.callbacksOf(topic);\n        callbacks.push({\n            callback,\n            priority,\n        });\n        callbacks.sort(comparator);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     */\n    removeEventListener(topic, callback) {\n        let callbacks = this.callbacksOf(topic);\n        let i = callbacks.findIndex(v => v.callback === callback);\n        if (i >= 0) {\n            callbacks.splice(i, 1);\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    countEventListeners(topic) {\n        return this.callbacksOf(topic).length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    dispatch(topic, attachment) {\n        let incoming = this.incomingOf(topic);\n        incoming.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment\n     */\n    dispatchImmediately(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    async dispatchImmediatelyAndWait(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = await callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    count(topic) {\n        let outgoing = this.outgoingOf(topic);\n        return outgoing.length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     */\n    poll(topic) {\n        let outgoing = this.outgoingOf(topic);\n        if (outgoing.length <= 0) {\n            return null;\n        }\n        let result = outgoing.shift();\n        return result;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     * @param {number} amount\n     */\n    retain(topic, amount) {\n        const topicName = topic.name;\n        let max = Math.max(amount, this.maxRetains[topicName] || 0);\n        this.maxRetains[topicName] = max;\n    }\n\n    /**\n     * @param {number} [maxPerTopic]\n     */\n    flush(maxPerTopic = 100) {\n        for(const topicName of Object.keys(this.cachedIn)) {\n            const topic = this.nameTopicMapping[topicName];\n            const incoming = this.cachedIn[topicName];\n            const outgoing = this.cachedOut[topicName];\n            const retain = this.maxRetains[topicName] || 0;\n            if (retain < outgoing.length) {\n                outgoing.splice(0, outgoing.length - retain);\n            }\n            let max = Math.min(maxPerTopic, incoming.length);\n            for(let i = 0; i < max; ++i) {\n                let attachment = incoming.shift();\n                if (typeof attachment === 'object' && attachment instanceof Promise) {\n                    this.dispatchImmediately(topic, attachment);\n                } else {\n                    this.dispatchImmediately(topic, attachment);\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic \n     */\n    getPendingRetainCount(topic) {\n        return this.maxRetains[topic.name] || 0;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    getPendingFlushCount(topic) {\n        let incoming = this.incomingOf(topic);\n        return incoming.length;\n    }\n\n    reset() {\n        this.cachedIn = {};\n        this.cachedOut = {};\n        this.callbacks = {};\n        this.maxRetains = {};\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    incomingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedIn) {\n            return this.cachedIn[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = result;\n            this.cachedOut[topicName] = [];\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    outgoingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedOut) {\n            return this.cachedOut[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = [];\n            this.cachedOut[topicName] = result;\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<TopicCallbackEntry<T>>}\n     */\n    callbacksOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.callbacks) {\n            return this.callbacks[topicName];\n        } else {\n            let result = [];\n            this.callbacks[topicName] = result;\n            return result;\n        }\n    }\n}\n","/**\n * @typedef {(frameDetail: AnimationFrameLoop) => void} AnimationFrameLoopCallback\n * \n * @typedef AnimationFrameDetail\n * @property {number} prevTime\n * @property {number} currentTime\n * @property {number} deltaTime\n */\n\nexport class AnimationFrameLoop {\n    \n    /**\n     * @param {AnimationFrameLoopCallback} callback \n     * @param {object} [opts]\n     * @param {Window} [opts.animationFrameHandler]\n     */\n    constructor(callback, opts = undefined) {\n        const { animationFrameHandler = window } = opts || {};\n\n        /** @type {ReturnType<requestAnimationFrame>} */\n        this.handle = 0;\n        /** @type {AnimationFrameDetail} */\n        this.detail = {\n            prevTime: -1,\n            currentTime: -1,\n            deltaTime: 0,\n        };\n\n        /** @protected */\n        this.animationFrameHandler = animationFrameHandler;\n\n        /** @protected */\n        this.callback = callback;\n\n        this.next = this.next.bind(this);\n        this.start = this.start.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n\n    get running() {\n        return this.handle !== 0;\n    }\n    \n    next(now = performance.now()) {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        let d = this.detail;\n        d.prevTime = d.currentTime;\n        d.currentTime = now;\n        d.deltaTime = d.currentTime - d.prevTime;\n        this.callback(this);\n    }\n\n    start() {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        return this;\n    }\n\n    cancel() {\n        this.animationFrameHandler.cancelAnimationFrame(this.handle);\n        return this;\n    }\n}\n","import { Topic } from './Topic';\n\n/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {(attachment: T) => Promise<void>} AsyncTopicCallback<T>\n */\n\n/** @template T */\nexport class AsyncTopic extends Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        super(name);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    async dispatch(topicManager, attachment) {\n        // TODO: Topics don't really support async yet. 1. No result processing. 2. TopicManager doesn't really care.\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    async dispatchImmediately(topicManager, attachment) {\n        // @ts-ignore\n        await topicManager.dispatchImmediatelyAndWait(this, attachment);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    on(topicManager, priority, callback) {\n        // @ts-ignore\n        return super.on(topicManager, priority, callback);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    off(topicManager, callback) {\n        // @ts-ignore\n        return super.off(topicManager, callback);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    once(topicManager, priority, callback) {\n        // @ts-ignore\n        return super.once(topicManager, priority, callback);\n    }\n}","/**\n * @template T\n */\nexport class ComponentClass {\n    /**\n     * @param {string} name \n     * @param {() => T} [newCallback]\n     * @param {(component: T) => void} [deleteCallback] \n     */\n    constructor(name, newCallback = () => null, deleteCallback = () => {}) {\n        this.name = name;\n        this.new = newCallback;\n        this.delete = deleteCallback;\n    }\n}\n","import { ComponentClass } from './ComponentClass';\nimport { QueryManager } from './QueryManager';\n\n/**\n * @template T\n * @typedef {Record<number, T>} ComponentInstanceMap<T>\n */\n\n/**\n * @typedef {Record<string, ComponentInstanceMap<?>>} ComponentClassMap\n * @typedef {number} EntityId\n * @typedef {string} ComponentName\n */\n\n/**\n * @callback EntityComponentChangedCallback\n * @param {EntityManager} entityManager\n * @param {EntityId} entityId\n * @param {ComponentClass<?>} attached\n * @param {ComponentClass<?>} detached\n * @param {boolean} dead\n */\n\nexport class EntityManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {ComponentClassMap}\n         */\n        this.components = {};\n        /** @private */\n        this.nameClassMapping = {};\n        /**\n         * @private\n         * @type {EntityId}\n         */\n        this.nextAvailableEntityId = 1;\n        /**\n         * @protected\n         * @type {Array<[string, ...any]>}\n         */\n        this.queue = [];\n        /** @private */\n        this.listeners = [];\n        this.queries = new QueryManager();\n    }\n\n    /**\n     * @protected\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} attached\n     * @param {ComponentClass<?>} detached\n     * @param {boolean} dead\n     */\n    entityComponentChangedCallback(entityId, attached, detached, dead) {\n        this.queries.onEntityComponentChanged(this, entityId, attached, detached, dead);\n        for(let callback of this.listeners) {\n            callback(this, entityId, attached, detached, dead);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    addEventListener(event, callback) {\n        if (event === 'change') {\n            this.listeners.push(callback);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    removeEventListener(event, callback) {\n        if (event === 'change') {\n            let i = this.listeners.indexOf(callback);\n            if (i >= 0) {\n                this.listeners.splice(i, 1);\n            }\n        }\n    }\n\n    flush() {\n        while (this.queue.length > 0) {\n            let [type, ...args] = this.queue.shift();\n            switch (type) {\n                case 'attach': {\n                    let [entityId, componentClass, instance] = args;\n                    this.attachImmediately(entityId, componentClass, instance);\n                } break;\n                case 'detach': {\n                    let [entityId, componentClass] = args;\n                    this.detachImmediately(entityId, componentClass);\n                } break;\n                case 'clear': {\n                    let [componentClass] = args;\n                    this.clearImmediately(componentClass);\n                } break;\n            }\n        }\n    }\n\n    /**\n     * @returns {EntityId}\n     */\n    create() {\n        let entityId = this.nextAvailableEntityId++;\n        this.entityComponentChangedCallback(entityId, null, null, false);\n        return entityId;\n    }\n\n    /**\n     * @param {EntityId} entityId \n     */\n    destroy(entityId) {\n        const components = this.components;\n        for (const componentName of Object.keys(components)) {\n            const instanceMap = components[componentName];\n            if (entityId in instanceMap) {\n                delete instanceMap[entityId];\n                this.entityComponentChangedCallback(entityId, null, this.nameClassMapping[componentName], false);\n            }\n        }\n        this.entityComponentChangedCallback(entityId, null, null, true);\n    }\n\n    /**\n     * Whether the entity exists with all provided component classes.\n     * \n     * @param {EntityId} entityId \n     * @param {...ComponentClass<?>} componentClasses\n     */\n    exists(entityId, ...componentClasses) {\n        if (componentClasses.length > 0) {\n            for(const componentClass of componentClasses) {\n                let instanceMap = this.mapOf(componentClass);\n                if (!(entityId in instanceMap)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let instanceMap of Object.values(this.components)) {\n                if (entityId in instanceMap) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attach(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        this.queue.push(['attach', entityId, componentClass, instance]);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attachImmediately(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        let instanceMap = this.mapOf(componentClass);\n        instanceMap[entityId] = instance;\n        this.entityComponentChangedCallback(entityId, componentClass, null, false);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     */\n    detach(entityId, componentClass) {\n        this.queue.push(['detach', entityId, componentClass]);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     */\n    detachImmediately(entityId, componentClass) {\n        let instanceMap = this.mapOf(componentClass);\n        let instance = instanceMap[entityId];\n        delete instanceMap[entityId];\n        componentClass.delete(instance);\n        this.entityComponentChangedCallback(entityId, null, componentClass, false);\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     */\n    clear(componentClass) {\n        this.queue.push(['clear', componentClass]);\n    }\n\n    /**\n     * @param {ComponentClass<any>} componentClass \n     */\n    clearImmediately(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        const instanceMap = components[componentName];\n        let entities = Object.keys(instanceMap).map(Number);\n        let instances = Object.values(instanceMap);\n        components[componentName] = {};\n        this.nameClassMapping[componentName] = componentClass;\n        for(let instance of instances) {\n            componentClass.delete(instance);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, componentClass, false);\n        }\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @returns {T}\n     */\n    get(entityId, componentClass) {\n        return this.mapOf(componentClass)[entityId] || null;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     * @returns {number}\n     */\n    count(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).length;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass\n     */\n    keysOf(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).map(Number);\n    }\n\n    /**\n     * @template T\n     * @param {ComponentClass<T>} componentClass \n     * @returns {Array<T>}\n     */\n    valuesOf(componentClass) {\n        return Object.values(this.mapOf(componentClass));\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {ComponentClass<T>} componentClass\n     * @returns {ComponentInstanceMap<T>} A map of entity ids to component instance data.\n     */\n    mapOf(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        if (!(componentName in components)) {\n            /** @type {ComponentInstanceMap<T>} */\n            let map = {};\n            components[componentName] = map;\n            this.nameClassMapping[componentName] = componentClass;\n            return map;\n        } else {\n            return components[componentName];\n        }\n    }\n\n    /** @returns {Set<EntityId>} */\n    entityIds() {\n        let result = new Set();\n        for (let instanceMap of Object.values(this.components)) {\n            for(let entityId of Object.keys(instanceMap)) {\n                result.add(Number(entityId));\n            }\n        }\n        return result;\n    }\n\n    /** @returns {Array<ComponentClass<?>>} */\n    componentClasses() {\n        return Object.values(this.nameClassMapping);\n    }\n\n    reset() {\n        const components = this.components;\n        /** @type {Set<EntityId>} */\n        let entities = new Set();\n        for(const componentName of Object.keys(components)) {\n            const componentClass = this.nameClassMapping[componentName];\n            const instanceMap = components[componentName];\n            for(let entityId of Object.keys(instanceMap)) {\n                entities.add(Number(entityId));\n            }\n            this.clearImmediately(componentClass);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, null, true);\n        }\n        entities.clear();\n        this.queries.reset();\n        this.components = {};\n        this.nextAvailableEntityId = 1;\n        this.queue.length = 0;\n        this.listeners.length = 0;\n    }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nexport class OrthographicCamera extends Camera {\n  /**\n   * @param {number} [left]\n   * @param {number} [top]\n   * @param {number} [right]\n   * @param {number} [bottom]\n   * @param {number} [near]\n   * @param {number} [far]\n   */\n  constructor(\n    left = undefined,\n    top = undefined,\n    right = undefined,\n    bottom = undefined,\n    near = -1000,\n    far = 1000\n  ) {\n    super(mat4.create(), mat4.create());\n\n    this.orthoBounds = {\n      left: typeof left === 'undefined' ? undefined : Number(left),\n      top: typeof top === 'undefined' ? undefined : Number(top),\n      right: typeof right === 'undefined' ? undefined : Number(right),\n      bottom: typeof bottom === 'undefined' ? undefined : Number(bottom),\n    };\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /**\n   * If both the bounds and viewport dimensions are defined, the orthographic\n   * projection will be set the defined bounds adjusted with respect to\n   * the aspect ratio. This is usually the desired behavior.\n   *\n   * If the bounds are `undefined`, the orthographic projection will\n   * be set to the viewport dimensions. This is useful for pixel-perfect\n   * projections.\n   *\n   * If viewport dimensions are `undefined`, the orthographic projection\n   * will only use the defined bounds. This is useful if you are already\n   * performing your own calculations for the bounds or desire a static\n   * projection.\n   *\n   * @override\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const { near, far } = this.clippingPlane;\n    const { left, top, right, bottom } = this.orthoBounds;\n\n    let projectionMatrix = this.projectionMatrix;\n    let hasViewport = typeof viewportWidth !== 'undefined';\n    let hasBounds = typeof left !== 'undefined';\n\n    if (hasViewport) {\n      if (hasBounds) {\n        // Use the defined bounds with respect to the viewport aspect ratio\n        const aspectRatio = viewportWidth / viewportHeight;\n        mat4.ortho(\n          projectionMatrix,\n          left * aspectRatio,\n          right * aspectRatio,\n          bottom,\n          top,\n          near,\n          far\n        );\n      } else {\n        // Use the viewport dimensions as bounds\n        mat4.ortho(\n          projectionMatrix,\n          0,\n          viewportWidth,\n          viewportHeight,\n          0,\n          near,\n          far\n        );\n      }\n    } else {\n      if (hasBounds) {\n        // Use the defined bounds as-is\n        mat4.ortho(projectionMatrix, left, right, bottom, top, near, far);\n      } else {\n        // Use default bounds (since nothing else exists)\n        mat4.ortho(projectionMatrix, -1, 1, 1, -1, -1, 1);\n      }\n    }\n    return this;\n  }\n}\n"],"names":["UP","vec3","fromValues","Camera","constructor","projectionMatrix","viewMatrix","this","resize","viewportWidth","viewportHeight","DEFAULT_FOVY","Math","PI","TO_RAD_FACTOR","MAX_DEPTH_LEVEL","attach","parentNode","childNode","sceneGraph","nodes","children","push","parent","roots","detach","childIndex","indexOf","splice","rootIndex","walkImpl","level","nodeCallback","filterCallback","result","parentInfo","nextNodes","walkDeleteCallback","sceneNode","QueryManager","cachedResults","keyQueryMapping","onEntityComponentChanged","bind","entityManager","entityId","added","removed","dead","query","Object","values","entities","key","i","hasSelector","Not","test","selectors","selector","isSelectorNot","componentClass","value","exists","hydrate","out","length","entityIds","findAll","queryKey","count","clear","reset","type","name","Query","Error","map","s","sort","join","computeSelectorKey","findIndex","v","queries","findEntityIds","queryManager","findComponents","get","computeResult","ents","componentClasses","entries","Topic","dispatch","topicManager","attachment","dispatchImmediately","on","priority","callback","addEventListener","off","removeEventListener","once","wrapper","poll","amount","min","retain","pollAndRetain","comparator","a","b","opts","animationFrameHandler","window","handle","detail","prevTime","currentTime","deltaTime","next","start","cancel","running","now","performance","requestAnimationFrame","d","cancelAnimationFrame","componentMap","super","create","instance","destroy","find","findAny","floor","random","async","dispatchImmediatelyAndWait","newCallback","deleteCallback","new","delete","components","nameClassMapping","nextAvailableEntityId","queue","listeners","entityComponentChangedCallback","attached","detached","event","flush","args","shift","attachImmediately","detachImmediately","clearImmediately","componentName","keys","instanceMap","mapOf","Number","instances","keysOf","valuesOf","Set","add","locky","position","forward","right","up","forwardAmount","rightAmount","upAmount","pitch","yaw","look","dx","dy","dt","max","move","apply","rady","radp","cosy","cos","cosp","siny","sin","dz","normalize","set","cross","scale","target","mat4","lookAt","left","top","bottom","near","far","orthoBounds","undefined","clippingPlane","hasBounds","aspectRatio","ortho","fieldOfView","perspective","_nextAvailableSceneNodeId","createSceneNode","info","createSceneNodes","deleteSceneNode","deleteSceneNodes","sceneNodes","getSceneNodeInfo","parentSceneNode","replaceSceneNode","replacementNode","grandChildren","slice","replacementInfo","walk","from","childFilter","fromNodes","Array","isArray","fromNode","cachedIn","cachedOut","callbacks","maxRetains","nameTopicMapping","topic","callbacksOf","countEventListeners","incomingOf","outgoingOf","outgoing","topicName","maxPerTopic","incoming","getPendingRetainCount","getPendingFlushCount","x","y","z","rotation","quat","getTranslation","getRotation","targetRotation","slerp","fromRotationTranslation","translation","translate","normalizedScreenCoordX","normalizedScreenCoordY","normalized","vec4","m","invert","transformMat4"],"mappings":"0TAEA,MAAMA,EAAKC,EAAIA,KAACC,WAAW,EAAG,EAAG,GCF1B,MAAMC,EACXC,YAAYC,EAAkBC,GAC5BC,KAAKF,iBAAmBA,EACxBE,KAAKD,WAAaA,CACnB,CASDE,OAAOC,EAA2BC,GAChC,OAAOH,IACR,ECZH,MAAMI,EAAeC,KAAKC,GAAK,ECD/B,MAAMC,EAAgBF,KAAKC,GAAK,ICFhC,MAAME,EAAkB,IAiOxB,SAASC,EAAOC,EAAYC,EAAWC,GACjCF,GAEFE,EAAWC,MAAMH,GAAYI,SAASC,KAAKJ,GAC3CC,EAAWC,MAAMF,GAAWK,OAASN,IAGrCE,EAAWK,MAAMF,KAAKJ,GACtBC,EAAWC,MAAMF,GAAWK,OAAS,EAEzC,CAUA,SAASE,EAAOR,EAAYC,EAAWC,GACrC,GAAIF,EAAY,CAEd,IAAII,EAAWF,EAAWC,MAAMH,GAAYI,SACxCK,EAAaL,EAASM,QAAQT,GAClCG,EAASO,OAAOF,EAAY,GAC5BP,EAAWC,MAAMF,GAAWD,WAAa,CAC7C,KAAS,CAEL,IAAIO,EAAQL,EAAWK,MACnBK,EAAYL,EAAMG,QAAQT,GAC9BM,EAAMI,OAAOC,EAAW,GACxBV,EAAWC,MAAMF,GAAWD,WAAa,CAC1C,CACH,CAYA,SAASa,EACPX,EACAF,EACAc,EACAC,EACAC,GAEA,GAAIF,GAAShB,EAAiB,OAE9B,IAAImB,EAASF,EAAaf,EAAYE,GACtC,IAAe,IAAXe,EAAkB,OAEtB,IAAIC,EAAahB,EAAWC,MAAMH,GAC9BmB,EAAYH,EACZA,EAAeE,EAAWd,SAAUJ,EAAYE,GAChDgB,EAAWd,SAEf,IAAK,IAAIH,KAAakB,EACpBN,EAASX,EAAYD,EAAWa,EAAQ,EAAGC,EAAcC,GAGrC,mBAAXC,GACTA,EAAOjB,EAAYE,EAEvB,CAEA,SAASkB,EAAmBC,EAAWnB,UAC9BA,EAAWC,MAAMkB,EAC1B,CCtSO,MAAMC,EAETnC,cAKIG,KAAKiC,cAAgB,GAKrBjC,KAAKkC,gBAAkB,GAEvBlC,KAAKmC,yBAA2BnC,KAAKmC,yBAAyBC,KAAKpC,KACtE,CASDmC,yBAAyBE,EAAeC,EAAUC,EAAOC,EAASC,GAC9D,IAAI,IAAIC,KAASC,OAAOC,OAAO5C,KAAKkC,iBAAkB,CAClD,IAAIW,EAAW7C,KAAKiC,cAAcS,EAAMI,KACxC,GAAIL,EAAM,CACN,IAAIM,EAAIF,EAASzB,QAAQkB,GACrBS,GAAK,GACLF,EAASxB,OAAO0B,EAAG,EAE1B,MAAM,GAAIR,GACP,GAAIG,EAAMM,YAAYC,EAAIV,IAAS,CAC/B,IAAIQ,EAAIF,EAASzB,QAAQkB,GACrBS,GAAK,GACLF,EAASxB,OAAO0B,EAAG,EAE1B,MAAM,GAAIL,EAAMM,YAAYT,IAAUvC,KAAKkD,KAAKb,EAAeC,EAAUI,EAAMS,WAAY,CAChFN,EAASzB,QAAQkB,GACjB,GACJO,EAAS9B,KAAKuB,EAErB,OACE,GAAIE,EACP,GAAIE,EAAMM,YAAYC,EAAIT,KAAaxC,KAAKkD,KAAKb,EAAeC,EAAUI,EAAMS,WAAY,CAChFN,EAASzB,QAAQkB,GACjB,GACJO,EAAS9B,KAAKuB,EAErB,MAAM,GAAII,EAAMM,YAAYR,IAAYxC,KAAKkD,KAAKb,EAAeC,EAAUI,EAAMS,WAAY,CAC1F,IAAIJ,EAAIF,EAASzB,QAAQkB,GACrBS,GAAK,GACLF,EAASxB,OAAO0B,EAAG,EAE1B,CAER,CACJ,CAQDG,KAAKb,EAAeC,EAAUa,GAC1B,IAAI,IAAIC,KAAYD,EAChB,GAAIE,EAAcD,GAAW,CACzB,MAAME,EAA+C,EAAoCC,MACzF,GAAIlB,EAAcmB,OAAOlB,EAAUgB,GAC/B,OAAO,CAE3B,KAAmB,CACH,MAAMA,EAA2E,EACjF,IAAKjB,EAAcmB,OAAOlB,EAAUgB,GAChC,OAAO,CAEd,CAEL,OAAO,CACV,CAQDG,QAAQC,EAAKrB,EAAec,GACxB,GAAIA,EAAUQ,QAAU,EAEpB,OADAD,EAAIC,OAAS,EACND,EAEX,IAAIb,EAAWR,EAAcuB,YAC7B,IAAI,IAAItB,KAAYO,EACZ7C,KAAKkD,KAAKb,EAAeC,EAAUa,IACnCO,EAAI3C,KAAKuB,GAGjB,OAAOoB,CACV,CAODG,QAAQxB,EAAeK,GACnB,MAAMoB,EAAWpB,EAAMI,IACvB,IAAInB,EASJ,OARMmC,KAAY9D,KAAKkC,gBAMnBP,EAAS3B,KAAKiC,cAAc6B,IAL5BnC,EAAS,GACT3B,KAAKkC,gBAAgB4B,GAAYpB,EACjC1C,KAAKiC,cAAc6B,GAAYnC,EAC/B3B,KAAKyD,QAAQ9B,EAAQU,EAAeK,EAAMS,YAIvCxB,CACV,CAMDoC,MAAM1B,EAAeK,GAEjB,OADa1C,KAAK6D,QAAQxB,EAAeK,GAC3BiB,MACjB,CAKDK,MAAMtB,GACF,MAAMoB,EAAWpB,EAAMI,IACjBgB,KAAY9D,KAAKkC,yBAGhBlC,KAAKkC,gBAAgB4B,UACrB9D,KAAKiC,cAAc6B,GAC7B,CAEDG,QACIjE,KAAKkC,gBAAkB,GACvBlC,KAAKiC,cAAgB,EACxB,EAqBE,SAASgB,EAAIK,GAChB,MAAO,CAEHY,KAAM,MACNC,KAAMb,EAAea,KACrBZ,MAAOD,EAEf,CAEO,SAASD,EAAcD,GAC1B,MAAO,SAAUA,GAA8B,QAAlBA,EAASc,IAC1C,CCvKO,MAAME,EAKTvE,eAAesD,GACX,GAAIA,EAAUQ,QAAU,EACpB,MAAM,IAAIU,MAAM,4CAEpBrE,KAAKmD,UAAYA,EACjBnD,KAAK8C,IAqDb,SAA4BK,GACxB,OAAOA,EAAUmB,KAAIC,GAAKlB,EAAckB,GAAK,IAAIA,EAAEJ,OAASI,EAAEJ,OAAMK,OAAOC,KAAK,IACpF,CAvDmBC,CAAmBvB,EACjC,CAKDH,YAAYI,GACR,OAAIC,EAAcD,GACPpD,KAAKmD,UAAUwB,WAAUC,GAAKvB,EAAcuB,IAAMA,EAAET,OAASf,EAASe,QAAS,EAE/EnE,KAAKmD,UAAUwB,WAAUC,GAAKA,EAAET,OAASf,EAASe,QAAS,CAEzE,CAMDJ,MAAM1B,GACF,OAAOA,EAAcwC,QAAQd,MAAM1B,EAAerC,KACrD,CAMD8E,eAAezC,GACX,MAAM0C,EAAe1C,EAAcwC,QACnC,IAAI,IAAIvC,KAAYyC,EAAalB,QAAQxB,EAAerC,YAC9CsC,CAEb,CAQD0C,gBAAgB3C,EAAeiB,GAC3B,GAAItD,KAAKmD,UAAU/B,QAAQkC,GAAkB,EACzC,MAAM,IAAIe,MAAM,oCAAoCf,EAAea,uBAEvE,MAAMY,EAAe1C,EAAcwC,QACnC,IAAI,IAAIvC,KAAYyC,EAAalB,QAAQxB,EAAerC,YAC9CqC,EAAc4C,IAAI3C,EAAUgB,EAEzC,EC2BL,SAAS4B,EAAcxB,EAAKyB,EAAM7C,EAAU8C,GACxC,IAAI,IAAKtC,EAAKQ,KAAmBX,OAAO0C,QAAQD,GACxC/B,EAAcC,GACdI,EAAIZ,GAAO,KAEXY,EAAIZ,GAAOqC,EAAKF,IAAI3C,EAAUgB,GAGtC,OAAOI,CACX,CCnGO,MAAM4B,EAKTzF,YAAYsE,GACRnE,KAAKmE,KAAOA,CACf,CAMDoB,SAASC,EAAcC,GACnBD,EAAaD,SAASvF,KAAMyF,EAC/B,CAMDC,oBAAoBF,EAAcC,GAC9BD,EAAaE,oBAAoB1F,KAAMyF,EAC1C,CAODE,GAAGH,EAAcI,EAAUC,GAEvB,OADAL,EAAaM,iBAAiB9F,KAAM6F,EAAU,CAAED,aACzC5F,IACV,CAMD+F,IAAIP,EAAcK,GAEd,OADAL,EAAaQ,oBAAoBhG,KAAM6F,GAChC7F,IACV,CAODiG,KAAKT,EAAcI,EAAUC,GACzB,IAAIK,EAAWT,IACXzF,KAAK+F,IAAIP,EAAcU,GAChBL,EAASJ,IAEpB,OAAOzF,KAAK2F,GAAGH,EAAcI,EAAUM,EAC1C,CAMDC,MAAMX,EAAcY,GAChBA,EAAS/F,KAAKgG,IAAID,EAAQZ,EAAazB,MAAM/D,OAC7C,IAAI,IAAI+C,EAAI,EAAGA,EAAIqD,IAAUrD,QACnByC,EAAaW,KAAKnG,KAE/B,CAMDsG,OAAOd,EAAcY,GACjBZ,EAAac,OAAOtG,KAAMoG,EAC7B,CAMDG,eAAef,EAAcY,GACzBpG,KAAKsG,OAAOd,EAAcY,GAC1B,IAAI,IAAIzE,KAAU3B,KAAKmG,KAAKX,EAAcY,SAChCzE,CAEb,ECzEL,SAAS6E,EAAWC,EAAGC,GACnB,OAAOD,EAAEb,SAAWc,EAAEd,QAC1B,sBCfO,MAOH/F,YAAYgG,EAAUc,GAClB,MAAMC,sBAAEA,EAAwBC,QAAWF,GAAQ,CAAA,EAGnD3G,KAAK8G,OAAS,EAEd9G,KAAK+G,OAAS,CACVC,UAAW,EACXC,aAAc,EACdC,UAAW,GAIflH,KAAK4G,sBAAwBA,EAG7B5G,KAAK6F,SAAWA,EAEhB7F,KAAKmH,KAAOnH,KAAKmH,KAAK/E,KAAKpC,MAC3BA,KAAKoH,MAAQpH,KAAKoH,MAAMhF,KAAKpC,MAC7BA,KAAKqH,OAASrH,KAAKqH,OAAOjF,KAAKpC,KAClC,CAEGsH,cACA,OAAuB,IAAhBtH,KAAK8G,MACf,CAEDK,KAAKI,EAAMC,YAAYD,OACnBvH,KAAK8G,OAAS9G,KAAK4G,sBAAsBa,sBAAsBzH,KAAKmH,MACpE,IAAIO,EAAI1H,KAAK+G,OACbW,EAAEV,SAAWU,EAAET,YACfS,EAAET,YAAcM,EAChBG,EAAER,UAAYQ,EAAET,YAAcS,EAAEV,SAChChH,KAAK6F,SAAS7F,KACjB,CAEDoH,QAEI,OADApH,KAAK8G,OAAS9G,KAAK4G,sBAAsBa,sBAAsBzH,KAAKmH,MAC7DnH,IACV,CAEDqH,SAEI,OADArH,KAAK4G,sBAAsBe,qBAAqB3H,KAAK8G,QAC9C9G,IACV,eH3CE,cAAwBoE,EAK3BvE,YAAY+H,GACRC,SAASlF,OAAOC,OAAOgF,IAEvB5H,KAAKoF,iBAAmBwC,CAC3B,CAMDE,OAAO3C,GACH,IAAI7C,EAAW6C,EAAK2C,SAChBnG,EAAS,CAAA,EACb,IAAI,IAAKmB,EAAKQ,KAAmBX,OAAO0C,QAAQrF,KAAKoF,kBAAmB,CACpE,IAAI2C,EAAW5C,EAAK1E,OAAO6B,EAAUgB,GACrC3B,EAAOmB,GAAOiF,CACjB,CACD,OAAA,CACH,CAMDC,QAAQ7C,EAAM7C,GACV,IAAK,IAAIgB,KAAkBX,OAAOC,OAAO5C,KAAKoF,kBAC1CD,EAAKjE,OAAOoB,EAAUgB,EAE7B,CAOD2E,KAAK9C,EAAM7C,GACP,OAAiB,OAAbA,EACA,CAA0D,EAEvD4C,EAAc,CAAA,EAAIC,EAAM7C,EAAUtC,KAAKoF,iBACjD,CAMD8C,QAAQ/C,GAEJ,IAAItC,EADiBsC,EAAKN,QACEhB,QAAQsB,EAAMnF,MAC1C,OAAI6C,EAASc,QAAU,EACnB,CAA0D,EAGvDuB,EAAc,CAAA,EAAIC,EADVtC,EAASxC,KAAK8H,MAAM9H,KAAK+H,SAAWvF,EAASc,SACnB3D,KAAKoF,iBACjD,CAMDvB,SAASsB,GAEL,IAAIxD,EAAS,CAAA,EACTkB,EAFiBsC,EAAKN,QAEEhB,QAAQsB,EAAMnF,MAC1C,IAAI,IAAIsC,KAAYO,QACVqC,EAAcvD,EAAQwD,EAAM7C,EAAUtC,KAAKoF,iBAExD,gBI/EE,cAAyBE,EAK5BzF,YAAYsE,GACR0D,MAAM1D,EACT,CAODkE,eAAe7C,EAAcC,GAEzB,MAAM,IAAIpB,MAAM,sBACnB,CAODgE,0BAA0B7C,EAAcC,SAE9BD,EAAa8C,2BAA2BtI,KAAMyF,EACvD,CASDE,GAAGH,EAAcI,EAAUC,GAEvB,OAAOgC,MAAMlC,GAAGH,EAAcI,EAAUC,EAC3C,CAQDE,IAAIP,EAAcK,GAEd,OAAOgC,MAAM9B,IAAIP,EAAcK,EAClC,CASDI,KAAKT,EAAcI,EAAUC,GAEzB,OAAOgC,MAAM5B,KAAKT,EAAcI,EAAUC,EAC7C,+BCrEE,MAMHhG,YAAYsE,EAAMoE,EAAc,KAAM,MAAMC,EAAiB,UACzDxI,KAAKmE,KAAOA,EACZnE,KAAKyI,IAAMF,EACXvI,KAAK0I,OAASF,CACjB,mBCUE,MAEH3I,cAKIG,KAAK2I,WAAa,GAElB3I,KAAK4I,iBAAmB,GAKxB5I,KAAK6I,sBAAwB,EAK7B7I,KAAK8I,MAAQ,GAEb9I,KAAK+I,UAAY,GACjB/I,KAAK6E,QAAU,IAAI7C,CACtB,CASDgH,+BAA+B1G,EAAU2G,EAAUC,EAAUzG,GACzDzC,KAAK6E,QAAQ1C,yBAAyBnC,KAAMsC,EAAU2G,EAAUC,EAAUzG,GAC1E,IAAI,IAAIoD,KAAY7F,KAAK+I,UACrBlD,EAAS7F,KAAMsC,EAAU2G,EAAUC,EAAUzG,EAEpD,CAMDqD,iBAAiBqD,EAAOtD,GACN,WAAVsD,GACAnJ,KAAK+I,UAAUhI,KAAK8E,EAE3B,CAMDG,oBAAoBmD,EAAOtD,GACvB,GAAc,WAAVsD,EAAoB,CACpB,IAAIpG,EAAI/C,KAAK+I,UAAU3H,QAAQyE,GAC3B9C,GAAK,GACL/C,KAAK+I,UAAU1H,OAAO0B,EAAG,EAEhC,CACJ,CAEDqG,QACI,KAAOpJ,KAAK8I,MAAMnF,OAAS,GAAG,CAC1B,IAAKO,KAASmF,GAAQrJ,KAAK8I,MAAMQ,QACjC,OAAQpF,GACJ,IAAK,SAAU,CACX,IAAK5B,EAAUgB,EAAgByE,GAAYsB,EAC3CrJ,KAAKuJ,kBAAkBjH,EAAUgB,EAAgByE,EACrE,CAAkB,MACF,IAAK,SAAU,CACX,IAAKzF,EAAUgB,GAAkB+F,EACjCrJ,KAAKwJ,kBAAkBlH,EAAUgB,EACrD,CAAkB,MACF,IAAK,QAAS,CACV,IAAKA,GAAkB+F,EACvBrJ,KAAKyJ,iBAAiBnG,EAC1C,EAES,CACJ,CAKDwE,SACI,IAAIxF,EAAWtC,KAAK6I,wBAEpB,OADA7I,KAAKgJ,+BAA+B1G,EAAU,KAAM,MAAM,GACnDA,CACV,CAKD0F,QAAQ1F,GACJ,MAAMqG,EAAa3I,KAAK2I,WACxB,IAAK,MAAMe,KAAiB/G,OAAOgH,KAAKhB,GAAa,CACjD,MAAMiB,EAAcjB,EAAWe,GAC3BpH,KAAYsH,WACLA,EAAYtH,GACnBtC,KAAKgJ,+BAA+B1G,EAAU,KAAMtC,KAAK4I,iBAAiBc,IAAgB,GAEjG,CACD1J,KAAKgJ,+BAA+B1G,EAAU,KAAM,MAAM,EAC7D,CAQDkB,OAAOlB,KAAa8C,GAChB,GAAIA,EAAiBzB,OAAS,EAAG,CAC7B,IAAI,MAAML,KAAkB8B,EAAkB,CAE1C,KAAM9C,KADYtC,KAAK6J,MAAMvG,IAEzB,OAAO,CAEd,CACD,OAAO,CACnB,CACY,IAAK,IAAIsG,KAAejH,OAAOC,OAAO5C,KAAK2I,YACvC,GAAIrG,KAAYsH,EACZ,OAAO,EAInB,OAAO,CACV,CASDnJ,OAAO6B,EAAUgB,EAAgByE,GAK7B,YAJwB,IAAbA,IACPA,EAAWzE,EAAemF,OAE9BzI,KAAK8I,MAAM/H,KAAK,CAAC,SAAUuB,EAAUgB,EAAgByE,IAC9CA,CACV,CASDwB,kBAAkBjH,EAAUgB,EAAgByE,GAOxC,YANwB,IAAbA,IACPA,EAAWzE,EAAemF,OAEZzI,KAAK6J,MAAMvG,GACjBhB,GAAYyF,EACxB/H,KAAKgJ,+BAA+B1G,EAAUgB,EAAgB,MAAM,GAC7DyE,CACV,CAOD7G,OAAOoB,EAAUgB,GACbtD,KAAK8I,MAAM/H,KAAK,CAAC,SAAUuB,EAAUgB,GACxC,CAODkG,kBAAkBlH,EAAUgB,GACxB,IAAIsG,EAAc5J,KAAK6J,MAAMvG,GACzByE,EAAW6B,EAAYtH,UACpBsH,EAAYtH,GACnBgB,EAAeoF,OAAOX,GACtB/H,KAAKgJ,+BAA+B1G,EAAU,KAAMgB,GAAgB,EACvE,CAKDU,MAAMV,GACFtD,KAAK8I,MAAM/H,KAAK,CAAC,QAASuC,GAC7B,CAKDmG,iBAAiBnG,GACb,MAAMoG,EAAgBpG,EAAea,KAC/BwE,EAAa3I,KAAK2I,WAClBiB,EAAcjB,EAAWe,GAC/B,IAAI7G,EAAWF,OAAOgH,KAAKC,GAAatF,IAAIwF,QACxCC,EAAYpH,OAAOC,OAAOgH,GAC9BjB,EAAWe,GAAiB,GAC5B1J,KAAK4I,iBAAiBc,GAAiBpG,EACvC,IAAI,IAAIyE,KAAYgC,EAChBzG,EAAeoF,OAAOX,GAE1B,IAAI,IAAIzF,KAAYO,EAChB7C,KAAKgJ,+BAA+B1G,EAAU,KAAMgB,GAAgB,EAE3E,CAQD2B,IAAI3C,EAAUgB,GACV,OAAOtD,KAAK6J,MAAMvG,GAAgBhB,IAAa,IAClD,CAMDyB,MAAMT,GACF,OAAOX,OAAOgH,KAAK3J,KAAK6J,MAAMvG,IAAiBK,MAClD,CAKDqG,OAAO1G,GACH,OAAOX,OAAOgH,KAAK3J,KAAK6J,MAAMvG,IAAiBgB,IAAIwF,OACtD,CAODG,SAAS3G,GACL,OAAOX,OAAOC,OAAO5C,KAAK6J,MAAMvG,GACnC,CAQDuG,MAAMvG,GACF,MAAMoG,EAAgBpG,EAAea,KAC/BwE,EAAa3I,KAAK2I,WACxB,GAAMe,KAAiBf,EAOnB,OAAOA,EAAWe,GAPc,CAEhC,IAAIpF,EAAM,CAAA,EAGV,OAFAqE,EAAWe,GAAiBpF,EAC5BtE,KAAK4I,iBAAiBc,GAAiBpG,EAChCgB,CACnB,CAGK,CAGDV,YACI,IAAIjC,EAAS,IAAIuI,IACjB,IAAK,IAAIN,KAAejH,OAAOC,OAAO5C,KAAK2I,YACvC,IAAI,IAAIrG,KAAYK,OAAOgH,KAAKC,GAC5BjI,EAAOwI,IAAIL,OAAOxH,IAG1B,OAAOX,CACV,CAGDyD,mBACI,OAAOzC,OAAOC,OAAO5C,KAAK4I,iBAC7B,CAED3E,QACI,MAAM0E,EAAa3I,KAAK2I,WAExB,IAAI9F,EAAW,IAAIqH,IACnB,IAAI,MAAMR,KAAiB/G,OAAOgH,KAAKhB,GAAa,CAChD,MAAMrF,EAAiBtD,KAAK4I,iBAAiBc,GACvCE,EAAcjB,EAAWe,GAC/B,IAAI,IAAIpH,KAAYK,OAAOgH,KAAKC,GAC5B/G,EAASsH,IAAIL,OAAOxH,IAExBtC,KAAKyJ,iBAAiBnG,EACzB,CACD,IAAI,IAAIhB,KAAYO,EAChB7C,KAAKgJ,+BAA+B1G,EAAU,KAAM,MAAM,GAE9DO,EAASmB,QACThE,KAAK6E,QAAQZ,QACbjE,KAAK2I,WAAa,GAClB3I,KAAK6I,sBAAwB,EAC7B7I,KAAK8I,MAAMnF,OAAS,EACpB3D,KAAK+I,UAAUpF,OAAS,CAC3B,iCV3TE,MACL9D,YAAY8G,EAAO,CAAEyD,OAAO,IAC1BpK,KAAKoK,MAAQzD,EAAKyD,MAElBpK,KAAKqK,SAAW3K,OAAKoI,SACrB9H,KAAKsK,QAAU5K,OAAKC,WAAW,EAAG,GAAI,GACtCK,KAAKuK,MAAQ7K,OAAKC,WAAW,EAAG,EAAG,GACnCK,KAAKwK,GAAK9K,OAAKC,WAAW,EAAG,EAAG,GAEhCK,KAAKyK,cAAgB,EACrBzK,KAAK0K,YAAc,EACnB1K,KAAK2K,SAAW,EAEhB3K,KAAK4K,MAAQ,EACb5K,KAAK6K,KAAO,EACb,CAEDC,KAAKC,EAAIC,EAAIC,EAAK,GAKhB,OAHAA,GAAM,IACNjL,KAAK4K,MAAQvK,KAAKgG,IAAI,KAAMhG,KAAK6K,KAAK,KAAMlL,KAAK4K,MAAQI,EAAKC,IAC9DjL,KAAK6K,KAAO7K,KAAK6K,IAAME,EAAKE,GAAM,IAC3BjL,IACR,CAEDmL,KAAKb,EAASC,EAAQ,EAAGC,EAAK,EAAGS,EAAK,GAIpC,OAHAjL,KAAKyK,eAAiBH,EAAUW,EAChCjL,KAAK0K,aAAeH,EAAQU,EAC5BjL,KAAK2K,UAAYH,EAAKS,EACfjL,IACR,CAEDoL,MAAMrL,GACJ,IAAIsK,SACFA,EAAQC,QACRA,EAAOC,MACPA,EAAKC,GACLA,EAAEC,cACFA,EAAaC,YACbA,EAAWC,SACXA,EAAQC,MACRA,EAAKC,IACLA,GACE7K,KAGAqL,EAAOR,EAAMtK,EACb+K,EAAOV,EAAQrK,EACfgL,EAAOlL,KAAKmL,IAAIH,GAChBI,EAAOpL,KAAKmL,IAAIF,GAChBI,EAAOrL,KAAKsL,IAAIN,GAEhBN,EAAKQ,EAAOE,EACZT,EAFO3K,KAAKsL,IAAIL,GAGhBM,EAAKF,EAAOD,EAGhB/L,EAAAA,KAAKmM,UAAUvB,EAAS5K,EAAIA,KAACoM,IAAIxB,EAASS,EAAI/K,KAAKoK,MAAQ,EAAIY,EAAIY,IACnElM,OAAKmM,UAAUtB,EAAO7K,EAAIA,KAACqM,MAAMxB,EAAOD,EAASE,IAEjD,IAAIW,EAAOzL,OAAKoI,SAEhBpI,EAAAA,KAAKsM,MAAMb,EAAMb,EAASG,GAC1B/K,EAAAA,KAAKyK,IAAIE,EAAUA,EAAUc,GAE7BzL,EAAAA,KAAKsM,MAAMb,EAAMZ,EAAOG,GACxBhL,EAAAA,KAAKyK,IAAIE,EAAUA,EAAUc,GAE7BzL,EAAAA,KAAKsM,MAAMb,EAAMX,EAAIG,GACrBjL,EAAAA,KAAKyK,IAAIE,EAAUA,EAAUc,GAE7BnL,KAAKyK,cAAgB,EACrBzK,KAAK0K,YAAc,EACnB1K,KAAK2K,SAAW,EAGZ3K,KAAKoK,OAAO1K,OAAKoM,IAAIxB,EAASS,EAAIC,EAAIY,GAE1C,IAAIK,EAASvM,EAAAA,KAAKyK,IAAIgB,EAAMd,EAAUC,GAEtC,OADA4B,EAAIA,KAACC,OAAOpM,EAAYsK,EAAU4B,EAAQzB,GACnCzK,CACR,gCWxFI,cAAiCH,EAStCC,YACEuM,EACAC,EACA9B,EACA+B,EACAC,GAAO,IACPC,EAAM,KAEN3E,MAAMqE,EAAIA,KAACpE,SAAUoE,EAAAA,KAAKpE,UAE1B9H,KAAKyM,YAAc,CACjBL,UAAsB,IAATA,OAAuBM,EAAY5C,OAAOsC,GACvDC,SAAoB,IAARA,OAAsBK,EAAY5C,OAAOuC,GACrD9B,WAAwB,IAAVA,OAAwBmC,EAAY5C,OAAOS,GACzD+B,YAA0B,IAAXA,OAAyBI,EAAY5C,OAAOwC,IAE7DtM,KAAK2M,cAAgB,CACnBJ,KAAMzC,OAAOyC,GACbC,IAAK1C,OAAO0C,GAEf,CAoBDvM,OAAOC,EAA2BC,GAChC,MAAMoM,KAAEA,EAAIC,IAAEA,GAAQxM,KAAK2M,eACrBP,KAAEA,EAAIC,IAAEA,EAAG9B,MAAEA,EAAK+B,OAAEA,GAAWtM,KAAKyM,YAE1C,IAAI3M,EAAmBE,KAAKF,iBAExB8M,OAA4B,IAATR,EAEvB,QAH2C,IAAlBlM,EAIvB,GAAI0M,EAAW,CAEb,MAAMC,EAAc3M,EAAgBC,EACpC+L,EAAAA,KAAKY,MACHhN,EACAsM,EAAOS,EACPtC,EAAQsC,EACRP,EACAD,EACAE,EACAC,EAEV,MAEQN,EAAAA,KAAKY,MACHhN,EACA,EACAI,EACAC,EACA,EACAoM,EACAC,QAIAI,EAEFV,OAAKY,MAAMhN,EAAkBsM,EAAM7B,EAAO+B,EAAQD,EAAKE,EAAMC,GAG7DN,EAAAA,KAAKY,MAAMhN,GAAmB,EAAG,EAAG,GAAI,GAAI,EAAG,GAGnD,OAAOE,IACR,uBZ1FI,cAAgCJ,EACrCC,YAAYkN,EAAc3M,EAAcmM,EAAO,GAAKC,EAAM,KACxD3E,MAAMqE,EAAIA,KAACpE,SAAUoE,EAAAA,KAAKpE,UAE1B9H,KAAK+M,YAAcjD,OAAOiD,GAC1B/M,KAAK2M,cAAgB,CACnBJ,KAAMzC,OAAOyC,GACbC,IAAK1C,OAAO0C,GAEf,CAGDvM,OAAOC,EAA2BC,GAChC,MAAM0M,OACqB,IAAlB3M,EAAgC,EAAIA,EAAgBC,GACvDoM,KAAEA,EAAIC,IAAEA,GAAQxM,KAAK2M,cAQ3B,OAPAT,EAAAA,KAAKc,YACHhN,KAAKF,iBACLE,KAAK+M,YACLF,EACAN,EACAC,GAEKxM,IACR,2CEII,MAILH,cACEG,KAAKa,MAAQ,GACbb,KAAKiB,MAAQ,GAEbjB,KAAKiN,0BAA4B,CAClC,CASDC,gBAAgBxM,GACd,IAAIqB,EAAY/B,KAAKiN,4BACjBE,EA8JC,CACLnM,OAAQ,EACRF,SAAU,IA7JV,OAFAd,KAAKa,MAAMkB,GAAaoL,EACxB1M,EAAOC,EAAYqB,EAAW/B,MACvB+B,CACR,CAUDqL,iBAAiBrJ,EAAOrD,GACtB,IAAIiB,EAAS,GACb,IAAK,IAAIoB,EAAI,EAAGA,EAAIgB,IAAShB,EAC3BpB,EAAOZ,KAAKf,KAAKkN,gBAAgBxM,IAEnC,OAAOiB,CACR,CAQD0L,gBAAgBtL,GACd,KAAIA,KAAa/B,KAAKa,OAKpB,MAAM,IAAIwD,MAAM,0DAHhBnD,EADWlB,KAAKa,MAAMkB,GACVf,OAAQe,EAAW/B,MAC/BuB,EAASvB,KAAM+B,EAAW,EAAGD,EAIhC,CAQDwL,iBAAiBC,GACf,IAAK,IAAIxL,KAAawL,EACpBvN,KAAKqN,gBAAgBtL,EAExB,CAQDyL,iBAAiBzL,GACf,OAAO/B,KAAKa,MAAMkB,EACnB,CASD0L,gBAAgB1L,EAAWrB,GAEzBQ,EADWlB,KAAKa,MAAMkB,GACVf,OAAQe,EAAW/B,MAC/BS,EAAOC,EAAYqB,EAAW/B,KAC/B,CAYD0N,iBAAiB3L,EAAW4L,GAC1B,IAAIR,EAAOnN,KAAKa,MAAMkB,GAClBrB,EAAayM,EAAKnM,OAClB4M,EAAgBT,EAAKrM,SAAS+M,QAQlC,GALA3M,EAAOR,EAAYqB,EAAW/B,MAG9BmN,EAAKrM,SAAS6C,OAAS,EAEnBgK,EAAiB,CAEnB,IAAIG,EAAkB9N,KAAKa,MAAM8M,GAIjCzM,EAHwB4M,EAAgB9M,OAGd2M,EAAiB3N,MAG3C8N,EAAgBhN,SAASC,QAAQ6M,GAGjCnN,EAAOC,EAAYiN,EAAiB3N,KAC1C,MAEM,GAAIU,EAAY,CAEGV,KAAKa,MAAMH,GACjBI,SAASC,QAAQ6M,EACpC,MAEQ5N,KAAKiB,MAAMF,QAAQ6M,GAKvB,IAAK,IAAIjN,KAAaiN,EACpB5N,KAAKa,MAAMF,GAAWK,OAASN,CAElC,CAeDqN,KAAKlI,EAAUc,GACb,MAAMqH,KAAEA,EAAgBC,YAAEA,GAA4BtH,GAAQ,GAE9D,IAAIuH,EAGCA,EAFAF,EACKG,MAAMC,QAAQJ,GACPA,EAD0B,CAACA,GADrBhO,KAAKiB,MAIxBgN,IAAaC,EAAYD,EAAYC,EAAW,EAAGlO,OACvD,IAAK,IAAIqO,KAAYH,EACnB3M,EAASvB,KAAMqO,EAAU,EAAGxI,EAAUoI,EAEzC,4BK7KI,MAEHpO,cAKIG,KAAKsO,SAAW,GAKhBtO,KAAKuO,UAAY,GAKjBvO,KAAKwO,UAAY,GAKjBxO,KAAKyO,WAAa,GAKlBzO,KAAK0O,iBAAmB,EAC3B,CASD5I,iBAAiB6I,EAAO9I,EAAUc,GAC9B,MAAMf,SAAEA,EAAW,GAAMe,EACzB,IAAI6H,EAAYxO,KAAK4O,YAAYD,GACjCH,EAAUzN,KAAK,CACX8E,WACAD,aAEJ4I,EAAUhK,KAAKgC,EAClB,CAODR,oBAAoB2I,EAAO9I,GACvB,IAAI2I,EAAYxO,KAAK4O,YAAYD,GAC7B5L,EAAIyL,EAAU7J,WAAUC,GAAKA,EAAEiB,WAAaA,IAC5C9C,GAAK,GACLyL,EAAUnN,OAAO0B,EAAG,EAE3B,CAKD8L,oBAAoBF,GAChB,OAAO3O,KAAK4O,YAAYD,GAAOhL,MAClC,CAOD4B,SAASoJ,EAAOlJ,GACGzF,KAAK8O,WAAWH,GACtB5N,KAAK0E,EACjB,CAODC,oBAAoBiJ,EAAOlJ,GACvB,IAAI+I,EAAYxO,KAAK4O,YAAYD,GACjC,IAAI,IAAI9I,SAAEA,KAAc2I,EAAW,CAE/B,IAAe,IADF3I,EAASJ,GAElB,MAEP,CACczF,KAAK+O,WAAWJ,GACtB5N,KAAK0E,EACjB,CAOD4C,iCAAiCsG,EAAOlJ,GACpC,IAAI+I,EAAYxO,KAAK4O,YAAYD,GACjC,IAAI,IAAI9I,SAAEA,KAAc2I,EAAW,CAE/B,IAAe,UADI3I,EAASJ,GAExB,MAEP,CACczF,KAAK+O,WAAWJ,GACtB5N,KAAK0E,EACjB,CAKD1B,MAAM4K,GAEF,OADe3O,KAAK+O,WAAWJ,GACfhL,MACnB,CAMDwC,KAAKwI,GACD,IAAIK,EAAWhP,KAAK+O,WAAWJ,GAC/B,OAAIK,EAASrL,QAAU,EACZ,KAEEqL,EAAS1F,OAEzB,CAMDhD,OAAOqI,EAAOvI,GACV,MAAM6I,EAAYN,EAAMxK,KACxB,IAAI+G,EAAM7K,KAAK6K,IAAI9E,EAAQpG,KAAKyO,WAAWQ,IAAc,GACzDjP,KAAKyO,WAAWQ,GAAa/D,CAChC,CAKD9B,MAAM8F,EAAc,KAChB,IAAI,MAAMD,KAAatM,OAAOgH,KAAK3J,KAAKsO,UAAW,CAC/C,MAAMK,EAAQ3O,KAAK0O,iBAAiBO,GAC9BE,EAAWnP,KAAKsO,SAASW,GACzBD,EAAWhP,KAAKuO,UAAUU,GAC1B3I,EAAStG,KAAKyO,WAAWQ,IAAc,EACzC3I,EAAS0I,EAASrL,QAClBqL,EAAS3N,OAAO,EAAG2N,EAASrL,OAAS2C,GAEzC,IAAI4E,EAAM7K,KAAKgG,IAAI6I,EAAaC,EAASxL,QACzC,IAAI,IAAIZ,EAAI,EAAGA,EAAImI,IAAOnI,EAAG,CACzB,IAAI0C,EAAa0J,EAAS7F,QAEtBtJ,KAAK0F,oBAAoBiJ,EAAOlJ,EAIvC,CACJ,CACJ,CAKD2J,sBAAsBT,GAClB,OAAO3O,KAAKyO,WAAWE,EAAMxK,OAAS,CACzC,CAKDkL,qBAAqBV,GAEjB,OADe3O,KAAK8O,WAAWH,GACfhL,MACnB,CAEDM,QACIjE,KAAKsO,SAAW,GAChBtO,KAAKuO,UAAY,GACjBvO,KAAKwO,UAAY,GACjBxO,KAAKyO,WAAa,GAClBzO,KAAK0O,iBAAmB,EAC3B,CAQDI,WAAWH,GACP,MAAMM,EAAYN,EAAMxK,KACxB,GAAI8K,KAAajP,KAAKsO,SAClB,OAAOtO,KAAKsO,SAASW,GAClB,CACH,IAAItN,EAAS,GAIb,OAHA3B,KAAKsO,SAASW,GAAatN,EAC3B3B,KAAKuO,UAAUU,GAAa,GAC5BjP,KAAK0O,iBAAiBO,GAAaN,EAC5BhN,CACV,CACJ,CAQDoN,WAAWJ,GACP,MAAMM,EAAYN,EAAMxK,KACxB,GAAI8K,KAAajP,KAAKuO,UAClB,OAAOvO,KAAKuO,UAAUU,GACnB,CACH,IAAItN,EAAS,GAIb,OAHA3B,KAAKsO,SAASW,GAAa,GAC3BjP,KAAKuO,UAAUU,GAAatN,EAC5B3B,KAAK0O,iBAAiBO,GAAaN,EAC5BhN,CACV,CACJ,CAQDiN,YAAYD,GACR,MAAMM,EAAYN,EAAMxK,KACxB,GAAI8K,KAAajP,KAAKwO,UAClB,OAAOxO,KAAKwO,UAAUS,GACnB,CACH,IAAItN,EAAS,GAEb,OADA3B,KAAKwO,UAAUS,GAAatN,EACrBA,CACV,CACJ,8BTjQE,SAAgB5B,EAAYuP,EAAGC,EAAGC,EAAI,EAAGvE,EAAK,GACnD,IAAIZ,EAAW3K,OAAKoI,SAChB2H,EAAWC,OAAK5H,SACpBoE,EAAAA,KAAKyD,eAAetF,EAAUtK,GAC9BmM,EAAAA,KAAK0D,YAAYH,EAAU1P,GAC3B,IAAIkM,EAASvM,EAAAA,KAAKC,WAAW2P,EAAGC,EAAGC,GAEnCtD,EAAIA,KAACC,OAAOpM,EAAYsK,EAAU4B,EAAQxM,GAE1C,IAAIoQ,EAAiBH,OAAK5H,SAC1BoE,EAAAA,KAAK0D,YAAYC,EAAgB9P,GACjC2P,EAAIA,KAACI,MAAML,EAAUA,EAAUI,EAAgB5E,GAE/CiB,EAAAA,KAAK6D,wBAAwBhQ,EAAY0P,EAAUpF,EACrD,UAzBO,SAAetK,EAAYuP,EAAGC,EAAGC,EAAI,EAAGvE,EAAK,GAClD,IAAIZ,EAAW3K,OAAKoI,SACpBoE,EAAAA,KAAKyD,eAAetF,EAAUtK,GAC9B,IAAIiQ,EAActQ,EAAAA,KAAKC,YACpB2P,EAAIjF,EAAS,IAAMY,GACnBsE,EAAIlF,EAAS,IAAMY,GACnBuE,EAAInF,EAAS,IAAMY,GAEtBiB,EAAAA,KAAK+D,UAAUlQ,EAAYA,EAAYiQ,EACzC,qBA4DO,SACLtM,EACAwM,EACAC,EACArQ,EACAC,EACAqQ,GAAa,GAIb,IAAIxL,EAAIyL,EAAAA,KAAK1Q,WACXuQ,EACAC,GACC,EACD,GAGEG,EAAIpE,OAAKpE,SAeb,OAdAoE,EAAAA,KAAKqE,OAAOD,EAAGxQ,GACfuQ,EAAAA,KAAKG,cAAc5L,EAAGA,EAAG0L,GACzB1L,EAAE,IAAM,EACRA,EAAE,GAAK,EAEPsH,EAAAA,KAAKqE,OAAOD,EAAGvQ,GACfsQ,EAAAA,KAAKG,cAAc5L,EAAGA,EAAG0L,GACzB5M,EAAI,GAAKkB,EAAE,GACXlB,EAAI,GAAKkB,EAAE,GACXlB,EAAI,GAAKkB,EAAE,GAEPwL,GACF1Q,EAAAA,KAAKmM,UAAUnI,EAAKA,GAEfA,CACT"}