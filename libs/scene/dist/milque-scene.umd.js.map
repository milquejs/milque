{"version":3,"file":"milque-scene.umd.js","sources":["../src/camera/CameraHelper.js","../src/camera/Camera.js","../src/camera/PerspectiveCamera.js","../src/camera/FirstPersonCameraController.js","../src/scenegraph/SceneGraph.js","../src/entity/QueryManager.js","../src/entity/Query.js","../src/topic/TopicManager.js","../src/hooks/ProviderHook.js","../src/hooks/EffectHook.js","../src/loop/AnimationFrameLoop.js","../src/entity/ComponentClass.js","../src/entity/EntityManager.js","../src/entity/EntityTemplate.js","../src/camera/OrthographicCamera.js","../src/topic/Topic.js"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\n\nconst UP = vec3.fromValues(0, 1, 0);\n\nexport function panTo(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  mat4.getTranslation(position, viewMatrix);\n  let translation = vec3.fromValues(\n    (x - position[0]) * dt,\n    (y - position[1]) * dt,\n    (z - position[2]) * dt\n  );\n  mat4.translate(viewMatrix, viewMatrix, translation);\n}\n\nexport function lookAt(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  let rotation = quat.create();\n  mat4.getTranslation(position, viewMatrix);\n  mat4.getRotation(rotation, viewMatrix);\n  let target = vec3.fromValues(x, y, z);\n\n  mat4.lookAt(viewMatrix, position, target, UP);\n\n  let targetRotation = quat.create();\n  mat4.getRotation(targetRotation, viewMatrix);\n  quat.slerp(rotation, rotation, targetRotation, dt);\n\n  mat4.fromRotationTranslation(viewMatrix, rotation, position);\n}\n\n/**\n * Gets a directional ray in the world space from the given normalized\n * screen coordinates and camera matrices.\n *\n * NOTE: In addition to some scaling, the y component from a pointer's\n * position usually has to be flipped to match the normalized screen\n * coordinate space, which assumes a range of [-1, 1] for both x and y,\n * where (0, 0) is the center and (-1, -1) is the bottom-left of the\n * screen.\n *\n * ### Typical Device Screen Coordinate Space:\n * ```\n * (0,0)------------(w,0)\n *    |               |\n *    |   (w/2,h/2)   |\n *    |               |\n * (0,w)------------(w,h)\n * ```\n *\n * ### Normalized Screen Coordinate Space:\n * ```\n * (-1,+1)---------(+1,+1)\n *    |               |\n *    |     (0,0)     |\n *    |               |\n * (-1,-1)---------(+1,-1)\n * ```\n *\n * ### Example Conversion from Device to Normalized:\n * ```\n * let normalizedScreenX = (canvasClientX / canvasWidth) * 2 - 1;\n * let normalizedScreenY = 1 - (canvasClientY / canvasHeight) * 2;\n * ```\n *\n * @param {vec3} out The output vector.\n * @param {number} normalizedScreenCoordX The X screen coordinate normalized to [-1, 1], where -1 is the left side of the screen.\n * @param {number} normalizedScreenCoordY The Y screen coordinate normalized to [-1, 1], where -1 is the bottom side of the screen.\n * @param {mat4} projectionMatrix The projection matrix of the world camera.\n * @param {mat4} viewMatrix The view matrix of the world camera.\n * @param {boolean} [normalized=false] Whether to normalize the result. Usually true for non-orthogonal projections.\n * @returns {vec3} The ray direction in the world space. By default, this is not normalized.\n */\nexport function screenToWorldRay(\n  out,\n  normalizedScreenCoordX,\n  normalizedScreenCoordY,\n  projectionMatrix,\n  viewMatrix,\n  normalized = false\n) {\n  // https://antongerdelan.net/opengl/raycasting.html\n  // To homogeneous clip coords\n  let v = vec4.fromValues(\n    normalizedScreenCoordX,\n    normalizedScreenCoordY,\n    -1,\n    1\n  );\n  // To camera coords\n  let m = mat4.create();\n  mat4.invert(m, projectionMatrix);\n  vec4.transformMat4(v, v, m);\n  v[2] = -1;\n  v[3] = 0;\n  // To world coords\n  mat4.invert(m, viewMatrix);\n  vec4.transformMat4(v, v, m);\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  // Normalized as directional ray\n  if (normalized) {\n    vec3.normalize(out, out);\n  }\n  return out;\n}\n","export class Camera {\n  constructor(projectionMatrix, viewMatrix) {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n  }\n\n  /**\n   * @abstract\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   * @returns {Camera}\n   */\n  // eslint-disable-next-line no-unused-vars\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    return this;\n  }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nconst DEFAULT_FOVY = Math.PI / 3;\n\nexport class PerspectiveCamera extends Camera {\n  constructor(fieldOfView = DEFAULT_FOVY, near = 0.1, far = 1000) {\n    super(mat4.create(), mat4.create());\n\n    this.fieldOfView = Number(fieldOfView);\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /** @override */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const aspectRatio =\n      typeof viewportWidth === 'undefined' ? 1 : viewportWidth / viewportHeight;\n    const { near, far } = this.clippingPlane;\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fieldOfView,\n      aspectRatio,\n      near,\n      far\n    );\n    return this;\n  }\n}\n","import { vec3, mat4 } from 'gl-matrix';\n\nconst TO_RAD_FACTOR = Math.PI / 180;\n\n/**\n * A camera controller that behaves like a traditional first person camera.\n * Pitch is restricted to prevent gimbal lock and roll is ignored.\n *\n * NOTE: Don't forget to lock your pointer, i.e. `canvas.requestPointerLock()`.\n */\nexport class FirstPersonCameraController {\n  constructor(opts = { locky: false }) {\n    this.locky = opts.locky;\n\n    this.position = vec3.create();\n    this.forward = vec3.fromValues(0, 0, -1);\n    this.right = vec3.fromValues(1, 0, 0);\n    this.up = vec3.fromValues(0, 1, 0);\n\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    this.pitch = 0;\n    this.yaw = -90;\n  }\n\n  look(dx, dy, dt = 1) {\n    // NOTE: Increase sensitivity to relatively match movement.\n    dt *= 1000;\n    this.pitch = Math.min(89.9, Math.max(-89.9, this.pitch + dy * dt));\n    this.yaw = (this.yaw + dx * dt) % 360;\n    return this;\n  }\n\n  move(forward, right = 0, up = 0, dt = 1) {\n    this.forwardAmount += forward * dt;\n    this.rightAmount += right * dt;\n    this.upAmount += up * dt;\n    return this;\n  }\n\n  apply(viewMatrix) {\n    let {\n      position,\n      forward,\n      right,\n      up,\n      forwardAmount,\n      rightAmount,\n      upAmount,\n      pitch,\n      yaw,\n    } = this;\n\n    // Calculate forward and right vectors\n    let rady = yaw * TO_RAD_FACTOR;\n    let radp = pitch * TO_RAD_FACTOR;\n    let cosy = Math.cos(rady);\n    let cosp = Math.cos(radp);\n    let siny = Math.sin(rady);\n    let sinp = Math.sin(radp);\n    let dx = cosy * cosp;\n    let dy = sinp;\n    let dz = siny * cosp;\n\n    // Set forward for move vector\n    vec3.normalize(forward, vec3.set(forward, dx, this.locky ? 0 : dy, dz));\n    vec3.normalize(right, vec3.cross(right, forward, up));\n\n    let move = vec3.create();\n    // Move forward\n    vec3.scale(move, forward, forwardAmount);\n    vec3.add(position, position, move);\n    // Move right\n    vec3.scale(move, right, rightAmount);\n    vec3.add(position, position, move);\n    // Move up\n    vec3.scale(move, up, upAmount);\n    vec3.add(position, position, move);\n    // Reset movement\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    // Reset forward for look vector\n    if (this.locky) vec3.set(forward, dx, dy, dz);\n\n    let target = vec3.add(move, position, forward);\n    mat4.lookAt(viewMatrix, position, target, up);\n    return viewMatrix;\n  }\n}\n","const MAX_DEPTH_LEVEL = 100;\n\n/**\n * @typedef {Number} SceneNode\n *\n * @typedef SceneNodeInfo\n * @property {SceneNode} parent The parent node. If the node does not have a parent,\n * it will be 0.\n * @property {Array<SceneNode>} children The list of child nodes.\n *\n * @callback WalkCallback Called for each node, before traversing its children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {WalkBackCallback|Boolean} If false, the walk will skip\n * the current node's children and all of its descendents. If a function,\n * it will be called after traversing down all of its children.\n *\n * @callback WalkBackCallback Called if returned by {@link WalkCallback}, after\n * traversing the current node's children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n *\n * @callback WalkChildrenCallback Called for each level of children, before\n * traversing them. This is usually used to determine visit order.\n * @param {Array<SceneNode>} childNodes A list of child nodes to be visited.\n * @param {SceneNode} parentNode The current parent node of these children.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {Array<SceneNode>} The list of children to traverse for this parent.\n */\n\n/**\n * A tree-like graph of nodes with n-children.\n */\nexport class SceneGraph {\n  /**\n   * Constructs an empty scene graph.\n   */\n  constructor() {\n    this.nodes = {};\n    this.roots = [];\n\n    this._nextAvailableSceneNodeId = 1;\n  }\n\n  /**\n   * Creates a scene node in the scene graph.\n   *\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * node.\n   * @returns {SceneNode} The created scene node.\n   */\n  createSceneNode(parentNode = undefined) {\n    let sceneNode = this._nextAvailableSceneNodeId++;\n    let info = createSceneNodeInfo();\n    this.nodes[sceneNode] = info;\n    attach(parentNode, sceneNode, this);\n    return sceneNode;\n  }\n\n  /**\n   * Creates multiple scene nodes in the scene graph.\n   *\n   * @param {Number} count The number of scene nodes to create.\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * nodes.\n   * @returns {Array<SceneNode>} A list of created scene nodes.\n   */\n  createSceneNodes(count, parentNode = undefined) {\n    let result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(this.createSceneNode(parentNode));\n    }\n    return result;\n  }\n\n  /**\n   * Deletes a scene node from the scene graph, along with all\n   * of its descendents.\n   *\n   * @param {SceneNode} sceneNode The scene node to remove.\n   */\n  deleteSceneNode(sceneNode) {\n    if (sceneNode in this.nodes) {\n      let info = this.nodes[sceneNode];\n      detach(info.parent, sceneNode, this);\n      walkImpl(this, sceneNode, 0, walkDeleteCallback);\n    } else {\n      throw new Error('Cannot delete non-existant scene node for scene graph.');\n    }\n  }\n\n  /**\n   * Deletes all given scene nodes from the scene graph, along with all\n   * of their descendents.\n   *\n   * @param {Array<SceneNode>} sceneNodes A list of scene nodes to remove.\n   */\n  deleteSceneNodes(sceneNodes) {\n    for (let sceneNode of sceneNodes) {\n      this.deleteSceneNode(sceneNode);\n    }\n  }\n\n  /**\n   * Get the scene node's info.\n   *\n   * @param {SceneNode} sceneNode The scene node to get info for.\n   * @returns {SceneNodeInfo} The info for the given scene node.\n   */\n  getSceneNodeInfo(sceneNode) {\n    return this.nodes[sceneNode];\n  }\n\n  /**\n   * Changes the parent of the scene node with the new parent node in\n   * the graph.\n   *\n   * @param {SceneNode} sceneNode The target scene node to change.\n   * @param {SceneNode} parentNode The scene node to set as the parent.\n   */\n  parentSceneNode(sceneNode, parentNode) {\n    let info = this.nodes[sceneNode];\n    detach(info.parent, sceneNode, this);\n    attach(parentNode, sceneNode, this);\n  }\n\n  /**\n   * Replaces the scene node with the new replacement node in the graph,\n   * inheriting its parent and children.\n   *\n   * @param {SceneNode} sceneNode The target scene node to replace.\n   * @param {SceneNode} replacementNode The scene node to replace with. If falsey,\n   * it will remove the target scene node and the target's parent will adopt\n   * its grandchildren. If the target did not have parents, the grandchildren will\n   * become root nodes in the graph.\n   */\n  replaceSceneNode(sceneNode, replacementNode) {\n    let info = this.nodes[sceneNode];\n    let parentNode = info.parent;\n    let grandChildren = info.children.slice();\n\n    // Remove the target node from graph\n    detach(parentNode, sceneNode, this);\n\n    // Begin grafting the grandchildren by removing them...\n    info.children.length = 0;\n\n    if (replacementNode) {\n      // Reattach all grandchildren to new replacement node.\n      let replacementInfo = this.nodes[replacementNode];\n      let replacementParent = replacementInfo.parent;\n\n      // Remove replacement node from previous parent\n      detach(replacementParent, replacementNode, this);\n\n      // ...and graft them back.\n      replacementInfo.children.push(...grandChildren);\n\n      // And reattach target parent to new child.\n      attach(parentNode, replacementNode, this);\n    } else {\n      // Reattach all grandchildren to target parent...\n      if (parentNode) {\n        //...as regular children.\n        let parentInfo = this.nodes[parentNode];\n        parentInfo.children.push(...grandChildren);\n      } else {\n        //...as root children.\n        this.roots.push(...grandChildren);\n      }\n    }\n\n    // ...and repair their parent relations.\n    for (let childNode of grandChildren) {\n      this.nodes[childNode].parent = parentNode;\n    }\n  }\n\n  /**\n   * Walks through every child node in the graph.\n   *\n   * @param {WalkCallback} callback The function called for each node\n   * in the graph, in ordered traversal from parent to child.\n   * @param {Object} [opts={}] Any additional options.\n   * @param {SceneNode|Array<SceneNode>} [opts.from] The parent node to\n   * start walking from, inclusive. By default, it will start from the root\n   * nodes.\n   * @param {WalkChildrenCallback} [opts.childfilter] The function called before\n   * walking through the children. This is usually used to determine the\n   * visiting order.\n   */\n  walk(callback, opts = {}) {\n    const { from = undefined, childFilter = undefined } = opts;\n\n    let fromNodes;\n    if (!from) fromNodes = this.roots;\n    else if (!Array.isArray(from)) fromNodes = [from];\n    else fromNodes = from;\n\n    if (childFilter) fromNodes = childFilter(fromNodes, 0, this);\n    for (let fromNode of fromNodes) {\n      walkImpl(this, fromNode, 0, callback, childFilter);\n    }\n  }\n}\n\n/**\n * @param {SceneNode} key The scene node handle.\n * @returns {SceneNodeInfo} The scene node metadata.\n */\nfunction createSceneNodeInfo() {\n  return {\n    parent: 0,\n    children: [],\n  };\n}\n\n/**\n * Attaches a child node to a parent in the scene graph. If parentNode is\n * null, then it will attach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction attach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has new parent; attach to parent. It is now in the graph.\n    sceneGraph.nodes[parentNode].children.push(childNode);\n    sceneGraph.nodes[childNode].parent = parentNode;\n  } else {\n    // No parent; move to root. It is now in the graph.\n    sceneGraph.roots.push(childNode);\n    sceneGraph.nodes[childNode].parent = 0;\n  }\n}\n\n/**\n * Detaches a child node from its parent in the scene graph. If parentNode is\n * null, then it will detach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction detach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has parent; detach from parent. It is now a free node.\n    let children = sceneGraph.nodes[parentNode].children;\n    let childIndex = children.indexOf(childNode);\n    children.splice(childIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  } else {\n    // No parent; remove from root. It is now a free node.\n    let roots = sceneGraph.roots;\n    let rootIndex = roots.indexOf(childNode);\n    roots.splice(rootIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  }\n}\n\n/**\n * Walk down from the parent and through all its descendents.\n *\n * @param {SceneGraph} sceneGraph The scene graph containing the nodes to be visited.\n * @param {SceneNode} parentNode The parent node to start walking from.\n * @param {Number} level The current call depth level. This is used to limit the call stack.\n * @param {WalkCallback} nodeCallback The function called on each visited node.\n * @param {WalkChildrenCallback} [filterCallback] The function called before\n * walking through the children. This is usually used to determine the visiting order.\n */\nfunction walkImpl(\n  sceneGraph,\n  parentNode,\n  level,\n  nodeCallback,\n  filterCallback = undefined\n) {\n  if (level >= MAX_DEPTH_LEVEL) return;\n\n  let result = nodeCallback(parentNode, sceneGraph);\n  if (result === false) return;\n\n  let parentInfo = sceneGraph.nodes[parentNode];\n  let nextNodes = filterCallback\n    ? filterCallback(parentInfo.children, parentNode, sceneGraph)\n    : parentInfo.children;\n\n  for (let childNode of nextNodes) {\n    walkImpl(sceneGraph, childNode, level + 1, nodeCallback, filterCallback);\n  }\n\n  if (typeof result === 'function') {\n    result(parentNode, sceneGraph);\n  }\n}\n\nfunction walkDeleteCallback(sceneNode, sceneGraph) {\n  delete sceneGraph.nodes[sceneNode];\n}\n","import { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityManager} EntityManager */\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./Query').Query<T>} Query<T>\n */\n\nexport class QueryManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<EntityId>>}\n         */\n        this.cachedResults = {};\n        /**\n         * @private\n         * @type {Record<string, Query<?>>}\n         */\n        this.keyQueryMapping = {};\n\n        this.onEntityComponentChanged = this.onEntityComponentChanged.bind(this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} added\n     * @param {ComponentClass<?>} removed\n     * @param {boolean} dead\n     */\n    onEntityComponentChanged(entityManager, entityId, added, removed, dead) {\n        for(let query of Object.values(this.keyQueryMapping)) {\n            let entities = this.cachedResults[query.key];\n            if (dead) {\n                let i = entities.indexOf(entityId);\n                if (i >= 0) {\n                    entities.splice(i, 1);\n                }\n            } else if (added) {\n                if (query.hasSelector(Not(added))) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                } else if (query.hasSelector(added) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                }\n            } else if (removed) {\n                if (query.hasSelector(Not(removed)) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                } else if (query.hasSelector(removed) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query \n     * @returns {EntityId}\n     */\n    findAny(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        if (result.length <= 0) {\n            return null;\n        } else {\n            return result[Math.floor(Math.random() * result.length)];\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query\n     * @returns {Array<EntityId>}\n     */\n    findAll(entityManager, query) {\n        const queryKey = query.key;\n        let result;\n        if (!(queryKey in this.keyQueryMapping)) {\n            result = [];\n            this.keyQueryMapping[queryKey] = query;\n            this.cachedResults[queryKey] = result;\n            query.hydrate(entityManager, result);\n        } else {\n            result = this.cachedResults[queryKey];\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query \n     */\n    count(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        return result.length;\n    }\n\n    /**\n     * @param {Query<?>} query\n     */\n    clear(query) {\n        const queryKey = query.key;\n        if (!(queryKey in this.keyQueryMapping)) {\n            return;\n        }\n        delete this.keyQueryMapping[queryKey];\n        delete this.cachedResults[queryKey];\n    }\n    \n    reset() {\n        this.keyQueryMapping = {};\n        this.cachedResults = {};\n    }\n}\n\n/**\n * @template T\n * @typedef {SelectorNot<T>|ComponentClass<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef SelectorNot<T>\n * @property {'not'} type\n * @property {string} name\n * @property {ComponentClass<T>} value\n */\n\n/**\n * @template T\n * @param {ComponentClass<T>} componentClass \n * @returns {ComponentClass<T>}\n */\nexport function Not(componentClass) {\n    return {\n        // @ts-ignore\n        type: 'not',\n        name: componentClass.name,\n        value: componentClass,\n    };\n}\n\nexport function isSelectorNot(selector) {\n    return 'type' in selector && selector.type === 'not';\n}\n","import { ComponentClass } from './ComponentClass';\nimport { EntityManager } from './EntityManager';\nimport { isSelectorNot } from './QueryManager';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').Selector<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').SelectorNot<T>} SelectorNot<T>\n */\n\n/**\n * @template T\n * @typedef {import('./EntityTemplate').ComponentInstancesOf<T>} ComponentInstancesOf<T>\n */\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class Query {\n\n    /**\n     * @param {T} selectors \n     */\n    constructor(...selectors) {\n        if (selectors.length <= 0) {\n            throw new Error('Must have at least 1 selector for query.');\n        }\n        this.selectors = selectors;\n        this.key = selectors.map(s => isSelectorNot(s) ? `!${s.name}` : s.name).sort().join('&');\n    }\n\n    /**\n     * @param {Selector<?>} selector\n     */\n    hasSelector(selector) {\n        if (isSelectorNot(selector)) {\n            return this.selectors.findIndex(v => isSelectorNot(v) && v.name === selector.name) >= 0;\n        } else {\n            return this.selectors.findIndex(v => v.name === selector.name) >= 0;\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId\n     */\n    test(entityManager, entityId) {\n        for(let selector of this.selectors) {\n            if (isSelectorNot(selector)) {\n                const componentClass = /** @type {SelectorNot<?>} */ (/** @type {unknown} */ (selector)).value;\n                if (entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            } else {\n                const componentClass = /** @type {ComponentClass<?>} */ (/** @type {unknown} */ (selector));\n                if (!entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Array<EntityId>} result \n     */\n    hydrate(entityManager, result) {\n        if (this.selectors.length <= 0) {\n            result.length = 0;\n            return result;\n        }\n        let entities = entityManager.entityIds();\n        for(let entityId of entities) {\n            if (this.test(entityManager, entityId)) {\n                result.push(entityId);\n            }\n        }\n        return result;\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {number}\n     */\n    count(entityManager) {\n        return entityManager.queries.count(entityManager, this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    findAny(entityManager) {\n        const queryManager = entityManager.queries;\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (new Array(this.selectors.length + 1));\n        let entityId = queryManager.findAny(entityManager, this);\n        if (entityId === null) {\n            return result.fill(undefined);\n        }\n        computeResult(result, entityManager, entityId, this.selectors);\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {Generator<[EntityId, ...ComponentInstancesOf<T>]>}\n     */\n    *findAll(entityManager) {\n        const queryManager = entityManager.queries;\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (new Array(this.selectors.length + 1));\n        let entities = queryManager.findAll(entityManager, this);\n        for(let entityId of entities) {\n            computeResult(result, entityManager, entityId, this.selectors);\n            yield result;\n        }\n    }\n}\n\n/**\n * @template {ComponentClass<any>[]} T\n * @param {[EntityId, ...ComponentInstancesOf<T>]} out\n * @param {EntityManager} entityManager  \n * @param {EntityId} entityId\n * @param {T} selectors\n * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n */\nfunction computeResult(out, entityManager, entityId, selectors) {\n    out[0] = entityId;\n    let i = 1;\n    for(let selector of selectors) {\n        if (isSelectorNot(selector)) {\n            out[i] = null;\n        } else {\n            out[i] = entityManager.get(entityId, selector);\n        }\n        ++i;\n    }\n    return out;\n}\n","/**\n * @template T\n * @typedef {import('./Topic').Topic<T>} Topic<T>\n */\n\n/**\n * @template T\n * @typedef {(attachment: T) => void|boolean} TopicCallback<T>\n */\n\n/**\n * @template T\n * @typedef TopicCallbackEntry\n * @property {TopicCallback<T>} callback\n * @property {number} priority\n */\n\n/**\n * @template T\n * @param {TopicCallbackEntry<T>} a\n * @param {TopicCallbackEntry<T>} b\n */\nfunction comparator(a, b) {\n    return a.priority - b.priority;\n}\n\n/**\n * A manager for topic states. You should call `flush()` regularly to\n * process dispatched events or use `dispatchImmediately()`.\n */\nexport class TopicManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedIn = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedOut = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<TopicCallbackEntry<?>>>}\n         */\n        this.callbacks = {};\n        /**\n         * @protected\n         * @type {Record<string, number>}\n         */\n        this.maxRetains = {};\n        /**\n         * @private\n         * @type {Record<string, Topic<?>>}\n         */\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     * @param {object} [opts]\n     * @param {number} [opts.priority]\n     */\n    addEventListener(topic, callback, opts = undefined) {\n        const { priority = 0 } = opts;\n        let callbacks = this.callbacksOf(topic);\n        callbacks.push({\n            callback,\n            priority,\n        });\n        callbacks.sort(comparator);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     */\n    removeEventListener(topic, callback) {\n        let callbacks = this.callbacksOf(topic);\n        let i = callbacks.findIndex(v => v.callback === callback);\n        if (i >= 0) {\n            callbacks.splice(i, 1);\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    countEventListeners(topic) {\n        return this.callbacksOf(topic).length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    dispatch(topic, attachment) {\n        let incoming = this.incomingOf(topic);\n        incoming.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    dispatchImmediately(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    count(topic) {\n        let outgoing = this.outgoingOf(topic);\n        return outgoing.length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     */\n    poll(topic) {\n        let outgoing = this.outgoingOf(topic);\n        if (outgoing.length <= 0) {\n            return null;\n        }\n        let result = outgoing.shift();\n        return result;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     * @param {number} amount\n     */\n    retain(topic, amount) {\n        const topicName = topic.name;\n        let max = Math.max(amount, this.maxRetains[topicName] || 0);\n        this.maxRetains[topicName] = max;\n    }\n\n    /**\n     * @param {number} [maxPerTopic]\n     */\n    flush(maxPerTopic = 100) {\n        for(const topicName of Object.keys(this.cachedIn)) {\n            const topic = this.nameTopicMapping[topicName];\n            const incoming = this.cachedIn[topicName];\n            const outgoing = this.cachedOut[topicName];\n            const retain = this.maxRetains[topicName] || 0;\n            if (retain < outgoing.length) {\n                outgoing.splice(0, outgoing.length - retain);\n            }\n            let max = Math.min(maxPerTopic, incoming.length);\n            for(let i = 0; i < max; ++i) {\n                let attachment = incoming.shift();\n                this.dispatchImmediately(topic, attachment);\n            }\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic \n     */\n    getPendingRetainCount(topic) {\n        return this.maxRetains[topic.name] || 0;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    getPendingFlushCount(topic) {\n        let incoming = this.incomingOf(topic);\n        return incoming.length;\n    }\n\n    reset() {\n        this.cachedIn = {};\n        this.cachedOut = {};\n        this.callbacks = {};\n        this.maxRetains = {};\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    incomingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedIn) {\n            return this.cachedIn[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = result;\n            this.cachedOut[topicName] = [];\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    outgoingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedOut) {\n            return this.cachedOut[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = [];\n            this.cachedOut[topicName] = result;\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<TopicCallbackEntry<T>>}\n     */\n    callbacksOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.callbacks) {\n            return this.callbacks[topicName];\n        } else {\n            let result = [];\n            this.callbacks[topicName] = result;\n            return result;\n        }\n    }\n}\n","/**\n * @template M, T\n * @typedef {(m: M, [opts]: object) => T} Provider\n */\n\n/**\n * @template M, T\n * @typedef ProviderContext\n * @property {Provider<M, T>} handle\n * @property {T} value\n */\n\n/**\n * @template M, T\n * @param {M} m \n * @param {Provider<M, T>} provider \n * @returns {T}\n */\nexport function useProvider(m, provider) {\n    let state = resolveState(m);\n    let handle = provider.name;\n    if (handle in state.contexts) {\n        /** @type {ProviderContext<M, T>} */\n        let { value } = state.contexts[handle];\n        if (value) {\n            return value;\n        } else {\n            let current = getCurrentProvider(m);\n            if (current.name === provider.name) {\n                throw new Error(`Cannot useProvider() on self during initialization!`);\n            } else {\n                throw new Error('This is not a provider.');\n            }\n        }\n    }\n    throw new Error(`Missing assigned dependent provider '${handle}' in context.`);\n}\n\n/**\n * @template M\n * @param {M} m \n * @param {Array<Provider<?, ?>>} providers\n * @returns {M}\n */\nexport function injectProviders(m, providers) {\n    let state = resolveState(m);\n    for(let provider of providers) {\n        /** @type {ProviderContext<?, ?>} */\n        let context = {\n            handle: provider,\n            value: null,\n        };\n        state.contexts[provider.name] = context;\n        state.current = provider;\n        context.value = provider(m);\n    }\n    return m;\n}\n\n/**\n * @template M\n * @param {M} m \n * @param {Array<Provider<?, ?>>} providers\n * @returns {M}\n */\nexport function ejectProviders(m, providers) {\n    let state = getStateIfExists(m);\n    if (!state) {\n        return m;\n    }\n    for(let provider of providers.slice().reverse()) {\n        let context = state.contexts[provider.name];\n        context.value = null;\n        delete state.contexts[provider.name];\n    }\n    return m;\n}\n\n/**\n * @template M\n * @param {M} m\n */\nexport function getProviders(m) {\n    let state = getStateIfExists(m);\n    if (!state) {\n        return [];\n    }\n    return Object.values(state.contexts).map(ctx => ctx.handle);\n}\n\n/**\n * @template M\n * @param {M} m\n */\nexport function getCurrentProvider(m) {\n    let state = getStateIfExists(m);\n    if (!state) {\n        throw new Error('This is not a provider.');\n    }\n    return state.current;\n}\n\nconst KEY = Symbol('providers');\n\nfunction createState() {\n    return {\n        /** @type {Record<string, ProviderContext<?, ?>>} */\n        contexts: {},\n        /** @type {Provider<?, ?>} */\n        current: null,\n    };\n}\n\n/**\n * @param {object} target\n * @returns {ReturnType<createState>}\n */\nfunction resolveState(target) {\n    if (KEY in target) {\n        return target[KEY];\n    }\n    return target[KEY] = createState();\n}\n\n/**\n * @param {object} target\n * @returns {ReturnType<createState>|null}\n */\nfunction getStateIfExists(target) {\n    if (KEY in target) {\n        return target[KEY];\n    }\n    return null;\n}\n","import { getCurrentProvider } from './ProviderHook';\n\n/**\n * @callback EffectHandler\n * @returns {AfterEffectHandler|Promise<AfterEffectHandler>|Promise<void>|void}\n */\n\n/**\n * @callback AfterEffectHandler\n * @returns {Promise<void>|void}\n */\n\n/**\n * @typedef EffectorContext\n * @property {Array<EffectHandler>} befores\n * @property {Array<AfterEffectHandler|void>} afters\n */\n\n/**\n * @template M\n * @param {M} m \n * @param {EffectHandler} handler\n */\nexport function useEffect(m, handler) {\n    const provider = getCurrentProvider(m);\n    if (!provider) {\n        throw new Error('Not a provider.');\n    }\n    let state = resolveState(m);\n    let context = resolveContext(provider, state.contexts);\n    context.befores.push(handler);\n}\n\n/**\n * @template M\n * @param {M} m \n * @param {Array<import('./ProviderHook').Provider<M, ?>>} providers \n */\nexport async function applyEffects(m, providers) {\n    let state = resolveState(m);\n    for(let provider of providers) {\n        let context = resolveContext(provider, state.contexts);\n        let befores = context.befores.slice();\n        context.befores.length = 0;\n        let result = await Promise.all(befores.map(handler => handler && handler()));\n        context.afters.push(...result);\n    }\n    return m;\n}\n\n/**\n * @template M\n * @param {M} m \n * @param {Array<import('./ProviderHook').Provider<M, ?>>} providers \n */\nexport async function revertEffects(m, providers) {\n    let state = getStateIfExists(m);\n    if (!state) {\n        return m;\n    }\n    for(let provider of providers.slice().reverse()) {\n        let context = getContextIfExists(provider, state.contexts);\n        if (!context) {\n            throw new Error('Cannot revert context for non-existent provider.');\n        }\n        let afters = context.afters.slice();\n        context.afters.length = 0;\n        await Promise.all(afters.map(handler => handler && handler()));\n    }\n    return m;\n}\n\nconst KEY = Symbol('effectors');\n\nfunction createState() {\n    return {\n        /** @type {Record<string, EffectorContext>} */\n        contexts: {},\n    };\n}\n\n/**\n * @param {object} target\n * @returns {ReturnType<createState>}\n */\nfunction resolveState(target) {\n    if (KEY in target) {\n        return target[KEY];\n    }\n    return target[KEY] = createState();\n}\n\n/**\n * @param {object} target\n * @returns {ReturnType<createState>|null}\n */\nfunction getStateIfExists(target) {\n    if (KEY in target) {\n        return target[KEY];\n    }\n    return null;\n}\n\n/**\n * @returns {EffectorContext}\n */\nfunction createContext() {\n    return {\n        befores: [],\n        afters: [],\n    };\n}\n\n/**\n * @param {import('./ProviderHook').Provider<?, ?>} provider\n * @param {ReturnType<createState>['contexts']} target\n * @returns {ReturnType<createContext>}\n */\nfunction resolveContext(provider, target) {\n    const key = provider.name;\n    if (key in target) {\n        return target[key];\n    }\n    return target[key] = createContext();\n}\n\n/**\n * @param {import('./ProviderHook').Provider<?, ?>} provider\n * @param {ReturnType<createState>['contexts']} target\n * @returns {ReturnType<createContext>|null}\n */\nfunction getContextIfExists(provider, target) {\n    const key = provider.name;\n    if (key in target) {\n        return target[key];\n    }\n    return null;\n}\n","/** @typedef {(frameDetail: AnimationFrameLoop) => void} AnimationFrameLoopCallback */\n\nexport class AnimationFrameLoop {\n    \n    /**\n     * @param {AnimationFrameLoopCallback} callback \n     * @param {object} [opts]\n     * @param {Window} [opts.animationFrameHandler]\n     */\n    constructor(callback, opts = undefined) {\n        const { animationFrameHandler = window } = opts || {};\n\n        /** @type {ReturnType<requestAnimationFrame>} */\n        this.handle = 0;\n        this.detail = {\n            prevTime: -1,\n            currentTime: -1,\n            deltaTime: 0,\n        };\n\n        /** @protected */\n        this.animationFrameHandler = animationFrameHandler;\n\n        /** @protected */\n        this.callback = callback;\n\n        this.next = this.next.bind(this);\n        this.start = this.start.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n    \n    next(now = performance.now()) {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        let d = this.detail;\n        d.prevTime = d.currentTime;\n        d.currentTime = now;\n        d.deltaTime = d.currentTime - d.prevTime;\n        this.callback(this);\n    }\n\n    start() {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        return this;\n    }\n\n    cancel() {\n        this.animationFrameHandler.cancelAnimationFrame(this.handle);\n        return this;\n    }\n}\n","/**\n * @template T\n */\nexport class ComponentClass {\n    /**\n     * @param {string} name \n     * @param {() => T} newCallback\n     * @param {(component: T) => void} [deleteCallback] \n     */\n    constructor(name, newCallback = () => null, deleteCallback = () => {}) {\n        this.name = name;\n        this.new = newCallback;\n        this.delete = deleteCallback;\n    }\n}\n","import { ComponentClass } from './ComponentClass';\nimport { QueryManager } from './QueryManager';\n\n/**\n * @template T\n * @typedef {Record<number, T>} ComponentInstanceMap<T>\n */\n\n/**\n * @typedef {Record<string, ComponentInstanceMap<?>>} ComponentClassMap\n * @typedef {number} EntityId\n * @typedef {string} ComponentName\n */\n\n/**\n * @callback EntityComponentChangedCallback\n * @param {EntityManager} entityManager\n * @param {EntityId} entityId\n * @param {ComponentClass<?>} attached\n * @param {ComponentClass<?>} detached\n * @param {boolean} dead\n */\n\nexport class EntityManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {ComponentClassMap}\n         */\n        this.components = {};\n        /** @private */\n        this.nameClassMapping = {};\n        /**\n         * @private\n         * @type {EntityId}\n         */\n        this.nextAvailableEntityId = 1;\n        /**\n         * @protected\n         * @type {Array<[string, ...any]>}\n         */\n        this.queue = [];\n        /** @private */\n        this.listeners = [];\n        this.queries = new QueryManager();\n    }\n\n    /**\n     * @protected\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} attached\n     * @param {ComponentClass<?>} detached\n     * @param {boolean} dead\n     */\n    entityComponentChangedCallback(entityId, attached, detached, dead) {\n        this.queries.onEntityComponentChanged(this, entityId, attached, detached, dead);\n        for(let callback of this.listeners) {\n            callback(this, entityId, attached, detached, dead);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    addEventListener(event, callback) {\n        if (event === 'change') {\n            this.listeners.push(callback);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    removeEventListener(event, callback) {\n        if (event === 'change') {\n            let i = this.listeners.indexOf(callback);\n            if (i >= 0) {\n                this.listeners.splice(i, 1);\n            }\n        }\n    }\n\n    flush() {\n        while (this.queue.length > 0) {\n            let [type, ...args] = this.queue.shift();\n            switch (type) {\n                case 'attach': {\n                    let [entityId, componentClass, instance] = args;\n                    this.attachImmediately(entityId, componentClass, instance);\n                } break;\n                case 'detach': {\n                    let [entityId, componentClass] = args;\n                    this.detachImmediately(entityId, componentClass);\n                } break;\n                case 'clear': {\n                    let [componentClass] = args;\n                    this.clearImmediately(componentClass);\n                } break;\n            }\n        }\n    }\n\n    /**\n     * @returns {EntityId}\n     */\n    create() {\n        let entityId = this.nextAvailableEntityId++;\n        this.entityComponentChangedCallback(entityId, null, null, false);\n        return entityId;\n    }\n\n    /**\n     * @param {EntityId} entityId \n     */\n    destroy(entityId) {\n        const components = this.components;\n        for (const componentName of Object.keys(components)) {\n            const instanceMap = components[componentName];\n            if (entityId in instanceMap) {\n                delete instanceMap[entityId];\n                this.entityComponentChangedCallback(entityId, null, this.nameClassMapping[componentName], false);\n            }\n        }\n        this.entityComponentChangedCallback(entityId, null, null, true);\n    }\n\n    /**\n     * Whether the entity exists with all provided component classes.\n     * \n     * @param {EntityId} entityId \n     * @param {...ComponentClass<?>} componentClasses\n     */\n    exists(entityId, ...componentClasses) {\n        if (componentClasses.length > 0) {\n            for(const componentClass of componentClasses) {\n                let instanceMap = this.mapOf(componentClass);\n                if (!(entityId in instanceMap)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let instanceMap of Object.values(this.components)) {\n                if (entityId in instanceMap) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attach(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        this.queue.push(['attach', entityId, componentClass, instance]);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attachImmediately(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        let instanceMap = this.mapOf(componentClass);\n        instanceMap[entityId] = instance;\n        this.entityComponentChangedCallback(entityId, componentClass, null, false);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     */\n    detach(entityId, componentClass) {\n        this.queue.push(['detach', entityId, componentClass]);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     */\n    detachImmediately(entityId, componentClass) {\n        let instanceMap = this.mapOf(componentClass);\n        let instance = instanceMap[entityId];\n        delete instanceMap[entityId];\n        componentClass.delete(instance);\n        this.entityComponentChangedCallback(entityId, null, componentClass, false);\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     */\n    clear(componentClass) {\n        this.queue.push(['clear', componentClass]);\n    }\n\n    /**\n     * @param {ComponentClass<any>} componentClass \n     */\n    clearImmediately(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        const instanceMap = components[componentName];\n        let entities = Object.keys(instanceMap).map(Number);\n        let instances = Object.values(instanceMap);\n        components[componentName] = {};\n        this.nameClassMapping[componentName] = componentClass;\n        for(let instance of instances) {\n            componentClass.delete(instance);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, componentClass, false);\n        }\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @returns {T}\n     */\n    get(entityId, componentClass) {\n        return this.mapOf(componentClass)[entityId] || null;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     * @returns {number}\n     */\n    count(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).length;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass\n     */\n    keysOf(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).map(Number);\n    }\n\n    /**\n     * @template T\n     * @param {ComponentClass<T>} componentClass \n     * @returns {Array<T>}\n     */\n    valuesOf(componentClass) {\n        return Object.values(this.mapOf(componentClass));\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {ComponentClass<T>} componentClass\n     * @returns {ComponentInstanceMap<T>} A map of entity ids to component instance data.\n     */\n    mapOf(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        if (!(componentName in components)) {\n            /** @type {ComponentInstanceMap<T>} */\n            let map = {};\n            components[componentName] = map;\n            this.nameClassMapping[componentName] = componentClass;\n            return map;\n        } else {\n            return components[componentName];\n        }\n    }\n\n    /** @returns {Set<EntityId>} */\n    entityIds() {\n        let result = new Set();\n        for (let instanceMap of Object.values(this.components)) {\n            for(let entityId of Object.keys(instanceMap)) {\n                result.add(entityId);\n            }\n        }\n        return result;\n    }\n\n    /** @returns {Array<ComponentClass<?>>} */\n    componentClasses() {\n        return Object.values(this.nameClassMapping);\n    }\n\n    reset() {\n        const components = this.components;\n        /** @type {Set<EntityId>} */\n        let entities = new Set();\n        for(const componentName of Object.keys(components)) {\n            const componentClass = this.nameClassMapping[componentName];\n            const instanceMap = components[componentName];\n            for(let entityId of Object.keys(instanceMap)) {\n                entities.add(Number(entityId));\n            }\n            this.clearImmediately(componentClass);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, null, true);\n        }\n        entities.clear();\n        this.queries.reset();\n        this.components = {};\n        this.nextAvailableEntityId = 1;\n        this.queue.length = 0;\n        this.listeners.length = 0;\n    }\n}\n","import { EntityManager } from './EntityManager';\nimport { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template {ComponentClass<any>[]} T\n * @typedef {{[K in keyof T]: T[K] extends ComponentClass<infer V> ? V : never}} ComponentInstancesOf<T>\n */\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class EntityTemplate {\n    /**\n     * @param {T} componentClasses \n     */\n    constructor(...componentClasses) {\n        /** @private */\n        this.componentClasses = componentClasses;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    create(entityManager) {\n        let entityId = entityManager.create();\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (/** @type {unknown} */ ([entityId]));\n        for (let componentClass of this.componentClasses) {\n            let instance = entityManager.attach(entityId, componentClass);\n            result.push(instance);\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId \n     */\n    destroy(entityManager, entityId) {\n        for (let componentClass of this.componentClasses) {\n            entityManager.detach(entityId, componentClass);\n        }\n    }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nexport class OrthographicCamera extends Camera {\n  /**\n   * @param {number} [left]\n   * @param {number} [top]\n   * @param {number} [right]\n   * @param {number} [bottom]\n   * @param {number} [near]\n   * @param {number} [far]\n   */\n  constructor(\n    left = undefined,\n    top = undefined,\n    right = undefined,\n    bottom = undefined,\n    near = -1000,\n    far = 1000\n  ) {\n    super(mat4.create(), mat4.create());\n\n    this.orthoBounds = {\n      left: typeof left === 'undefined' ? undefined : Number(left),\n      top: typeof top === 'undefined' ? undefined : Number(top),\n      right: typeof right === 'undefined' ? undefined : Number(right),\n      bottom: typeof bottom === 'undefined' ? undefined : Number(bottom),\n    };\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /**\n   * If both the bounds and viewport dimensions are defined, the orthographic\n   * projection will be set the defined bounds adjusted with respect to\n   * the aspect ratio. This is usually the desired behavior.\n   *\n   * If the bounds are `undefined`, the orthographic projection will\n   * be set to the viewport dimensions. This is useful for pixel-perfect\n   * projections.\n   *\n   * If viewport dimensions are `undefined`, the orthographic projection\n   * will only use the defined bounds. This is useful if you are already\n   * performing your own calculations for the bounds or desire a static\n   * projection.\n   *\n   * @override\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const { near, far } = this.clippingPlane;\n    const { left, top, right, bottom } = this.orthoBounds;\n\n    let projectionMatrix = this.projectionMatrix;\n    let hasViewport = typeof viewportWidth !== 'undefined';\n    let hasBounds = typeof left !== 'undefined';\n\n    if (hasViewport) {\n      if (hasBounds) {\n        // Use the defined bounds with respect to the viewport aspect ratio\n        const aspectRatio = viewportWidth / viewportHeight;\n        mat4.ortho(\n          projectionMatrix,\n          left * aspectRatio,\n          right * aspectRatio,\n          bottom,\n          top,\n          near,\n          far\n        );\n      } else {\n        // Use the viewport dimensions as bounds\n        mat4.ortho(\n          projectionMatrix,\n          0,\n          viewportWidth,\n          viewportHeight,\n          0,\n          near,\n          far\n        );\n      }\n    } else {\n      if (hasBounds) {\n        // Use the defined bounds as-is\n        mat4.ortho(projectionMatrix, left, right, bottom, top, near, far);\n      } else {\n        // Use default bounds (since nothing else exists)\n        mat4.ortho(projectionMatrix, -1, 1, 1, -1, -1, 1);\n      }\n    }\n    return this;\n  }\n}\n","/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {import('./TopicManager').TopicCallback<T>} TopicCallback<T>\n */\n\n/**\n * @template T\n */\nexport class Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        this.name = name;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatch(topicManager, attachment) {\n        topicManager.dispatch(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatchImmediately(topicManager, attachment) {\n        topicManager.dispatchImmediately(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    on(topicManager, priority, callback) {\n        topicManager.addEventListener(this, callback, { priority });\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {TopicCallback<T>} callback\n     */\n    off(topicManager, callback) {\n        topicManager.removeEventListener(this, callback);\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    once(topicManager, priority, callback) {\n        let wrapper = (attachment) => {\n            this.off(topicManager, wrapper);\n            return callback(attachment);\n        };\n        return this.on(topicManager, priority, wrapper);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *poll(topicManager, amount) {\n        amount = Math.min(amount, topicManager.count(this));\n        for(let i = 0; i < amount; ++i) {\n            yield topicManager.poll(this);\n        }\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    retain(topicManager, amount) {\n        topicManager.retain(this, amount);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *pollAndRetain(topicManager, amount) {\n        this.retain(topicManager, amount);\n        for(let result of this.poll(topicManager, amount)) {\n            yield result;\n        }\n    }\n}\n"],"names":["UP","vec3","fromValues","Camera","constructor","projectionMatrix","viewMatrix","this","resize","viewportWidth","viewportHeight","DEFAULT_FOVY","Math","PI","TO_RAD_FACTOR","MAX_DEPTH_LEVEL","attach","parentNode","childNode","sceneGraph","nodes","children","push","parent","roots","detach","childIndex","indexOf","splice","rootIndex","walkImpl","level","nodeCallback","filterCallback","result","parentInfo","nextNodes","walkDeleteCallback","sceneNode","QueryManager","cachedResults","keyQueryMapping","onEntityComponentChanged","bind","entityManager","entityId","added","removed","dead","query","Object","values","entities","key","i","hasSelector","Not","test","findAny","findAll","length","floor","random","queryKey","hydrate","count","clear","reset","componentClass","type","name","value","isSelectorNot","selector","computeResult","out","selectors","get","comparator","a","b","priority","getCurrentProvider","m","state","getStateIfExists","Error","current","KEY","Symbol","resolveState","target","contexts","resolveContext","provider","befores","afters","getContextIfExists","callback","opts","animationFrameHandler","window","handle","detail","prevTime","currentTime","deltaTime","next","start","cancel","now","performance","requestAnimationFrame","d","cancelAnimationFrame","newCallback","deleteCallback","new","delete","components","nameClassMapping","nextAvailableEntityId","queue","listeners","queries","entityComponentChangedCallback","attached","detached","addEventListener","event","removeEventListener","flush","args","shift","instance","attachImmediately","detachImmediately","clearImmediately","create","destroy","componentName","keys","instanceMap","exists","componentClasses","mapOf","map","Number","instances","keysOf","valuesOf","entityIds","Set","add","locky","position","forward","right","up","forwardAmount","rightAmount","upAmount","pitch","yaw","look","dx","dy","dt","min","max","move","apply","rady","radp","cosy","cos","cosp","siny","sin","dz","normalize","set","cross","scale","mat4","lookAt","left","top","bottom","near","far","super","orthoBounds","undefined","clippingPlane","hasBounds","aspectRatio","ortho","fieldOfView","perspective","s","sort","join","findIndex","v","queryManager","Array","fill","_nextAvailableSceneNodeId","createSceneNode","info","createSceneNodes","deleteSceneNode","deleteSceneNodes","sceneNodes","getSceneNodeInfo","parentSceneNode","replaceSceneNode","replacementNode","grandChildren","slice","replacementInfo","walk","from","childFilter","fromNodes","isArray","fromNode","dispatch","topicManager","attachment","dispatchImmediately","on","off","once","wrapper","poll","amount","retain","pollAndRetain","cachedIn","cachedOut","callbacks","maxRetains","nameTopicMapping","topic","callbacksOf","countEventListeners","incomingOf","outgoingOf","outgoing","topicName","maxPerTopic","incoming","getPendingRetainCount","getPendingFlushCount","async","providers","context","Promise","all","handler","reverse","x","y","z","rotation","quat","getTranslation","getRotation","targetRotation","slerp","fromRotationTranslation","translation","translate","normalizedScreenCoordX","normalizedScreenCoordY","normalized","vec4","invert","transformMat4"],"mappings":"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"}