{"version":3,"file":"milque-scene.cjs.js","sources":["../src/camera/CameraHelper.js","../src/camera/Camera.js","../src/camera/PerspectiveCamera.js","../src/camera/FirstPersonCameraController.js","../src/scenegraph/SceneGraph.js","../src/entity/QueryManager.js","../src/entity/Query.js","../src/topic/TopicManager.js","../src/loop/AnimationFrameLoop.js","../src/entity/ComponentClass.js","../src/entity/EntityManager.js","../src/entity/EntityTemplate.js","../src/camera/OrthographicCamera.js","../src/topic/Topic.js"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\n\nconst UP = vec3.fromValues(0, 1, 0);\n\nexport function panTo(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  mat4.getTranslation(position, viewMatrix);\n  let translation = vec3.fromValues(\n    (x - position[0]) * dt,\n    (y - position[1]) * dt,\n    (z - position[2]) * dt\n  );\n  mat4.translate(viewMatrix, viewMatrix, translation);\n}\n\nexport function lookAt(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  let rotation = quat.create();\n  mat4.getTranslation(position, viewMatrix);\n  mat4.getRotation(rotation, viewMatrix);\n  let target = vec3.fromValues(x, y, z);\n\n  mat4.lookAt(viewMatrix, position, target, UP);\n\n  let targetRotation = quat.create();\n  mat4.getRotation(targetRotation, viewMatrix);\n  quat.slerp(rotation, rotation, targetRotation, dt);\n\n  mat4.fromRotationTranslation(viewMatrix, rotation, position);\n}\n\n/**\n * Gets a directional ray in the world space from the given normalized\n * screen coordinates and camera matrices.\n *\n * NOTE: In addition to some scaling, the y component from a pointer's\n * position usually has to be flipped to match the normalized screen\n * coordinate space, which assumes a range of [-1, 1] for both x and y,\n * where (0, 0) is the center and (-1, -1) is the bottom-left of the\n * screen.\n *\n * ### Typical Device Screen Coordinate Space:\n * ```\n * (0,0)------------(w,0)\n *    |               |\n *    |   (w/2,h/2)   |\n *    |               |\n * (0,w)------------(w,h)\n * ```\n *\n * ### Normalized Screen Coordinate Space:\n * ```\n * (-1,+1)---------(+1,+1)\n *    |               |\n *    |     (0,0)     |\n *    |               |\n * (-1,-1)---------(+1,-1)\n * ```\n *\n * ### Example Conversion from Device to Normalized:\n * ```\n * let normalizedScreenX = (canvasClientX / canvasWidth) * 2 - 1;\n * let normalizedScreenY = 1 - (canvasClientY / canvasHeight) * 2;\n * ```\n *\n * @param {vec3} out The output vector.\n * @param {number} normalizedScreenCoordX The X screen coordinate normalized to [-1, 1], where -1 is the left side of the screen.\n * @param {number} normalizedScreenCoordY The Y screen coordinate normalized to [-1, 1], where -1 is the bottom side of the screen.\n * @param {mat4} projectionMatrix The projection matrix of the world camera.\n * @param {mat4} viewMatrix The view matrix of the world camera.\n * @param {boolean} [normalized=false] Whether to normalize the result. Usually true for non-orthogonal projections.\n * @returns {vec3} The ray direction in the world space. By default, this is not normalized.\n */\nexport function screenToWorldRay(\n  out,\n  normalizedScreenCoordX,\n  normalizedScreenCoordY,\n  projectionMatrix,\n  viewMatrix,\n  normalized = false\n) {\n  // https://antongerdelan.net/opengl/raycasting.html\n  // To homogeneous clip coords\n  let v = vec4.fromValues(\n    normalizedScreenCoordX,\n    normalizedScreenCoordY,\n    -1,\n    1\n  );\n  // To camera coords\n  let m = mat4.create();\n  mat4.invert(m, projectionMatrix);\n  vec4.transformMat4(v, v, m);\n  v[2] = -1;\n  v[3] = 0;\n  // To world coords\n  mat4.invert(m, viewMatrix);\n  vec4.transformMat4(v, v, m);\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  // Normalized as directional ray\n  if (normalized) {\n    vec3.normalize(out, out);\n  }\n  return out;\n}\n","export class Camera {\n  constructor(projectionMatrix, viewMatrix) {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n  }\n\n  /**\n   * @abstract\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   * @returns {Camera}\n   */\n  // eslint-disable-next-line no-unused-vars\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    return this;\n  }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nconst DEFAULT_FOVY = Math.PI / 3;\n\nexport class PerspectiveCamera extends Camera {\n  constructor(fieldOfView = DEFAULT_FOVY, near = 0.1, far = 1000) {\n    super(mat4.create(), mat4.create());\n\n    this.fieldOfView = Number(fieldOfView);\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /** @override */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const aspectRatio =\n      typeof viewportWidth === 'undefined' ? 1 : viewportWidth / viewportHeight;\n    const { near, far } = this.clippingPlane;\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fieldOfView,\n      aspectRatio,\n      near,\n      far\n    );\n    return this;\n  }\n}\n","import { vec3, mat4 } from 'gl-matrix';\n\nconst TO_RAD_FACTOR = Math.PI / 180;\n\n/**\n * A camera controller that behaves like a traditional first person camera.\n * Pitch is restricted to prevent gimbal lock and roll is ignored.\n *\n * NOTE: Don't forget to lock your pointer, i.e. `canvas.requestPointerLock()`.\n */\nexport class FirstPersonCameraController {\n  constructor(opts = { locky: false }) {\n    this.locky = opts.locky;\n\n    this.position = vec3.create();\n    this.forward = vec3.fromValues(0, 0, -1);\n    this.right = vec3.fromValues(1, 0, 0);\n    this.up = vec3.fromValues(0, 1, 0);\n\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    this.pitch = 0;\n    this.yaw = -90;\n  }\n\n  look(dx, dy, dt = 1) {\n    // NOTE: Increase sensitivity to relatively match movement.\n    dt *= 1000;\n    this.pitch = Math.min(89.9, Math.max(-89.9, this.pitch + dy * dt));\n    this.yaw = (this.yaw + dx * dt) % 360;\n    return this;\n  }\n\n  move(forward, right = 0, up = 0, dt = 1) {\n    this.forwardAmount += forward * dt;\n    this.rightAmount += right * dt;\n    this.upAmount += up * dt;\n    return this;\n  }\n\n  apply(viewMatrix) {\n    let {\n      position,\n      forward,\n      right,\n      up,\n      forwardAmount,\n      rightAmount,\n      upAmount,\n      pitch,\n      yaw,\n    } = this;\n\n    // Calculate forward and right vectors\n    let rady = yaw * TO_RAD_FACTOR;\n    let radp = pitch * TO_RAD_FACTOR;\n    let cosy = Math.cos(rady);\n    let cosp = Math.cos(radp);\n    let siny = Math.sin(rady);\n    let sinp = Math.sin(radp);\n    let dx = cosy * cosp;\n    let dy = sinp;\n    let dz = siny * cosp;\n\n    // Set forward for move vector\n    vec3.normalize(forward, vec3.set(forward, dx, this.locky ? 0 : dy, dz));\n    vec3.normalize(right, vec3.cross(right, forward, up));\n\n    let move = vec3.create();\n    // Move forward\n    vec3.scale(move, forward, forwardAmount);\n    vec3.add(position, position, move);\n    // Move right\n    vec3.scale(move, right, rightAmount);\n    vec3.add(position, position, move);\n    // Move up\n    vec3.scale(move, up, upAmount);\n    vec3.add(position, position, move);\n    // Reset movement\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    // Reset forward for look vector\n    if (this.locky) vec3.set(forward, dx, dy, dz);\n\n    let target = vec3.add(move, position, forward);\n    mat4.lookAt(viewMatrix, position, target, up);\n    return viewMatrix;\n  }\n}\n","const MAX_DEPTH_LEVEL = 100;\n\n/**\n * @typedef {Number} SceneNode\n *\n * @typedef SceneNodeInfo\n * @property {SceneNode} parent The parent node. If the node does not have a parent,\n * it will be 0.\n * @property {Array<SceneNode>} children The list of child nodes.\n *\n * @callback WalkCallback Called for each node, before traversing its children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {WalkBackCallback|Boolean} If false, the walk will skip\n * the current node's children and all of its descendents. If a function,\n * it will be called after traversing down all of its children.\n *\n * @callback WalkBackCallback Called if returned by {@link WalkCallback}, after\n * traversing the current node's children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n *\n * @callback WalkChildrenCallback Called for each level of children, before\n * traversing them. This is usually used to determine visit order.\n * @param {Array<SceneNode>} childNodes A list of child nodes to be visited.\n * @param {SceneNode} parentNode The current parent node of these children.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {Array<SceneNode>} The list of children to traverse for this parent.\n */\n\n/**\n * A tree-like graph of nodes with n-children.\n */\nexport class SceneGraph {\n  /**\n   * Constructs an empty scene graph.\n   */\n  constructor() {\n    this.nodes = {};\n    this.roots = [];\n\n    this._nextAvailableSceneNodeId = 1;\n  }\n\n  /**\n   * Creates a scene node in the scene graph.\n   *\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * node.\n   * @returns {SceneNode} The created scene node.\n   */\n  createSceneNode(parentNode = undefined) {\n    let sceneNode = this._nextAvailableSceneNodeId++;\n    let info = createSceneNodeInfo();\n    this.nodes[sceneNode] = info;\n    attach(parentNode, sceneNode, this);\n    return sceneNode;\n  }\n\n  /**\n   * Creates multiple scene nodes in the scene graph.\n   *\n   * @param {Number} count The number of scene nodes to create.\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * nodes.\n   * @returns {Array<SceneNode>} A list of created scene nodes.\n   */\n  createSceneNodes(count, parentNode = undefined) {\n    let result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(this.createSceneNode(parentNode));\n    }\n    return result;\n  }\n\n  /**\n   * Deletes a scene node from the scene graph, along with all\n   * of its descendents.\n   *\n   * @param {SceneNode} sceneNode The scene node to remove.\n   */\n  deleteSceneNode(sceneNode) {\n    if (sceneNode in this.nodes) {\n      let info = this.nodes[sceneNode];\n      detach(info.parent, sceneNode, this);\n      walkImpl(this, sceneNode, 0, walkDeleteCallback);\n    } else {\n      throw new Error('Cannot delete non-existant scene node for scene graph.');\n    }\n  }\n\n  /**\n   * Deletes all given scene nodes from the scene graph, along with all\n   * of their descendents.\n   *\n   * @param {Array<SceneNode>} sceneNodes A list of scene nodes to remove.\n   */\n  deleteSceneNodes(sceneNodes) {\n    for (let sceneNode of sceneNodes) {\n      this.deleteSceneNode(sceneNode);\n    }\n  }\n\n  /**\n   * Get the scene node's info.\n   *\n   * @param {SceneNode} sceneNode The scene node to get info for.\n   * @returns {SceneNodeInfo} The info for the given scene node.\n   */\n  getSceneNodeInfo(sceneNode) {\n    return this.nodes[sceneNode];\n  }\n\n  /**\n   * Changes the parent of the scene node with the new parent node in\n   * the graph.\n   *\n   * @param {SceneNode} sceneNode The target scene node to change.\n   * @param {SceneNode} parentNode The scene node to set as the parent.\n   */\n  parentSceneNode(sceneNode, parentNode) {\n    let info = this.nodes[sceneNode];\n    detach(info.parent, sceneNode, this);\n    attach(parentNode, sceneNode, this);\n  }\n\n  /**\n   * Replaces the scene node with the new replacement node in the graph,\n   * inheriting its parent and children.\n   *\n   * @param {SceneNode} sceneNode The target scene node to replace.\n   * @param {SceneNode} replacementNode The scene node to replace with. If falsey,\n   * it will remove the target scene node and the target's parent will adopt\n   * its grandchildren. If the target did not have parents, the grandchildren will\n   * become root nodes in the graph.\n   */\n  replaceSceneNode(sceneNode, replacementNode) {\n    let info = this.nodes[sceneNode];\n    let parentNode = info.parent;\n    let grandChildren = info.children.slice();\n\n    // Remove the target node from graph\n    detach(parentNode, sceneNode, this);\n\n    // Begin grafting the grandchildren by removing them...\n    info.children.length = 0;\n\n    if (replacementNode) {\n      // Reattach all grandchildren to new replacement node.\n      let replacementInfo = this.nodes[replacementNode];\n      let replacementParent = replacementInfo.parent;\n\n      // Remove replacement node from previous parent\n      detach(replacementParent, replacementNode, this);\n\n      // ...and graft them back.\n      replacementInfo.children.push(...grandChildren);\n\n      // And reattach target parent to new child.\n      attach(parentNode, replacementNode, this);\n    } else {\n      // Reattach all grandchildren to target parent...\n      if (parentNode) {\n        //...as regular children.\n        let parentInfo = this.nodes[parentNode];\n        parentInfo.children.push(...grandChildren);\n      } else {\n        //...as root children.\n        this.roots.push(...grandChildren);\n      }\n    }\n\n    // ...and repair their parent relations.\n    for (let childNode of grandChildren) {\n      this.nodes[childNode].parent = parentNode;\n    }\n  }\n\n  /**\n   * Walks through every child node in the graph.\n   *\n   * @param {WalkCallback} callback The function called for each node\n   * in the graph, in ordered traversal from parent to child.\n   * @param {Object} [opts={}] Any additional options.\n   * @param {SceneNode|Array<SceneNode>} [opts.from] The parent node to\n   * start walking from, inclusive. By default, it will start from the root\n   * nodes.\n   * @param {WalkChildrenCallback} [opts.childfilter] The function called before\n   * walking through the children. This is usually used to determine the\n   * visiting order.\n   */\n  walk(callback, opts = {}) {\n    const { from = undefined, childFilter = undefined } = opts;\n\n    let fromNodes;\n    if (!from) fromNodes = this.roots;\n    else if (!Array.isArray(from)) fromNodes = [from];\n    else fromNodes = from;\n\n    if (childFilter) fromNodes = childFilter(fromNodes, 0, this);\n    for (let fromNode of fromNodes) {\n      walkImpl(this, fromNode, 0, callback, childFilter);\n    }\n  }\n}\n\n/**\n * @param {SceneNode} key The scene node handle.\n * @returns {SceneNodeInfo} The scene node metadata.\n */\nfunction createSceneNodeInfo() {\n  return {\n    parent: 0,\n    children: [],\n  };\n}\n\n/**\n * Attaches a child node to a parent in the scene graph. If parentNode is\n * null, then it will attach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction attach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has new parent; attach to parent. It is now in the graph.\n    sceneGraph.nodes[parentNode].children.push(childNode);\n    sceneGraph.nodes[childNode].parent = parentNode;\n  } else {\n    // No parent; move to root. It is now in the graph.\n    sceneGraph.roots.push(childNode);\n    sceneGraph.nodes[childNode].parent = 0;\n  }\n}\n\n/**\n * Detaches a child node from its parent in the scene graph. If parentNode is\n * null, then it will detach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction detach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has parent; detach from parent. It is now a free node.\n    let children = sceneGraph.nodes[parentNode].children;\n    let childIndex = children.indexOf(childNode);\n    children.splice(childIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  } else {\n    // No parent; remove from root. It is now a free node.\n    let roots = sceneGraph.roots;\n    let rootIndex = roots.indexOf(childNode);\n    roots.splice(rootIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  }\n}\n\n/**\n * Walk down from the parent and through all its descendents.\n *\n * @param {SceneGraph} sceneGraph The scene graph containing the nodes to be visited.\n * @param {SceneNode} parentNode The parent node to start walking from.\n * @param {Number} level The current call depth level. This is used to limit the call stack.\n * @param {WalkCallback} nodeCallback The function called on each visited node.\n * @param {WalkChildrenCallback} [filterCallback] The function called before\n * walking through the children. This is usually used to determine the visiting order.\n */\nfunction walkImpl(\n  sceneGraph,\n  parentNode,\n  level,\n  nodeCallback,\n  filterCallback = undefined\n) {\n  if (level >= MAX_DEPTH_LEVEL) return;\n\n  let result = nodeCallback(parentNode, sceneGraph);\n  if (result === false) return;\n\n  let parentInfo = sceneGraph.nodes[parentNode];\n  let nextNodes = filterCallback\n    ? filterCallback(parentInfo.children, parentNode, sceneGraph)\n    : parentInfo.children;\n\n  for (let childNode of nextNodes) {\n    walkImpl(sceneGraph, childNode, level + 1, nodeCallback, filterCallback);\n  }\n\n  if (typeof result === 'function') {\n    result(parentNode, sceneGraph);\n  }\n}\n\nfunction walkDeleteCallback(sceneNode, sceneGraph) {\n  delete sceneGraph.nodes[sceneNode];\n}\n","import { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityManager} EntityManager */\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./Query').Query<T>} Query<T>\n */\n\nexport class QueryManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<EntityId>>}\n         */\n        this.cachedResults = {};\n        /**\n         * @private\n         * @type {Record<string, Query<?>>}\n         */\n        this.keyQueryMapping = {};\n\n        this.onEntityComponentChanged = this.onEntityComponentChanged.bind(this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} added\n     * @param {ComponentClass<?>} removed\n     * @param {boolean} dead\n     */\n    onEntityComponentChanged(entityManager, entityId, added, removed, dead) {\n        for(let query of Object.values(this.keyQueryMapping)) {\n            let entities = this.cachedResults[query.key];\n            if (dead) {\n                let i = entities.indexOf(entityId);\n                if (i >= 0) {\n                    entities.splice(i, 1);\n                }\n            } else if (added) {\n                if (query.hasSelector(Not(added))) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                } else if (query.hasSelector(added) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                }\n            } else if (removed) {\n                if (query.hasSelector(Not(removed)) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                } else if (query.hasSelector(removed) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query \n     * @returns {EntityId}\n     */\n    findAny(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        if (result.length <= 0) {\n            return null;\n        } else {\n            return result[Math.floor(Math.random() * result.length)];\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query\n     * @returns {Array<EntityId>}\n     */\n    findAll(entityManager, query) {\n        const queryKey = query.key;\n        let result;\n        if (!(queryKey in this.keyQueryMapping)) {\n            result = [];\n            this.keyQueryMapping[queryKey] = query;\n            this.cachedResults[queryKey] = result;\n            query.hydrate(entityManager, result);\n        } else {\n            result = this.cachedResults[queryKey];\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query \n     */\n    count(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        return result.length;\n    }\n\n    /**\n     * @param {Query<?>} query\n     */\n    clear(query) {\n        const queryKey = query.key;\n        if (!(queryKey in this.keyQueryMapping)) {\n            return;\n        }\n        delete this.keyQueryMapping[queryKey];\n        delete this.cachedResults[queryKey];\n    }\n    \n    reset() {\n        this.keyQueryMapping = {};\n        this.cachedResults = {};\n    }\n}\n\n/**\n * @template T\n * @typedef {SelectorNot<T>|ComponentClass<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef SelectorNot<T>\n * @property {'not'} type\n * @property {string} name\n * @property {ComponentClass<T>} value\n */\n\n/**\n * @template T\n * @param {ComponentClass<T>} componentClass \n * @returns {ComponentClass<T>}\n */\nexport function Not(componentClass) {\n    return {\n        // @ts-ignore\n        type: 'not',\n        name: componentClass.name,\n        value: componentClass,\n    };\n}\n\nexport function isSelectorNot(selector) {\n    return 'type' in selector && selector.type === 'not';\n}\n","import { ComponentClass } from './ComponentClass';\nimport { EntityManager } from './EntityManager';\nimport { isSelectorNot } from './QueryManager';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').Selector<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').SelectorNot<T>} SelectorNot<T>\n */\n\n/**\n * @template T\n * @typedef {import('./EntityTemplate').ComponentInstancesOf<T>} ComponentInstancesOf<T>\n */\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class Query {\n\n    /**\n     * @param {T} selectors \n     */\n    constructor(...selectors) {\n        this.selectors = selectors;\n        this.key = selectors.map(s => isSelectorNot(s) ? `!${s.name}` : s.name).sort().join('&');\n    }\n\n    /**\n     * @param {Selector<?>} selector\n     */\n    hasSelector(selector) {\n        if (isSelectorNot(selector)) {\n            return this.selectors.findIndex(v => isSelectorNot(v) && v.name === selector.name) >= 0;\n        } else {\n            return this.selectors.findIndex(v => v.name === selector.name) >= 0;\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId\n     */\n    test(entityManager, entityId) {\n        for(let selector of this.selectors) {\n            if (isSelectorNot(selector)) {\n                const componentClass = /** @type {SelectorNot<?>} */ (/** @type {unknown} */ (selector)).value;\n                if (entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            } else {\n                const componentClass = /** @type {ComponentClass<?>} */ (/** @type {unknown} */ (selector));\n                if (!entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Array<EntityId>} result \n     */\n    hydrate(entityManager, result) {\n        if (this.selectors.length <= 0) {\n            result.length = 0;\n            return result;\n        }\n        let entities = entityManager.entityIds();\n        for(let entityId of entities) {\n            if (this.test(entityManager, entityId)) {\n                result.push(entityId);\n            }\n        }\n        return result;\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {number}\n     */\n    count(entityManager) {\n        return entityManager.queryManager.count(entityManager, this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    findAny(entityManager) {\n        const queryManager = entityManager.queryManager;\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (new Array(this.selectors.length + 1));\n        let entityId = queryManager.findAny(entityManager, this);\n        if (entityId === null) {\n            return result.fill(undefined);\n        }\n        computeResult(result, entityManager, entityId, this.selectors);\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {Generator<[EntityId, ...ComponentInstancesOf<T>]>}\n     */\n    *findAll(entityManager) {\n        const queryManager = entityManager.queryManager;\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (new Array(this.selectors.length + 1));\n        let entities = queryManager.findAll(entityManager, this);\n        for(let entityId of entities) {\n            computeResult(result, entityManager, entityId, this.selectors);\n            yield result;\n        }\n    }\n}\n\n/**\n * @template {ComponentClass<any>[]} T\n * @param {[EntityId, ...ComponentInstancesOf<T>]} out\n * @param {EntityManager} entityManager  \n * @param {EntityId} entityId\n * @param {T} selectors\n * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n */\nfunction computeResult(out, entityManager, entityId, selectors) {\n    out[0] = entityId;\n    let i = 1;\n    for(let selector of selectors) {\n        if (isSelectorNot(selector)) {\n            out[i] = null;\n        } else {\n            out[i] = entityManager.get(entityId, selector);\n        }\n        ++i;\n    }\n    return out;\n}\n","/**\n * @template T\n * @typedef {import('./Topic').Topic<T>} Topic<T>\n */\n\n/**\n * @template T\n * @typedef {(attachment: T) => void|boolean} TopicCallback<T>\n */\n\n/**\n * @template T\n * @typedef TopicCallbackEntry\n * @property {TopicCallback<T>} callback\n * @property {number} priority\n */\n\n/**\n * @template T\n * @param {TopicCallbackEntry<T>} a\n * @param {TopicCallbackEntry<T>} b\n */\nfunction comparator(a, b) {\n    return a.priority - b.priority;\n}\n\nexport class TopicManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedIn = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedOut = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<TopicCallbackEntry<?>>>}\n         */\n        this.callbacks = {};\n        /**\n         * @protected\n         * @type {Record<string, number>}\n         */\n        this.maxRetains = {};\n        /**\n         * @private\n         * @type {Record<string, Topic<?>>}\n         */\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     * @param {object} [opts]\n     * @param {number} [opts.priority]\n     */\n    addEventListener(topic, callback, opts = undefined) {\n        const { priority = 0 } = opts;\n        let callbacks = this.callbacksOf(topic);\n        callbacks.push({\n            callback,\n            priority,\n        });\n        callbacks.sort(comparator);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     */\n    removeEventListener(topic, callback) {\n        let callbacks = this.callbacksOf(topic);\n        let i = callbacks.findIndex(v => v.callback === callback);\n        if (i >= 0) {\n            callbacks.splice(i, 1);\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    countEventListeners(topic) {\n        return this.callbacksOf(topic).length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    dispatch(topic, attachment) {\n        let incoming = this.incomingOf(topic);\n        incoming.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    dispatchImmediately(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    count(topic) {\n        let outgoing = this.outgoingOf(topic);\n        return outgoing.length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     */\n    poll(topic) {\n        let outgoing = this.outgoingOf(topic);\n        if (outgoing.length <= 0) {\n            return null;\n        }\n        let result = outgoing.shift();\n        return result;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     * @param {number} amount\n     */\n    retain(topic, amount) {\n        const topicName = topic.name;\n        let max = Math.max(amount, this.maxRetains[topicName] || 0);\n        this.maxRetains[topicName] = max;\n    }\n\n    /**\n     * @param {number} [maxPerTopic]\n     */\n    flush(maxPerTopic = 100) {\n        for(const topicName of Object.keys(this.cachedIn)) {\n            const topic = this.nameTopicMapping[topicName];\n            const incoming = this.cachedIn[topicName];\n            const outgoing = this.cachedOut[topicName];\n            const retain = this.maxRetains[topicName] || 0;\n            if (retain < outgoing.length) {\n                outgoing.splice(0, outgoing.length - retain);\n            }\n            let max = Math.min(maxPerTopic, incoming.length);\n            for(let i = 0; i < max; ++i) {\n                let attachment = incoming.shift();\n                this.dispatchImmediately(topic, attachment);\n            }\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic \n     */\n    getPendingRetainCount(topic) {\n        return this.maxRetains[topic.name] || 0;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    getPendingFlushCount(topic) {\n        let incoming = this.incomingOf(topic);\n        return incoming.length;\n    }\n\n    reset() {\n        this.cachedIn = {};\n        this.cachedOut = {};\n        this.callbacks = {};\n        this.maxRetains = {};\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    incomingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedIn) {\n            return this.cachedIn[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = result;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    outgoingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedOut) {\n            return this.cachedOut[topicName];\n        } else {\n            let result = [];\n            this.cachedOut[topicName] = result;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<TopicCallbackEntry<T>>}\n     */\n    callbacksOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.callbacks) {\n            return this.callbacks[topicName];\n        } else {\n            let result = [];\n            this.callbacks[topicName] = result;\n            return result;\n        }\n    }\n}\n","/** @typedef {(frameDetail: AnimationFrameLoop) => void} AnimationFrameLoopCallback */\n\nexport class AnimationFrameLoop {\n    \n    /**\n     * @param {AnimationFrameLoopCallback} callback \n     * @param {object} [opts]\n     * @param {Window} [opts.animationFrameHandler]\n     */\n    constructor(callback, opts = undefined) {\n        const { animationFrameHandler = window } = opts || {};\n\n        /** @type {ReturnType<requestAnimationFrame>} */\n        this.handle = 0;\n        this.detail = {\n            prevTime: -1,\n            currentTime: -1,\n            deltaTime: 0,\n        };\n\n        /** @protected */\n        this.animationFrameHandler = animationFrameHandler;\n\n        /** @protected */\n        this.callback = callback;\n\n        this.next = this.next.bind(this);\n        this.start = this.start.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n    \n    next(now = performance.now()) {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        let d = this.detail;\n        d.prevTime = d.currentTime;\n        d.currentTime = now;\n        d.deltaTime = d.currentTime - d.prevTime;\n        this.callback(this);\n    }\n\n    start() {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        return this;\n    }\n\n    cancel() {\n        this.animationFrameHandler.cancelAnimationFrame(this.handle);\n        return this;\n    }\n}\n","/**\n * @template T\n */\nexport class ComponentClass {\n    /**\n     * @param {string} name \n     * @param {() => T} newCallback\n     * @param {(component: T) => void} [deleteCallback] \n     */\n    constructor(name, newCallback = () => null, deleteCallback = () => {}) {\n        this.name = name;\n        this.new = newCallback;\n        this.delete = deleteCallback;\n    }\n}\n","import { ComponentClass } from './ComponentClass';\nimport { QueryManager } from './QueryManager';\n\n/**\n * @template T\n * @typedef {Record<number, T>} ComponentInstanceMap<T>\n */\n\n/**\n * @typedef {Record<string, ComponentInstanceMap<?>>} ComponentClassMap\n * @typedef {number} EntityId\n * @typedef {string} ComponentName\n */\n\nexport class EntityManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {ComponentClassMap}\n         */\n        this.components = {};\n        /** @private */\n        this.nameClassMapping = {};\n        \n        /**\n         * @private\n         * @type {EntityId}\n         */\n        this.nextAvailableEntityId = 1;\n        /**\n         * @protected\n         * @type {Array<[string, ...any]>}\n         */\n        this.queue = [];\n\n        this.queries = new QueryManager();\n    }\n\n    /**\n     * @protected\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} added\n     * @param {ComponentClass<?>} removed\n     * @param {boolean} dead\n     */\n    entityComponentChangedCallback(entityId, added, removed, dead) {\n        this.queries.onEntityComponentChanged(this, entityId, added, removed, dead);\n    }\n\n    flush() {\n        while (this.queue.length > 0) {\n            let [type, ...args] = this.queue.shift();\n            switch (type) {\n                case 'attach': {\n                    let [entityId, componentClass, instance] = args;\n                    this.attachImmediately(entityId, componentClass, instance);\n                } break;\n                case 'detach': {\n                    let [entityId, componentClass] = args;\n                    this.detachImmediately(entityId, componentClass);\n                } break;\n                case 'clear': {\n                    let [componentClass] = args;\n                    this.clearImmediately(componentClass);\n                } break;\n            }\n        }\n    }\n\n    /**\n     * @returns {EntityId}\n     */\n    create() {\n        return this.nextAvailableEntityId++;\n    }\n\n    /**\n     * @param {EntityId} entityId \n     */\n    destroy(entityId) {\n        const components = this.components;\n        for (const componentName of Object.keys(components)) {\n            const instanceMap = components[componentName];\n            if (entityId in instanceMap) {\n                delete instanceMap[entityId];\n                this.entityComponentChangedCallback(entityId, null, this.nameClassMapping[componentName], false);\n            }\n        }\n        this.entityComponentChangedCallback(entityId, null, null, true);\n    }\n\n    /**\n     * Whether the entity exists with all provided component classes.\n     * \n     * @param {EntityId} entityId \n     * @param {...ComponentClass<?>} componentClasses\n     */\n    exists(entityId, ...componentClasses) {\n        if (componentClasses.length > 0) {\n            for(const componentClass of componentClasses) {\n                let instanceMap = this.mapOf(componentClass);\n                if (!(entityId in instanceMap)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let instanceMap of Object.values(this.components)) {\n                if (entityId in instanceMap) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attach(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        this.queue.push(['attach', entityId, componentClass, instance]);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attachImmediately(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        let instanceMap = this.mapOf(componentClass);\n        instanceMap[entityId] = instance;\n        this.entityComponentChangedCallback(entityId, componentClass, null, false);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     */\n    detach(entityId, componentClass) {\n        this.queue.push(['detach', entityId, componentClass]);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     */\n    detachImmediately(entityId, componentClass) {\n        let instanceMap = this.mapOf(componentClass);\n        let instance = instanceMap[entityId];\n        delete instanceMap[entityId];\n        componentClass.delete(instance);\n        this.entityComponentChangedCallback(entityId, null, componentClass, false);\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     */\n    clear(componentClass) {\n        this.queue.push(['clear', componentClass]);\n    }\n\n    /**\n     * @param {ComponentClass<any>} componentClass \n     */\n    clearImmediately(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        const instanceMap = components[componentName];\n        let entities = Object.keys(instanceMap).map(Number);\n        let instances = Object.values(instanceMap);\n        components[componentName] = {};\n        this.nameClassMapping[componentName] = componentClass;\n        for(let instance of instances) {\n            componentClass.delete(instance);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, componentClass, false);\n        }\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @returns {T}\n     */\n    get(entityId, componentClass) {\n        return this.mapOf(componentClass)[entityId] || null;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     * @returns {number}\n     */\n    count(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).length;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass\n     */\n    keysOf(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).map(Number);\n    }\n\n    /**\n     * @template T\n     * @param {ComponentClass<T>} componentClass \n     * @returns {Array<T>}\n     */\n    valuesOf(componentClass) {\n        return Object.values(this.mapOf(componentClass));\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {ComponentClass<T>} componentClass\n     * @returns {ComponentInstanceMap<T>} A map of entity ids to component instance data.\n     */\n    mapOf(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        if (!(componentName in components)) {\n            /** @type {ComponentInstanceMap<T>} */\n            let map = {};\n            components[componentName] = map;\n            this.nameClassMapping[componentName] = componentClass;\n            return map;\n        } else {\n            return components[componentName];\n        }\n    }\n\n    /** @returns {Set<EntityId>} */\n    entityIds() {\n        let result = new Set();\n        for (let instanceMap of Object.values(this.components)) {\n            for(let entityId of Object.keys(instanceMap)) {\n                result.add(entityId);\n            }\n        }\n        return result;\n    }\n\n    /** @returns {Array<ComponentClass<?>>} */\n    componentClasses() {\n        return Object.values(this.nameClassMapping);\n    }\n\n    reset() {\n        const components = this.components;\n        /** @type {Set<EntityId>} */\n        let entities = new Set();\n        for(const componentName of Object.keys(components)) {\n            const componentClass = this.nameClassMapping[componentName];\n            const instanceMap = components[componentName];\n            for(let entityId of Object.keys(instanceMap)) {\n                entities.add(Number(entityId));\n            }\n            this.clearImmediately(componentClass);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, null, true);\n        }\n        entities.clear();\n        this.queries.reset();\n        this.components = {};\n        this.nextAvailableEntityId = 1;\n        this.queue.length = 0;\n    }\n}\n","import { EntityManager } from './EntityManager';\nimport { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template {ComponentClass<any>[]} T\n * @typedef {{[K in keyof T]: T[K] extends ComponentClass<infer V> ? V : never}} ComponentInstancesOf<T>\n */\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class EntityTemplate {\n    /**\n     * @param {T} componentClasses \n     */\n    constructor(...componentClasses) {\n        /** @private */\n        this.componentClasses = componentClasses;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    create(entityManager) {\n        let entityId = entityManager.create();\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (/** @type {unknown} */ ([entityId]));\n        for (let componentClass of this.componentClasses) {\n            let instance = entityManager.attach(entityId, componentClass);\n            result.push(instance);\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId \n     */\n    destroy(entityManager, entityId) {\n        for (let componentClass of this.componentClasses) {\n            entityManager.detach(entityId, componentClass);\n        }\n    }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nexport class OrthographicCamera extends Camera {\n  /**\n   * @param {number} [left]\n   * @param {number} [top]\n   * @param {number} [right]\n   * @param {number} [bottom]\n   * @param {number} [near]\n   * @param {number} [far]\n   */\n  constructor(\n    left = undefined,\n    top = undefined,\n    right = undefined,\n    bottom = undefined,\n    near = -1000,\n    far = 1000\n  ) {\n    super(mat4.create(), mat4.create());\n\n    this.orthoBounds = {\n      left: typeof left === 'undefined' ? undefined : Number(left),\n      top: typeof top === 'undefined' ? undefined : Number(top),\n      right: typeof right === 'undefined' ? undefined : Number(right),\n      bottom: typeof bottom === 'undefined' ? undefined : Number(bottom),\n    };\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /**\n   * If both the bounds and viewport dimensions are defined, the orthographic\n   * projection will be set the defined bounds adjusted with respect to\n   * the aspect ratio. This is usually the desired behavior.\n   *\n   * If the bounds are `undefined`, the orthographic projection will\n   * be set to the viewport dimensions. This is useful for pixel-perfect\n   * projections.\n   *\n   * If viewport dimensions are `undefined`, the orthographic projection\n   * will only use the defined bounds. This is useful if you are already\n   * performing your own calculations for the bounds or desire a static\n   * projection.\n   *\n   * @override\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const { near, far } = this.clippingPlane;\n    const { left, top, right, bottom } = this.orthoBounds;\n\n    let projectionMatrix = this.projectionMatrix;\n    let hasViewport = typeof viewportWidth !== 'undefined';\n    let hasBounds = typeof left !== 'undefined';\n\n    if (hasViewport) {\n      if (hasBounds) {\n        // Use the defined bounds with respect to the viewport aspect ratio\n        const aspectRatio = viewportWidth / viewportHeight;\n        mat4.ortho(\n          projectionMatrix,\n          left * aspectRatio,\n          right * aspectRatio,\n          bottom,\n          top,\n          near,\n          far\n        );\n      } else {\n        // Use the viewport dimensions as bounds\n        mat4.ortho(\n          projectionMatrix,\n          0,\n          viewportWidth,\n          viewportHeight,\n          0,\n          near,\n          far\n        );\n      }\n    } else {\n      if (hasBounds) {\n        // Use the defined bounds as-is\n        mat4.ortho(projectionMatrix, left, right, bottom, top, near, far);\n      } else {\n        // Use default bounds (since nothing else exists)\n        mat4.ortho(projectionMatrix, -1, 1, 1, -1, -1, 1);\n      }\n    }\n    return this;\n  }\n}\n","/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {import('./TopicManager').TopicCallback<T>} TopicCallback<T>\n */\n\n/**\n * @template T\n */\nexport class Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        this.name = name;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatch(topicManager, attachment) {\n        topicManager.dispatch(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    on(topicManager, priority, callback) {\n        topicManager.addEventListener(this, callback, { priority });\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {TopicCallback<T>} callback\n     */\n    off(topicManager, callback) {\n        topicManager.removeEventListener(this, callback);\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    once(topicManager, priority, callback) {\n        let wrapper = (attachment) => {\n            this.off(topicManager, wrapper);\n            return callback(attachment);\n        };\n        return this.on(topicManager, priority, wrapper);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *poll(topicManager, amount) {\n        amount = Math.min(amount, topicManager.count(this));\n        for(let i = 0; i < amount; ++i) {\n            yield topicManager.poll(this);\n        }\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    retain(topicManager, amount) {\n        topicManager.retain(this, amount);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *pollAndRetain(topicManager, amount) {\n        this.retain(topicManager, amount);\n        for(let result of this.poll(topicManager, amount)) {\n            yield result;\n        }\n    }\n}\n"],"names":["UP","vec3","fromValues","Camera","constructor","projectionMatrix","viewMatrix","this","resize","viewportWidth","viewportHeight","DEFAULT_FOVY","Math","PI","TO_RAD_FACTOR","MAX_DEPTH_LEVEL","attach","parentNode","childNode","sceneGraph","nodes","children","push","parent","roots","detach","childIndex","indexOf","splice","rootIndex","walkImpl","level","nodeCallback","filterCallback","result","parentInfo","nextNodes","walkDeleteCallback","sceneNode","QueryManager","cachedResults","keyQueryMapping","onEntityComponentChanged","bind","entityManager","entityId","added","removed","dead","query","Object","values","entities","key","i","hasSelector","Not","test","findAny","findAll","length","floor","random","queryKey","hydrate","count","clear","reset","componentClass","type","name","value","isSelectorNot","selector","computeResult","out","selectors","get","comparator","a","b","priority","callback","opts","animationFrameHandler","window","handle","detail","prevTime","currentTime","deltaTime","next","start","cancel","now","performance","requestAnimationFrame","d","cancelAnimationFrame","newCallback","deleteCallback","new","delete","components","nameClassMapping","nextAvailableEntityId","queue","queries","entityComponentChangedCallback","flush","args","shift","instance","attachImmediately","detachImmediately","clearImmediately","create","destroy","componentName","keys","instanceMap","exists","componentClasses","mapOf","map","Number","instances","keysOf","valuesOf","entityIds","Set","add","locky","position","forward","right","up","forwardAmount","rightAmount","upAmount","pitch","yaw","look","dx","dy","dt","min","max","move","apply","rady","radp","cosy","cos","cosp","siny","sin","dz","normalize","set","cross","scale","target","mat4","lookAt","left","top","bottom","near","far","super","orthoBounds","undefined","clippingPlane","hasBounds","aspectRatio","ortho","fieldOfView","perspective","s","sort","join","findIndex","v","queryManager","Array","fill","_nextAvailableSceneNodeId","createSceneNode","info","createSceneNodes","deleteSceneNode","Error","deleteSceneNodes","sceneNodes","getSceneNodeInfo","parentSceneNode","replaceSceneNode","replacementNode","grandChildren","slice","replacementInfo","walk","from","childFilter","fromNodes","isArray","fromNode","dispatch","topicManager","attachment","on","addEventListener","off","removeEventListener","once","wrapper","poll","amount","retain","pollAndRetain","cachedIn","cachedOut","callbacks","maxRetains","nameTopicMapping","topic","callbacksOf","countEventListeners","incomingOf","dispatchImmediately","outgoingOf","outgoing","topicName","maxPerTopic","incoming","getPendingRetainCount","getPendingFlushCount","x","y","z","rotation","quat","getTranslation","getRotation","targetRotation","slerp","fromRotationTranslation","translation","translate","normalizedScreenCoordX","normalizedScreenCoordY","normalized","vec4","m","invert","transformMat4"],"mappings":"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"}