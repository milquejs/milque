{"version":3,"file":"milque-scene.cjs.js","sources":["../src/camera/CameraHelper.js","../src/camera/Camera.js","../src/camera/PerspectiveCamera.js","../src/camera/FirstPersonCameraController.js","../src/scenegraph/SceneGraph.js","../src/entity/QueryManager.js","../src/entity/Query.js","../src/topic/Topic.js","../src/topic/TopicManager.js","../src/loop/AnimationFrameLoop.js","../src/topic/AsyncTopic.js","../src/entity/ComponentClass.js","../src/entity/EntityManager.js","../src/entity/EntityTemplate.js","../src/camera/OrthographicCamera.js"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\n\nconst UP = vec3.fromValues(0, 1, 0);\n\nexport function panTo(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  mat4.getTranslation(position, viewMatrix);\n  let translation = vec3.fromValues(\n    (x - position[0]) * dt,\n    (y - position[1]) * dt,\n    (z - position[2]) * dt\n  );\n  mat4.translate(viewMatrix, viewMatrix, translation);\n}\n\nexport function lookAt(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  let rotation = quat.create();\n  mat4.getTranslation(position, viewMatrix);\n  mat4.getRotation(rotation, viewMatrix);\n  let target = vec3.fromValues(x, y, z);\n\n  mat4.lookAt(viewMatrix, position, target, UP);\n\n  let targetRotation = quat.create();\n  mat4.getRotation(targetRotation, viewMatrix);\n  quat.slerp(rotation, rotation, targetRotation, dt);\n\n  mat4.fromRotationTranslation(viewMatrix, rotation, position);\n}\n\n/**\n * Gets a directional ray in the world space from the given normalized\n * screen coordinates and camera matrices.\n *\n * NOTE: In addition to some scaling, the y component from a pointer's\n * position usually has to be flipped to match the normalized screen\n * coordinate space, which assumes a range of [-1, 1] for both x and y,\n * where (0, 0) is the center and (-1, -1) is the bottom-left of the\n * screen.\n *\n * ### Typical Device Screen Coordinate Space:\n * ```\n * (0,0)------------(w,0)\n *    |               |\n *    |   (w/2,h/2)   |\n *    |               |\n * (0,w)------------(w,h)\n * ```\n *\n * ### Normalized Screen Coordinate Space:\n * ```\n * (-1,+1)---------(+1,+1)\n *    |               |\n *    |     (0,0)     |\n *    |               |\n * (-1,-1)---------(+1,-1)\n * ```\n *\n * ### Example Conversion from Device to Normalized:\n * ```\n * let normalizedScreenX = (canvasClientX / canvasWidth) * 2 - 1;\n * let normalizedScreenY = 1 - (canvasClientY / canvasHeight) * 2;\n * ```\n *\n * @param {vec3} out The output vector.\n * @param {number} normalizedScreenCoordX The X screen coordinate normalized to [-1, 1], where -1 is the left side of the screen.\n * @param {number} normalizedScreenCoordY The Y screen coordinate normalized to [-1, 1], where -1 is the bottom side of the screen.\n * @param {mat4} projectionMatrix The projection matrix of the world camera.\n * @param {mat4} viewMatrix The view matrix of the world camera.\n * @param {boolean} [normalized=false] Whether to normalize the result. Usually true for non-orthogonal projections.\n * @returns {vec3} The ray direction in the world space. By default, this is not normalized.\n */\nexport function screenToWorldRay(\n  out,\n  normalizedScreenCoordX,\n  normalizedScreenCoordY,\n  projectionMatrix,\n  viewMatrix,\n  normalized = false\n) {\n  // https://antongerdelan.net/opengl/raycasting.html\n  // To homogeneous clip coords\n  let v = vec4.fromValues(\n    normalizedScreenCoordX,\n    normalizedScreenCoordY,\n    -1,\n    1\n  );\n  // To camera coords\n  let m = mat4.create();\n  mat4.invert(m, projectionMatrix);\n  vec4.transformMat4(v, v, m);\n  v[2] = -1;\n  v[3] = 0;\n  // To world coords\n  mat4.invert(m, viewMatrix);\n  vec4.transformMat4(v, v, m);\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  // Normalized as directional ray\n  if (normalized) {\n    vec3.normalize(out, out);\n  }\n  return out;\n}\n","export class Camera {\n  constructor(projectionMatrix, viewMatrix) {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n  }\n\n  /**\n   * @abstract\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   * @returns {Camera}\n   */\n  // eslint-disable-next-line no-unused-vars\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    return this;\n  }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nconst DEFAULT_FOVY = Math.PI / 3;\n\nexport class PerspectiveCamera extends Camera {\n  constructor(fieldOfView = DEFAULT_FOVY, near = 0.1, far = 1000) {\n    super(mat4.create(), mat4.create());\n\n    this.fieldOfView = Number(fieldOfView);\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /** @override */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const aspectRatio =\n      typeof viewportWidth === 'undefined' ? 1 : viewportWidth / viewportHeight;\n    const { near, far } = this.clippingPlane;\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fieldOfView,\n      aspectRatio,\n      near,\n      far\n    );\n    return this;\n  }\n}\n","import { vec3, mat4 } from 'gl-matrix';\n\nconst TO_RAD_FACTOR = Math.PI / 180;\n\n/**\n * A camera controller that behaves like a traditional first person camera.\n * Pitch is restricted to prevent gimbal lock and roll is ignored.\n *\n * NOTE: Don't forget to lock your pointer, i.e. `canvas.requestPointerLock()`.\n */\nexport class FirstPersonCameraController {\n  constructor(opts = { locky: false }) {\n    this.locky = opts.locky;\n\n    this.position = vec3.create();\n    this.forward = vec3.fromValues(0, 0, -1);\n    this.right = vec3.fromValues(1, 0, 0);\n    this.up = vec3.fromValues(0, 1, 0);\n\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    this.pitch = 0;\n    this.yaw = -90;\n  }\n\n  look(dx, dy, dt = 1) {\n    // NOTE: Increase sensitivity to relatively match movement.\n    dt *= 1000;\n    this.pitch = Math.min(89.9, Math.max(-89.9, this.pitch + dy * dt));\n    this.yaw = (this.yaw + dx * dt) % 360;\n    return this;\n  }\n\n  move(forward, right = 0, up = 0, dt = 1) {\n    this.forwardAmount += forward * dt;\n    this.rightAmount += right * dt;\n    this.upAmount += up * dt;\n    return this;\n  }\n\n  apply(viewMatrix) {\n    let {\n      position,\n      forward,\n      right,\n      up,\n      forwardAmount,\n      rightAmount,\n      upAmount,\n      pitch,\n      yaw,\n    } = this;\n\n    // Calculate forward and right vectors\n    let rady = yaw * TO_RAD_FACTOR;\n    let radp = pitch * TO_RAD_FACTOR;\n    let cosy = Math.cos(rady);\n    let cosp = Math.cos(radp);\n    let siny = Math.sin(rady);\n    let sinp = Math.sin(radp);\n    let dx = cosy * cosp;\n    let dy = sinp;\n    let dz = siny * cosp;\n\n    // Set forward for move vector\n    vec3.normalize(forward, vec3.set(forward, dx, this.locky ? 0 : dy, dz));\n    vec3.normalize(right, vec3.cross(right, forward, up));\n\n    let move = vec3.create();\n    // Move forward\n    vec3.scale(move, forward, forwardAmount);\n    vec3.add(position, position, move);\n    // Move right\n    vec3.scale(move, right, rightAmount);\n    vec3.add(position, position, move);\n    // Move up\n    vec3.scale(move, up, upAmount);\n    vec3.add(position, position, move);\n    // Reset movement\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    // Reset forward for look vector\n    if (this.locky) vec3.set(forward, dx, dy, dz);\n\n    let target = vec3.add(move, position, forward);\n    mat4.lookAt(viewMatrix, position, target, up);\n    return viewMatrix;\n  }\n}\n","const MAX_DEPTH_LEVEL = 100;\n\n/**\n * @typedef {number} SceneNode\n *\n * @typedef SceneNodeInfo\n * @property {SceneNode} parent The parent node. If the node does not have a parent,\n * it will be 0.\n * @property {Array<SceneNode>} children The list of child nodes.\n *\n * @callback WalkCallback Called for each node, before traversing its children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {WalkBackCallback|boolean|void} If false, the walk will skip\n * the current node's children and all of its descendents. If a function,\n * it will be called after traversing down all of its children.\n *\n * @callback WalkBackCallback Called if returned by {@link WalkCallback}, after\n * traversing the current node's children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n *\n * @callback WalkChildrenCallback Called for each level of children, before\n * traversing them. This is usually used to determine visit order.\n * @param {Array<SceneNode>} childNodes A list of child nodes to be visited.\n * @param {SceneNode} parentNode The current parent node of these children.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {Array<SceneNode>} The list of children to traverse for this parent.\n */\n\n/**\n * A tree-like graph of nodes with n-children.\n */\nexport class SceneGraph {\n  /**\n   * Constructs an empty scene graph.\n   */\n  constructor() {\n    this.nodes = {};\n    this.roots = [];\n\n    this._nextAvailableSceneNodeId = 1;\n  }\n\n  /**\n   * Creates a scene node in the scene graph.\n   *\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * node.\n   * @returns {SceneNode} The created scene node.\n   */\n  createSceneNode(parentNode = undefined) {\n    let sceneNode = this._nextAvailableSceneNodeId++;\n    let info = createSceneNodeInfo(sceneNode);\n    this.nodes[sceneNode] = info;\n    attach(parentNode, sceneNode, this);\n    return sceneNode;\n  }\n\n  /**\n   * Creates multiple scene nodes in the scene graph.\n   *\n   * @param {number} count The number of scene nodes to create.\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * nodes.\n   * @returns {Array<SceneNode>} A list of created scene nodes.\n   */\n  createSceneNodes(count, parentNode = undefined) {\n    let result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(this.createSceneNode(parentNode));\n    }\n    return result;\n  }\n\n  /**\n   * Deletes a scene node from the scene graph, along with all\n   * of its descendents.\n   *\n   * @param {SceneNode} sceneNode The scene node to remove.\n   */\n  deleteSceneNode(sceneNode) {\n    if (sceneNode in this.nodes) {\n      let info = this.nodes[sceneNode];\n      detach(info.parent, sceneNode, this);\n      walkImpl(this, sceneNode, 0, walkDeleteCallback);\n    } else {\n      throw new Error('Cannot delete non-existant scene node for scene graph.');\n    }\n  }\n\n  /**\n   * Deletes all given scene nodes from the scene graph, along with all\n   * of their descendents.\n   *\n   * @param {Array<SceneNode>} sceneNodes A list of scene nodes to remove.\n   */\n  deleteSceneNodes(sceneNodes) {\n    for (let sceneNode of sceneNodes) {\n      this.deleteSceneNode(sceneNode);\n    }\n  }\n\n  /**\n   * Get the scene node's info.\n   *\n   * @param {SceneNode} sceneNode The scene node to get info for.\n   * @returns {SceneNodeInfo} The info for the given scene node.\n   */\n  getSceneNodeInfo(sceneNode) {\n    return this.nodes[sceneNode];\n  }\n\n  /**\n   * Changes the parent of the scene node with the new parent node in\n   * the graph.\n   *\n   * @param {SceneNode} sceneNode The target scene node to change.\n   * @param {SceneNode} parentNode The scene node to set as the parent.\n   */\n  parentSceneNode(sceneNode, parentNode) {\n    let info = this.nodes[sceneNode];\n    detach(info.parent, sceneNode, this);\n    attach(parentNode, sceneNode, this);\n  }\n\n  /**\n   * Replaces the scene node with the new replacement node in the graph,\n   * inheriting its parent and children.\n   *\n   * @param {SceneNode} sceneNode The target scene node to replace.\n   * @param {SceneNode} replacementNode The scene node to replace with. If falsey,\n   * it will remove the target scene node and the target's parent will adopt\n   * its grandchildren. If the target did not have parents, the grandchildren will\n   * become root nodes in the graph.\n   */\n  replaceSceneNode(sceneNode, replacementNode) {\n    let info = this.nodes[sceneNode];\n    let parentNode = info.parent;\n    let grandChildren = info.children.slice();\n\n    // Remove the target node from graph\n    detach(parentNode, sceneNode, this);\n\n    // Begin grafting the grandchildren by removing them...\n    info.children.length = 0;\n\n    if (replacementNode) {\n      // Reattach all grandchildren to new replacement node.\n      let replacementInfo = this.nodes[replacementNode];\n      let replacementParent = replacementInfo.parent;\n\n      // Remove replacement node from previous parent\n      detach(replacementParent, replacementNode, this);\n\n      // ...and graft them back.\n      replacementInfo.children.push(...grandChildren);\n\n      // And reattach target parent to new child.\n      attach(parentNode, replacementNode, this);\n    } else {\n      // Reattach all grandchildren to target parent...\n      if (parentNode) {\n        //...as regular children.\n        let parentInfo = this.nodes[parentNode];\n        parentInfo.children.push(...grandChildren);\n      } else {\n        //...as root children.\n        this.roots.push(...grandChildren);\n      }\n    }\n\n    // ...and repair their parent relations.\n    for (let childNode of grandChildren) {\n      this.nodes[childNode].parent = parentNode;\n    }\n  }\n\n  /**\n   * Walks through every child node in the graph.\n   *\n   * @param {WalkCallback} callback The function called for each node\n   * in the graph, in ordered traversal from parent to child.\n   * @param {object} [opts] Any additional options.\n   * @param {SceneNode|Array<SceneNode>} [opts.from] The parent node to\n   * start walking from, inclusive. By default, it will start from the root\n   * nodes.\n   * @param {WalkChildrenCallback} [opts.childFilter] The function called before\n   * walking through the children. This is usually used to determine the\n   * visiting order.\n   */\n  walk(callback, opts = undefined) {\n    const { from = undefined, childFilter = undefined } = opts || {};\n\n    let fromNodes;\n    if (!from) fromNodes = this.roots;\n    else if (!Array.isArray(from)) fromNodes = [from];\n    else fromNodes = from;\n\n    if (childFilter) fromNodes = childFilter(fromNodes, 0, this);\n    for (let fromNode of fromNodes) {\n      walkImpl(this, fromNode, 0, callback, childFilter);\n    }\n  }\n}\n\n/**\n * @param {SceneNode} key The scene node handle.\n * @returns {SceneNodeInfo} The scene node metadata.\n */\nfunction createSceneNodeInfo(key) {\n  return {\n    parent: 0,\n    children: [],\n  };\n}\n\n/**\n * Attaches a child node to a parent in the scene graph. If parentNode is\n * null, then it will attach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction attach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has new parent; attach to parent. It is now in the graph.\n    sceneGraph.nodes[parentNode].children.push(childNode);\n    sceneGraph.nodes[childNode].parent = parentNode;\n  } else {\n    // No parent; move to root. It is now in the graph.\n    sceneGraph.roots.push(childNode);\n    sceneGraph.nodes[childNode].parent = 0;\n  }\n}\n\n/**\n * Detaches a child node from its parent in the scene graph. If parentNode is\n * null, then it will detach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction detach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has parent; detach from parent. It is now a free node.\n    let children = sceneGraph.nodes[parentNode].children;\n    let childIndex = children.indexOf(childNode);\n    children.splice(childIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  } else {\n    // No parent; remove from root. It is now a free node.\n    let roots = sceneGraph.roots;\n    let rootIndex = roots.indexOf(childNode);\n    roots.splice(rootIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  }\n}\n\n/**\n * Walk down from the parent and through all its descendents.\n *\n * @param {SceneGraph} sceneGraph The scene graph containing the nodes to be visited.\n * @param {SceneNode} parentNode The parent node to start walking from.\n * @param {number} level The current call depth level. This is used to limit the call stack.\n * @param {WalkCallback} nodeCallback The function called on each visited node.\n * @param {WalkChildrenCallback} [filterCallback] The function called before\n * walking through the children. This is usually used to determine the visiting order.\n */\nfunction walkImpl(\n  sceneGraph,\n  parentNode,\n  level,\n  nodeCallback,\n  filterCallback = undefined\n) {\n  if (level >= MAX_DEPTH_LEVEL) return;\n\n  let result = nodeCallback(parentNode, sceneGraph);\n  if (result === false) return;\n\n  let parentInfo = sceneGraph.nodes[parentNode];\n  let nextNodes = filterCallback\n    ? filterCallback(parentInfo.children, parentNode, sceneGraph)\n    : parentInfo.children;\n\n  for (let childNode of nextNodes) {\n    walkImpl(sceneGraph, childNode, level + 1, nodeCallback, filterCallback);\n  }\n\n  if (typeof result === 'function') {\n    result(parentNode, sceneGraph);\n  }\n}\n\nfunction walkDeleteCallback(sceneNode, sceneGraph) {\n  delete sceneGraph.nodes[sceneNode];\n}\n","import { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityManager} EntityManager */\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./Query').Query<T>} Query<T>\n */\n\nexport class QueryManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<EntityId>>}\n         */\n        this.cachedResults = {};\n        /**\n         * @private\n         * @type {Record<string, Query<?>>}\n         */\n        this.keyQueryMapping = {};\n\n        this.onEntityComponentChanged = this.onEntityComponentChanged.bind(this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} added\n     * @param {ComponentClass<?>} removed\n     * @param {boolean} dead\n     */\n    onEntityComponentChanged(entityManager, entityId, added, removed, dead) {\n        for(let query of Object.values(this.keyQueryMapping)) {\n            let entities = this.cachedResults[query.key];\n            if (dead) {\n                let i = entities.indexOf(entityId);\n                if (i >= 0) {\n                    entities.splice(i, 1);\n                }\n            } else if (added) {\n                if (query.hasSelector(Not(added))) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                } else if (query.hasSelector(added) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                }\n            } else if (removed) {\n                if (query.hasSelector(Not(removed)) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i < 0) {\n                        entities.push(entityId);\n                    }\n                } else if (query.hasSelector(removed) && query.test(entityManager, entityId)) {\n                    let i = entities.indexOf(entityId);\n                    if (i >= 0) {\n                        entities.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query \n     * @returns {EntityId}\n     */\n    findAny(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        if (result.length <= 0) {\n            return null;\n        } else {\n            return result[Math.floor(Math.random() * result.length)];\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query\n     * @returns {Array<EntityId>}\n     */\n    findAll(entityManager, query) {\n        const queryKey = query.key;\n        let result;\n        if (!(queryKey in this.keyQueryMapping)) {\n            result = [];\n            this.keyQueryMapping[queryKey] = query;\n            this.cachedResults[queryKey] = result;\n            query.hydrate(entityManager, result);\n        } else {\n            result = this.cachedResults[queryKey];\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Query<?>} query \n     */\n    count(entityManager, query) {\n        let result = this.findAll(entityManager, query);\n        return result.length;\n    }\n\n    /**\n     * @param {Query<?>} query\n     */\n    clear(query) {\n        const queryKey = query.key;\n        if (!(queryKey in this.keyQueryMapping)) {\n            return;\n        }\n        delete this.keyQueryMapping[queryKey];\n        delete this.cachedResults[queryKey];\n    }\n    \n    reset() {\n        this.keyQueryMapping = {};\n        this.cachedResults = {};\n    }\n}\n\n/**\n * @template T\n * @typedef {SelectorNot<T>|ComponentClass<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef SelectorNot<T>\n * @property {'not'} type\n * @property {string} name\n * @property {ComponentClass<T>} value\n */\n\n/**\n * @template T\n * @param {ComponentClass<T>} componentClass \n * @returns {ComponentClass<T>}\n */\nexport function Not(componentClass) {\n    return {\n        // @ts-ignore\n        type: 'not',\n        name: componentClass.name,\n        value: componentClass,\n    };\n}\n\nexport function isSelectorNot(selector) {\n    return 'type' in selector && selector.type === 'not';\n}\n","import { ComponentClass } from './ComponentClass';\nimport { EntityManager } from './EntityManager';\nimport { isSelectorNot } from './QueryManager';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').Selector<T>} Selector<T>\n */\n\n/**\n * @template T\n * @typedef {import('./QueryManager').SelectorNot<T>} SelectorNot<T>\n */\n\n/**\n * @template T\n * @typedef {import('./EntityTemplate').ComponentInstancesOf<T>} ComponentInstancesOf<T>\n */\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class Query {\n\n    /**\n     * @param {T} selectors \n     */\n    constructor(...selectors) {\n        if (selectors.length <= 0) {\n            throw new Error('Must have at least 1 selector for query.');\n        }\n        this.selectors = selectors;\n        this.key = selectors.map(s => isSelectorNot(s) ? `!${s.name}` : s.name).sort().join('&');\n    }\n\n    /**\n     * @param {Selector<?>} selector\n     */\n    hasSelector(selector) {\n        if (isSelectorNot(selector)) {\n            return this.selectors.findIndex(v => isSelectorNot(v) && v.name === selector.name) >= 0;\n        } else {\n            return this.selectors.findIndex(v => v.name === selector.name) >= 0;\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId\n     */\n    test(entityManager, entityId) {\n        for(let selector of this.selectors) {\n            if (isSelectorNot(selector)) {\n                const componentClass = /** @type {SelectorNot<?>} */ (/** @type {unknown} */ (selector)).value;\n                if (entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            } else {\n                const componentClass = /** @type {ComponentClass<?>} */ (/** @type {unknown} */ (selector));\n                if (!entityManager.exists(entityId, componentClass)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @param {Array<EntityId>} result \n     */\n    hydrate(entityManager, result) {\n        if (this.selectors.length <= 0) {\n            result.length = 0;\n            return result;\n        }\n        let entities = entityManager.entityIds();\n        for(let entityId of entities) {\n            if (this.test(entityManager, entityId)) {\n                result.push(entityId);\n            }\n        }\n        return result;\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {number}\n     */\n    count(entityManager) {\n        return entityManager.queries.count(entityManager, this);\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    findAny(entityManager) {\n        const queryManager = entityManager.queries;\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (new Array(this.selectors.length + 1));\n        let entityId = queryManager.findAny(entityManager, this);\n        if (entityId === null) {\n            return result.fill(undefined);\n        }\n        computeResult(result, entityManager, entityId, this.selectors);\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {Generator<[EntityId, ...ComponentInstancesOf<T>]>}\n     */\n    *findAll(entityManager) {\n        const queryManager = entityManager.queries;\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (new Array(this.selectors.length + 1));\n        let entities = queryManager.findAll(entityManager, this);\n        for(let entityId of entities) {\n            computeResult(result, entityManager, entityId, this.selectors);\n            yield result;\n        }\n    }\n}\n\n/**\n * @template {ComponentClass<any>[]} T\n * @param {[EntityId, ...ComponentInstancesOf<T>]} out\n * @param {EntityManager} entityManager  \n * @param {EntityId} entityId\n * @param {T} selectors\n * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n */\nfunction computeResult(out, entityManager, entityId, selectors) {\n    out[0] = entityId;\n    let i = 1;\n    for(let selector of selectors) {\n        if (isSelectorNot(selector)) {\n            out[i] = null;\n        } else {\n            out[i] = entityManager.get(entityId, selector);\n        }\n        ++i;\n    }\n    return out;\n}\n","/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {import('./TopicManager').TopicCallback<T>} TopicCallback<T>\n */\n\n/**\n * @template T\n */\nexport class Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        this.name = name;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatch(topicManager, attachment) {\n        topicManager.dispatch(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    dispatchImmediately(topicManager, attachment) {\n        topicManager.dispatchImmediately(this, attachment);\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    on(topicManager, priority, callback) {\n        topicManager.addEventListener(this, callback, { priority });\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {TopicCallback<T>} callback\n     */\n    off(topicManager, callback) {\n        topicManager.removeEventListener(this, callback);\n        return this;\n    }\n\n    /**\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {TopicCallback<T>} callback\n     */\n    once(topicManager, priority, callback) {\n        let wrapper = (attachment) => {\n            this.off(topicManager, wrapper);\n            return callback(attachment);\n        };\n        return this.on(topicManager, priority, wrapper);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *poll(topicManager, amount) {\n        amount = Math.min(amount, topicManager.count(this));\n        for(let i = 0; i < amount; ++i) {\n            yield topicManager.poll(this);\n        }\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    retain(topicManager, amount) {\n        topicManager.retain(this, amount);\n    }\n\n    /**\n     * @param {TopicManager} topicManager \n     * @param {number} amount \n     */\n    *pollAndRetain(topicManager, amount) {\n        this.retain(topicManager, amount);\n        for(let result of this.poll(topicManager, amount)) {\n            yield result;\n        }\n    }\n}\n","/**\n * @template T\n * @typedef {import('./Topic').Topic<T>} Topic<T>\n */\n\n/**\n * @template T\n * @typedef {(attachment: T) => void|boolean} TopicCallback<T>\n */\n\n/**\n * @template T\n * @typedef TopicCallbackEntry\n * @property {TopicCallback<T>} callback\n * @property {number} priority\n */\n\n/**\n * @template T\n * @param {TopicCallbackEntry<T>} a\n * @param {TopicCallbackEntry<T>} b\n */\nfunction comparator(a, b) {\n    return a.priority - b.priority;\n}\n\n/**\n * A manager for topic states. You should call `flush()` regularly to\n * process dispatched events or use `dispatchImmediately()`.\n */\nexport class TopicManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedIn = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<object>>}\n         */\n        this.cachedOut = {};\n        /**\n         * @protected\n         * @type {Record<string, Array<TopicCallbackEntry<?>>>}\n         */\n        this.callbacks = {};\n        /**\n         * @protected\n         * @type {Record<string, number>}\n         */\n        this.maxRetains = {};\n        /**\n         * @private\n         * @type {Record<string, Topic<?>>}\n         */\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     * @param {object} [opts]\n     * @param {number} [opts.priority]\n     */\n    addEventListener(topic, callback, opts = undefined) {\n        const { priority = 0 } = opts;\n        let callbacks = this.callbacksOf(topic);\n        callbacks.push({\n            callback,\n            priority,\n        });\n        callbacks.sort(comparator);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {TopicCallback<T>} callback \n     */\n    removeEventListener(topic, callback) {\n        let callbacks = this.callbacksOf(topic);\n        let i = callbacks.findIndex(v => v.callback === callback);\n        if (i >= 0) {\n            callbacks.splice(i, 1);\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    countEventListeners(topic) {\n        return this.callbacksOf(topic).length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    dispatch(topic, attachment) {\n        let incoming = this.incomingOf(topic);\n        incoming.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment\n     */\n    dispatchImmediately(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     * @param {T} attachment \n     */\n    async dispatchImmediatelyAndWait(topic, attachment) {\n        let callbacks = this.callbacksOf(topic);\n        for(let { callback } of callbacks) {\n            let result = await callback(attachment);\n            if (result === true) {\n                return;\n            }\n        }\n        let outgoing = this.outgoingOf(topic);\n        outgoing.push(attachment);\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    count(topic) {\n        let outgoing = this.outgoingOf(topic);\n        return outgoing.length;\n    }\n\n    /**\n     * @template T\n     * @param {Topic<T>} topic \n     */\n    poll(topic) {\n        let outgoing = this.outgoingOf(topic);\n        if (outgoing.length <= 0) {\n            return null;\n        }\n        let result = outgoing.shift();\n        return result;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     * @param {number} amount\n     */\n    retain(topic, amount) {\n        const topicName = topic.name;\n        let max = Math.max(amount, this.maxRetains[topicName] || 0);\n        this.maxRetains[topicName] = max;\n    }\n\n    /**\n     * @param {number} [maxPerTopic]\n     */\n    flush(maxPerTopic = 100) {\n        for(const topicName of Object.keys(this.cachedIn)) {\n            const topic = this.nameTopicMapping[topicName];\n            const incoming = this.cachedIn[topicName];\n            const outgoing = this.cachedOut[topicName];\n            const retain = this.maxRetains[topicName] || 0;\n            if (retain < outgoing.length) {\n                outgoing.splice(0, outgoing.length - retain);\n            }\n            let max = Math.min(maxPerTopic, incoming.length);\n            for(let i = 0; i < max; ++i) {\n                let attachment = incoming.shift();\n                if (typeof attachment === 'object' && attachment instanceof Promise) {\n                    this.dispatchImmediately(topic, attachment);\n                } else {\n                    this.dispatchImmediately(topic, attachment);\n                }\n            }\n        }\n    }\n\n    /**\n     * @param {Topic<?>} topic \n     */\n    getPendingRetainCount(topic) {\n        return this.maxRetains[topic.name] || 0;\n    }\n\n    /**\n     * @param {Topic<?>} topic\n     */\n    getPendingFlushCount(topic) {\n        let incoming = this.incomingOf(topic);\n        return incoming.length;\n    }\n\n    reset() {\n        this.cachedIn = {};\n        this.cachedOut = {};\n        this.callbacks = {};\n        this.maxRetains = {};\n        this.nameTopicMapping = {};\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    incomingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedIn) {\n            return this.cachedIn[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = result;\n            this.cachedOut[topicName] = [];\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<T>}\n     */\n    outgoingOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.cachedOut) {\n            return this.cachedOut[topicName];\n        } else {\n            let result = [];\n            this.cachedIn[topicName] = [];\n            this.cachedOut[topicName] = result;\n            this.nameTopicMapping[topicName] = topic;\n            return result;\n        }\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {Topic<T>} topic \n     * @returns {Array<TopicCallbackEntry<T>>}\n     */\n    callbacksOf(topic) {\n        const topicName = topic.name;\n        if (topicName in this.callbacks) {\n            return this.callbacks[topicName];\n        } else {\n            let result = [];\n            this.callbacks[topicName] = result;\n            return result;\n        }\n    }\n}\n","/**\n * @typedef {(frameDetail: AnimationFrameLoop) => void} AnimationFrameLoopCallback\n * \n * @typedef AnimationFrameDetail\n * @property {number} prevTime\n * @property {number} currentTime\n * @property {number} deltaTime\n */\n\nexport class AnimationFrameLoop {\n    \n    /**\n     * @param {AnimationFrameLoopCallback} callback \n     * @param {object} [opts]\n     * @param {Window} [opts.animationFrameHandler]\n     */\n    constructor(callback, opts = undefined) {\n        const { animationFrameHandler = window } = opts || {};\n\n        /** @type {ReturnType<requestAnimationFrame>} */\n        this.handle = 0;\n        /** @type {AnimationFrameDetail} */\n        this.detail = {\n            prevTime: -1,\n            currentTime: -1,\n            deltaTime: 0,\n        };\n\n        /** @protected */\n        this.animationFrameHandler = animationFrameHandler;\n\n        /** @protected */\n        this.callback = callback;\n\n        this.next = this.next.bind(this);\n        this.start = this.start.bind(this);\n        this.cancel = this.cancel.bind(this);\n    }\n    \n    next(now = performance.now()) {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        let d = this.detail;\n        d.prevTime = d.currentTime;\n        d.currentTime = now;\n        d.deltaTime = d.currentTime - d.prevTime;\n        this.callback(this);\n    }\n\n    start() {\n        this.handle = this.animationFrameHandler.requestAnimationFrame(this.next);\n        return this;\n    }\n\n    cancel() {\n        this.animationFrameHandler.cancelAnimationFrame(this.handle);\n        return this;\n    }\n}\n","import { Topic } from './Topic';\n\n/** @typedef {import('./TopicManager').TopicManager} TopicManager */\n\n/**\n * @template T\n * @typedef {(attachment: T) => Promise<void>} AsyncTopicCallback<T>\n */\n\n/** @template T */\nexport class AsyncTopic extends Topic {\n\n    /**\n     * @param {string} name \n     */\n    constructor(name) {\n        super(name);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    async dispatch(topicManager, attachment) {\n        throw new Error('Not yet implemented');\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {T} attachment\n     */\n    async dispatchImmediately(topicManager, attachment) {\n        // @ts-ignore\n        await topicManager.dispatchImmediatelyAndWait(this, attachment);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    on(topicManager, priority, callback) {\n        // @ts-ignore\n        return super.on(topicManager, priority, callback);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    off(topicManager, callback) {\n        // @ts-ignore\n        return super.off(topicManager, callback);\n    }\n\n    /**\n     * @override\n     * @param {TopicManager} topicManager\n     * @param {number} priority\n     * @param {AsyncTopicCallback<T>} callback\n     */\n    // @ts-ignore\n    once(topicManager, priority, callback) {\n        // @ts-ignore\n        return super.once(topicManager, priority, callback);\n    }\n}","/**\n * @template T\n */\nexport class ComponentClass {\n    /**\n     * @param {string} name \n     * @param {() => T} [newCallback]\n     * @param {(component: T) => void} [deleteCallback] \n     */\n    constructor(name, newCallback = () => null, deleteCallback = () => {}) {\n        this.name = name;\n        this.new = newCallback;\n        this.delete = deleteCallback;\n    }\n}\n","import { ComponentClass } from './ComponentClass';\nimport { QueryManager } from './QueryManager';\n\n/**\n * @template T\n * @typedef {Record<number, T>} ComponentInstanceMap<T>\n */\n\n/**\n * @typedef {Record<string, ComponentInstanceMap<?>>} ComponentClassMap\n * @typedef {number} EntityId\n * @typedef {string} ComponentName\n */\n\n/**\n * @callback EntityComponentChangedCallback\n * @param {EntityManager} entityManager\n * @param {EntityId} entityId\n * @param {ComponentClass<?>} attached\n * @param {ComponentClass<?>} detached\n * @param {boolean} dead\n */\n\nexport class EntityManager {\n\n    constructor() {\n        /**\n         * @protected\n         * @type {ComponentClassMap}\n         */\n        this.components = {};\n        /** @private */\n        this.nameClassMapping = {};\n        /**\n         * @private\n         * @type {EntityId}\n         */\n        this.nextAvailableEntityId = 1;\n        /**\n         * @protected\n         * @type {Array<[string, ...any]>}\n         */\n        this.queue = [];\n        /** @private */\n        this.listeners = [];\n        this.queries = new QueryManager();\n    }\n\n    /**\n     * @protected\n     * @param {EntityId} entityId\n     * @param {ComponentClass<?>} attached\n     * @param {ComponentClass<?>} detached\n     * @param {boolean} dead\n     */\n    entityComponentChangedCallback(entityId, attached, detached, dead) {\n        this.queries.onEntityComponentChanged(this, entityId, attached, detached, dead);\n        for(let callback of this.listeners) {\n            callback(this, entityId, attached, detached, dead);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    addEventListener(event, callback) {\n        if (event === 'change') {\n            this.listeners.push(callback);\n        }\n    }\n\n    /**\n     * @param {'change'} event \n     * @param {EntityComponentChangedCallback} callback \n     */\n    removeEventListener(event, callback) {\n        if (event === 'change') {\n            let i = this.listeners.indexOf(callback);\n            if (i >= 0) {\n                this.listeners.splice(i, 1);\n            }\n        }\n    }\n\n    flush() {\n        while (this.queue.length > 0) {\n            let [type, ...args] = this.queue.shift();\n            switch (type) {\n                case 'attach': {\n                    let [entityId, componentClass, instance] = args;\n                    this.attachImmediately(entityId, componentClass, instance);\n                } break;\n                case 'detach': {\n                    let [entityId, componentClass] = args;\n                    this.detachImmediately(entityId, componentClass);\n                } break;\n                case 'clear': {\n                    let [componentClass] = args;\n                    this.clearImmediately(componentClass);\n                } break;\n            }\n        }\n    }\n\n    /**\n     * @returns {EntityId}\n     */\n    create() {\n        let entityId = this.nextAvailableEntityId++;\n        this.entityComponentChangedCallback(entityId, null, null, false);\n        return entityId;\n    }\n\n    /**\n     * @param {EntityId} entityId \n     */\n    destroy(entityId) {\n        const components = this.components;\n        for (const componentName of Object.keys(components)) {\n            const instanceMap = components[componentName];\n            if (entityId in instanceMap) {\n                delete instanceMap[entityId];\n                this.entityComponentChangedCallback(entityId, null, this.nameClassMapping[componentName], false);\n            }\n        }\n        this.entityComponentChangedCallback(entityId, null, null, true);\n    }\n\n    /**\n     * Whether the entity exists with all provided component classes.\n     * \n     * @param {EntityId} entityId \n     * @param {...ComponentClass<?>} componentClasses\n     */\n    exists(entityId, ...componentClasses) {\n        if (componentClasses.length > 0) {\n            for(const componentClass of componentClasses) {\n                let instanceMap = this.mapOf(componentClass);\n                if (!(entityId in instanceMap)) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            for (let instanceMap of Object.values(this.components)) {\n                if (entityId in instanceMap) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attach(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        this.queue.push(['attach', entityId, componentClass, instance]);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @param {T} [instance]\n     * @returns {T}\n     */\n    attachImmediately(entityId, componentClass, instance = undefined) {\n        if (typeof instance === 'undefined') {\n            instance = componentClass.new();\n        }\n        let instanceMap = this.mapOf(componentClass);\n        instanceMap[entityId] = instance;\n        this.entityComponentChangedCallback(entityId, componentClass, null, false);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     */\n    detach(entityId, componentClass) {\n        this.queue.push(['detach', entityId, componentClass]);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     */\n    detachImmediately(entityId, componentClass) {\n        let instanceMap = this.mapOf(componentClass);\n        let instance = instanceMap[entityId];\n        delete instanceMap[entityId];\n        componentClass.delete(instance);\n        this.entityComponentChangedCallback(entityId, null, componentClass, false);\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     */\n    clear(componentClass) {\n        this.queue.push(['clear', componentClass]);\n    }\n\n    /**\n     * @param {ComponentClass<any>} componentClass \n     */\n    clearImmediately(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        const instanceMap = components[componentName];\n        let entities = Object.keys(instanceMap).map(Number);\n        let instances = Object.values(instanceMap);\n        components[componentName] = {};\n        this.nameClassMapping[componentName] = componentClass;\n        for(let instance of instances) {\n            componentClass.delete(instance);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, componentClass, false);\n        }\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @returns {T}\n     */\n    get(entityId, componentClass) {\n        return this.mapOf(componentClass)[entityId] || null;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     * @returns {number}\n     */\n    count(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).length;\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass\n     */\n    keysOf(componentClass) {\n        return Object.keys(this.mapOf(componentClass)).map(Number);\n    }\n\n    /**\n     * @template T\n     * @param {ComponentClass<T>} componentClass \n     * @returns {Array<T>}\n     */\n    valuesOf(componentClass) {\n        return Object.values(this.mapOf(componentClass));\n    }\n\n    /**\n     * @protected\n     * @template T\n     * @param {ComponentClass<T>} componentClass\n     * @returns {ComponentInstanceMap<T>} A map of entity ids to component instance data.\n     */\n    mapOf(componentClass) {\n        const componentName = componentClass.name;\n        const components = this.components;\n        if (!(componentName in components)) {\n            /** @type {ComponentInstanceMap<T>} */\n            let map = {};\n            components[componentName] = map;\n            this.nameClassMapping[componentName] = componentClass;\n            return map;\n        } else {\n            return components[componentName];\n        }\n    }\n\n    /** @returns {Set<EntityId>} */\n    entityIds() {\n        let result = new Set();\n        for (let instanceMap of Object.values(this.components)) {\n            for(let entityId of Object.keys(instanceMap)) {\n                result.add(entityId);\n            }\n        }\n        return result;\n    }\n\n    /** @returns {Array<ComponentClass<?>>} */\n    componentClasses() {\n        return Object.values(this.nameClassMapping);\n    }\n\n    reset() {\n        const components = this.components;\n        /** @type {Set<EntityId>} */\n        let entities = new Set();\n        for(const componentName of Object.keys(components)) {\n            const componentClass = this.nameClassMapping[componentName];\n            const instanceMap = components[componentName];\n            for(let entityId of Object.keys(instanceMap)) {\n                entities.add(Number(entityId));\n            }\n            this.clearImmediately(componentClass);\n        }\n        for(let entityId of entities) {\n            this.entityComponentChangedCallback(entityId, null, null, true);\n        }\n        entities.clear();\n        this.queries.reset();\n        this.components = {};\n        this.nextAvailableEntityId = 1;\n        this.queue.length = 0;\n        this.listeners.length = 0;\n    }\n}\n","import { EntityManager } from './EntityManager';\nimport { ComponentClass } from './ComponentClass';\n\n/** @typedef {import('./EntityManager').EntityId} EntityId */\n\n/**\n * @template {ComponentClass<any>[]} T\n * @typedef {{[K in keyof T]: T[K] extends ComponentClass<infer V> ? V : never}} ComponentInstancesOf<T>\n */\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class EntityTemplate {\n    /**\n     * @param {T} componentClasses \n     */\n    constructor(...componentClasses) {\n        /** @private */\n        this.componentClasses = componentClasses;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    create(entityManager) {\n        let entityId = entityManager.create();\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (/** @type {unknown} */ ([entityId]));\n        for (let componentClass of this.componentClasses) {\n            let instance = entityManager.attach(entityId, componentClass);\n            result.push(instance);\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId \n     */\n    destroy(entityManager, entityId) {\n        for (let componentClass of this.componentClasses) {\n            entityManager.detach(entityId, componentClass);\n        }\n    }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nexport class OrthographicCamera extends Camera {\n  /**\n   * @param {number} [left]\n   * @param {number} [top]\n   * @param {number} [right]\n   * @param {number} [bottom]\n   * @param {number} [near]\n   * @param {number} [far]\n   */\n  constructor(\n    left = undefined,\n    top = undefined,\n    right = undefined,\n    bottom = undefined,\n    near = -1000,\n    far = 1000\n  ) {\n    super(mat4.create(), mat4.create());\n\n    this.orthoBounds = {\n      left: typeof left === 'undefined' ? undefined : Number(left),\n      top: typeof top === 'undefined' ? undefined : Number(top),\n      right: typeof right === 'undefined' ? undefined : Number(right),\n      bottom: typeof bottom === 'undefined' ? undefined : Number(bottom),\n    };\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /**\n   * If both the bounds and viewport dimensions are defined, the orthographic\n   * projection will be set the defined bounds adjusted with respect to\n   * the aspect ratio. This is usually the desired behavior.\n   *\n   * If the bounds are `undefined`, the orthographic projection will\n   * be set to the viewport dimensions. This is useful for pixel-perfect\n   * projections.\n   *\n   * If viewport dimensions are `undefined`, the orthographic projection\n   * will only use the defined bounds. This is useful if you are already\n   * performing your own calculations for the bounds or desire a static\n   * projection.\n   *\n   * @override\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const { near, far } = this.clippingPlane;\n    const { left, top, right, bottom } = this.orthoBounds;\n\n    let projectionMatrix = this.projectionMatrix;\n    let hasViewport = typeof viewportWidth !== 'undefined';\n    let hasBounds = typeof left !== 'undefined';\n\n    if (hasViewport) {\n      if (hasBounds) {\n        // Use the defined bounds with respect to the viewport aspect ratio\n        const aspectRatio = viewportWidth / viewportHeight;\n        mat4.ortho(\n          projectionMatrix,\n          left * aspectRatio,\n          right * aspectRatio,\n          bottom,\n          top,\n          near,\n          far\n        );\n      } else {\n        // Use the viewport dimensions as bounds\n        mat4.ortho(\n          projectionMatrix,\n          0,\n          viewportWidth,\n          viewportHeight,\n          0,\n          near,\n          far\n        );\n      }\n    } else {\n      if (hasBounds) {\n        // Use the defined bounds as-is\n        mat4.ortho(projectionMatrix, left, right, bottom, top, near, far);\n      } else {\n        // Use default bounds (since nothing else exists)\n        mat4.ortho(projectionMatrix, -1, 1, 1, -1, -1, 1);\n      }\n    }\n    return this;\n  }\n}\n"],"names":["UP","vec3","fromValues","Camera","constructor","projectionMatrix","viewMatrix","this","resize","viewportWidth","viewportHeight","DEFAULT_FOVY","Math","PI","TO_RAD_FACTOR","MAX_DEPTH_LEVEL","attach","parentNode","childNode","sceneGraph","nodes","children","push","parent","roots","detach","childIndex","indexOf","splice","rootIndex","walkImpl","level","nodeCallback","filterCallback","result","parentInfo","nextNodes","walkDeleteCallback","sceneNode","QueryManager","cachedResults","keyQueryMapping","onEntityComponentChanged","bind","entityManager","entityId","added","removed","dead","query","Object","values","entities","key","i","hasSelector","Not","test","findAny","findAll","length","floor","random","queryKey","hydrate","count","clear","reset","componentClass","type","name","value","isSelectorNot","selector","computeResult","out","selectors","get","Topic","dispatch","topicManager","attachment","dispatchImmediately","on","priority","callback","addEventListener","off","removeEventListener","once","wrapper","poll","amount","min","retain","pollAndRetain","comparator","a","b","opts","animationFrameHandler","window","handle","detail","prevTime","currentTime","deltaTime","next","start","cancel","now","performance","requestAnimationFrame","d","cancelAnimationFrame","super","async","Error","dispatchImmediatelyAndWait","newCallback","deleteCallback","new","delete","components","nameClassMapping","nextAvailableEntityId","queue","listeners","queries","entityComponentChangedCallback","attached","detached","event","flush","args","shift","instance","attachImmediately","detachImmediately","clearImmediately","create","destroy","componentName","keys","instanceMap","exists","componentClasses","mapOf","map","Number","instances","keysOf","valuesOf","entityIds","Set","add","locky","position","forward","right","up","forwardAmount","rightAmount","upAmount","pitch","yaw","look","dx","dy","dt","max","move","apply","rady","radp","cosy","cos","cosp","siny","sin","dz","normalize","set","cross","scale","target","mat4","lookAt","left","top","bottom","near","far","orthoBounds","undefined","clippingPlane","hasBounds","aspectRatio","ortho","fieldOfView","perspective","s","sort","join","findIndex","v","queryManager","Array","fill","_nextAvailableSceneNodeId","createSceneNode","info","createSceneNodes","deleteSceneNode","deleteSceneNodes","sceneNodes","getSceneNodeInfo","parentSceneNode","replaceSceneNode","replacementNode","grandChildren","slice","replacementInfo","walk","from","childFilter","fromNodes","isArray","fromNode","cachedIn","cachedOut","callbacks","maxRetains","nameTopicMapping","topic","callbacksOf","countEventListeners","incomingOf","outgoingOf","outgoing","topicName","maxPerTopic","incoming","getPendingRetainCount","getPendingFlushCount","x","y","z","rotation","quat","getTranslation","getRotation","targetRotation","slerp","fromRotationTranslation","translation","translate","normalizedScreenCoordX","normalizedScreenCoordY","normalized","vec4","m","invert","transformMat4"],"mappings":"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"}