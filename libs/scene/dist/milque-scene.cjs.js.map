{"version":3,"file":"milque-scene.cjs.js","sources":["../src/camera/CameraHelper.js","../src/camera/Camera.js","../src/camera/PerspectiveCamera.js","../src/camera/FirstPersonCameraController.js","../src/scenegraph/SceneGraph.js","../src/camera/OrthographicCamera.js"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\n\nconst UP = vec3.fromValues(0, 1, 0);\n\nexport function panTo(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  mat4.getTranslation(position, viewMatrix);\n  let translation = vec3.fromValues(\n    (x - position[0]) * dt,\n    (y - position[1]) * dt,\n    (z - position[2]) * dt\n  );\n  mat4.translate(viewMatrix, viewMatrix, translation);\n}\n\nexport function lookAt(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  let rotation = quat.create();\n  mat4.getTranslation(position, viewMatrix);\n  mat4.getRotation(rotation, viewMatrix);\n  let target = vec3.fromValues(x, y, z);\n\n  mat4.lookAt(viewMatrix, position, target, UP);\n\n  let targetRotation = quat.create();\n  mat4.getRotation(targetRotation, viewMatrix);\n  quat.slerp(rotation, rotation, targetRotation, dt);\n\n  mat4.fromRotationTranslation(viewMatrix, rotation, position);\n}\n\n/**\n * Gets a directional ray in the world space from the given normalized\n * screen coordinates and camera matrices.\n *\n * NOTE: In addition to some scaling, the y component from a pointer's\n * position usually has to be flipped to match the normalized screen\n * coordinate space, which assumes a range of [-1, 1] for both x and y,\n * where (0, 0) is the center and (-1, -1) is the bottom-left of the\n * screen.\n *\n * ### Typical Device Screen Coordinate Space:\n * ```\n * (0,0)------------(w,0)\n *    |               |\n *    |   (w/2,h/2)   |\n *    |               |\n * (0,w)------------(w,h)\n * ```\n *\n * ### Normalized Screen Coordinate Space:\n * ```\n * (-1,+1)---------(+1,+1)\n *    |               |\n *    |     (0,0)     |\n *    |               |\n * (-1,-1)---------(+1,-1)\n * ```\n *\n * ### Example Conversion from Device to Normalized:\n * ```\n * let normalizedScreenX = (canvasClientX / canvasWidth) * 2 - 1;\n * let normalizedScreenY = 1 - (canvasClientY / canvasHeight) * 2;\n * ```\n *\n * @param {vec3} out The output vector.\n * @param {number} normalizedScreenCoordX The X screen coordinate normalized to [-1, 1], where -1 is the left side of the screen.\n * @param {number} normalizedScreenCoordY The Y screen coordinate normalized to [-1, 1], where -1 is the bottom side of the screen.\n * @param {mat4} projectionMatrix The projection matrix of the world camera.\n * @param {mat4} viewMatrix The view matrix of the world camera.\n * @param {boolean} [normalized=false] Whether to normalize the result. Usually true for non-orthogonal projections.\n * @returns {vec3} The ray direction in the world space. By default, this is not normalized.\n */\nexport function screenToWorldRay(\n  out,\n  normalizedScreenCoordX,\n  normalizedScreenCoordY,\n  projectionMatrix,\n  viewMatrix,\n  normalized = false\n) {\n  // https://antongerdelan.net/opengl/raycasting.html\n  // To homogeneous clip coords\n  let v = vec4.fromValues(\n    normalizedScreenCoordX,\n    normalizedScreenCoordY,\n    -1,\n    1\n  );\n  // To camera coords\n  let m = mat4.create();\n  mat4.invert(m, projectionMatrix);\n  vec4.transformMat4(v, v, m);\n  v[2] = -1;\n  v[3] = 0;\n  // To world coords\n  mat4.invert(m, viewMatrix);\n  vec4.transformMat4(v, v, m);\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  // Normalized as directional ray\n  if (normalized) {\n    vec3.normalize(out, out);\n  }\n  return out;\n}\n","export class Camera {\n  constructor(projectionMatrix, viewMatrix) {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n  }\n\n  /**\n   * @abstract\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   * @returns {Camera}\n   */\n  // eslint-disable-next-line no-unused-vars\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    return this;\n  }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nconst DEFAULT_FOVY = Math.PI / 3;\n\nexport class PerspectiveCamera extends Camera {\n  constructor(fieldOfView = DEFAULT_FOVY, near = 0.1, far = 1000) {\n    super(mat4.create(), mat4.create());\n\n    this.fieldOfView = Number(fieldOfView);\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /** @override */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const aspectRatio =\n      typeof viewportWidth === 'undefined' ? 1 : viewportWidth / viewportHeight;\n    const { near, far } = this.clippingPlane;\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fieldOfView,\n      aspectRatio,\n      near,\n      far\n    );\n    return this;\n  }\n}\n","import { vec3, mat4 } from 'gl-matrix';\n\nconst TO_RAD_FACTOR = Math.PI / 180;\n\n/**\n * A camera controller that behaves like a traditional first person camera.\n * Pitch is restricted to prevent gimbal lock and roll is ignored.\n *\n * NOTE: Don't forget to lock your pointer, i.e. `canvas.requestPointerLock()`.\n */\nexport class FirstPersonCameraController {\n  constructor(opts = { locky: false }) {\n    this.locky = opts.locky;\n\n    this.position = vec3.create();\n    this.forward = vec3.fromValues(0, 0, -1);\n    this.right = vec3.fromValues(1, 0, 0);\n    this.up = vec3.fromValues(0, 1, 0);\n\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    this.pitch = 0;\n    this.yaw = -90;\n  }\n\n  look(dx, dy, dt = 1) {\n    // NOTE: Increase sensitivity to relatively match movement.\n    dt *= 1000;\n    this.pitch = Math.min(89.9, Math.max(-89.9, this.pitch + dy * dt));\n    this.yaw = (this.yaw + dx * dt) % 360;\n    return this;\n  }\n\n  move(forward, right = 0, up = 0, dt = 1) {\n    this.forwardAmount += forward * dt;\n    this.rightAmount += right * dt;\n    this.upAmount += up * dt;\n    return this;\n  }\n\n  apply(viewMatrix) {\n    let {\n      position,\n      forward,\n      right,\n      up,\n      forwardAmount,\n      rightAmount,\n      upAmount,\n      pitch,\n      yaw,\n    } = this;\n\n    // Calculate forward and right vectors\n    let rady = yaw * TO_RAD_FACTOR;\n    let radp = pitch * TO_RAD_FACTOR;\n    let cosy = Math.cos(rady);\n    let cosp = Math.cos(radp);\n    let siny = Math.sin(rady);\n    let sinp = Math.sin(radp);\n    let dx = cosy * cosp;\n    let dy = sinp;\n    let dz = siny * cosp;\n\n    // Set forward for move vector\n    vec3.normalize(forward, vec3.set(forward, dx, this.locky ? 0 : dy, dz));\n    vec3.normalize(right, vec3.cross(right, forward, up));\n\n    let move = vec3.create();\n    // Move forward\n    vec3.scale(move, forward, forwardAmount);\n    vec3.add(position, position, move);\n    // Move right\n    vec3.scale(move, right, rightAmount);\n    vec3.add(position, position, move);\n    // Move up\n    vec3.scale(move, up, upAmount);\n    vec3.add(position, position, move);\n    // Reset movement\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    // Reset forward for look vector\n    if (this.locky) vec3.set(forward, dx, dy, dz);\n\n    let target = vec3.add(move, position, forward);\n    mat4.lookAt(viewMatrix, position, target, up);\n    return viewMatrix;\n  }\n}\n","const MAX_DEPTH_LEVEL = 100;\n\n/**\n * @typedef {Number} SceneNode\n *\n * @typedef SceneNodeInfo\n * @property {SceneNode} parent The parent node. If the node does not have a parent,\n * it will be 0.\n * @property {Array<SceneNode>} children The list of child nodes.\n *\n * @callback WalkCallback Called for each node, before traversing its children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {WalkBackCallback|Boolean} If false, the walk will skip\n * the current node's children and all of its descendents. If a function,\n * it will be called after traversing down all of its children.\n *\n * @callback WalkBackCallback Called if returned by {@link WalkCallback}, after\n * traversing the current node's children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n *\n * @callback WalkChildrenCallback Called for each level of children, before\n * traversing them. This is usually used to determine visit order.\n * @param {Array<SceneNode>} childNodes A list of child nodes to be visited.\n * @param {SceneNode} parentNode The current parent node of these children.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {Array<SceneNode>} The list of children to traverse for this parent.\n */\n\n/**\n * A tree-like graph of nodes with n-children.\n */\nexport class SceneGraph {\n  /**\n   * Constructs an empty scene graph.\n   */\n  constructor() {\n    this.nodes = {};\n    this.roots = [];\n\n    this._nextAvailableSceneNodeId = 1;\n  }\n\n  /**\n   * Creates a scene node in the scene graph.\n   *\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * node.\n   * @returns {SceneNode} The created scene node.\n   */\n  createSceneNode(parentNode = undefined) {\n    let sceneNode = this._nextAvailableSceneNodeId++;\n    let info = createSceneNodeInfo();\n    this.nodes[sceneNode] = info;\n    attach(parentNode, sceneNode, this);\n    return sceneNode;\n  }\n\n  /**\n   * Creates multiple scene nodes in the scene graph.\n   *\n   * @param {Number} count The number of scene nodes to create.\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * nodes.\n   * @returns {Array<SceneNode>} A list of created scene nodes.\n   */\n  createSceneNodes(count, parentNode = undefined) {\n    let result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(this.createSceneNode(parentNode));\n    }\n    return result;\n  }\n\n  /**\n   * Deletes a scene node from the scene graph, along with all\n   * of its descendents.\n   *\n   * @param {SceneNode} sceneNode The scene node to remove.\n   */\n  deleteSceneNode(sceneNode) {\n    if (sceneNode in this.nodes) {\n      let info = this.nodes[sceneNode];\n      detach(info.parent, sceneNode, this);\n      walkImpl(this, sceneNode, 0, walkDeleteCallback);\n    } else {\n      throw new Error('Cannot delete non-existant scene node for scene graph.');\n    }\n  }\n\n  /**\n   * Deletes all given scene nodes from the scene graph, along with all\n   * of their descendents.\n   *\n   * @param {Array<SceneNode>} sceneNodes A list of scene nodes to remove.\n   */\n  deleteSceneNodes(sceneNodes) {\n    for (let sceneNode of sceneNodes) {\n      this.deleteSceneNode(sceneNode);\n    }\n  }\n\n  /**\n   * Get the scene node's info.\n   *\n   * @param {SceneNode} sceneNode The scene node to get info for.\n   * @returns {SceneNodeInfo} The info for the given scene node.\n   */\n  getSceneNodeInfo(sceneNode) {\n    return this.nodes[sceneNode];\n  }\n\n  /**\n   * Changes the parent of the scene node with the new parent node in\n   * the graph.\n   *\n   * @param {SceneNode} sceneNode The target scene node to change.\n   * @param {SceneNode} parentNode The scene node to set as the parent.\n   */\n  parentSceneNode(sceneNode, parentNode) {\n    let info = this.nodes[sceneNode];\n    detach(info.parent, sceneNode, this);\n    attach(parentNode, sceneNode, this);\n  }\n\n  /**\n   * Replaces the scene node with the new replacement node in the graph,\n   * inheriting its parent and children.\n   *\n   * @param {SceneNode} sceneNode The target scene node to replace.\n   * @param {SceneNode} replacementNode The scene node to replace with. If falsey,\n   * it will remove the target scene node and the target's parent will adopt\n   * its grandchildren. If the target did not have parents, the grandchildren will\n   * become root nodes in the graph.\n   */\n  replaceSceneNode(sceneNode, replacementNode) {\n    let info = this.nodes[sceneNode];\n    let parentNode = info.parent;\n    let grandChildren = info.children.slice();\n\n    // Remove the target node from graph\n    detach(parentNode, sceneNode, this);\n\n    // Begin grafting the grandchildren by removing them...\n    info.children.length = 0;\n\n    if (replacementNode) {\n      // Reattach all grandchildren to new replacement node.\n      let replacementInfo = this.nodes[replacementNode];\n      let replacementParent = replacementInfo.parent;\n\n      // Remove replacement node from previous parent\n      detach(replacementParent, replacementNode, this);\n\n      // ...and graft them back.\n      replacementInfo.children.push(...grandChildren);\n\n      // And reattach target parent to new child.\n      attach(parentNode, replacementNode, this);\n    } else {\n      // Reattach all grandchildren to target parent...\n      if (parentNode) {\n        //...as regular children.\n        let parentInfo = this.nodes[parentNode];\n        parentInfo.children.push(...grandChildren);\n      } else {\n        //...as root children.\n        this.roots.push(...grandChildren);\n      }\n    }\n\n    // ...and repair their parent relations.\n    for (let childNode of grandChildren) {\n      this.nodes[childNode].parent = parentNode;\n    }\n  }\n\n  /**\n   * Walks through every child node in the graph.\n   *\n   * @param {WalkCallback} callback The function called for each node\n   * in the graph, in ordered traversal from parent to child.\n   * @param {Object} [opts={}] Any additional options.\n   * @param {SceneNode|Array<SceneNode>} [opts.from] The parent node to\n   * start walking from, inclusive. By default, it will start from the root\n   * nodes.\n   * @param {WalkChildrenCallback} [opts.childfilter] The function called before\n   * walking through the children. This is usually used to determine the\n   * visiting order.\n   */\n  walk(callback, opts = {}) {\n    const { from = undefined, childFilter = undefined } = opts;\n\n    let fromNodes;\n    if (!from) fromNodes = this.roots;\n    else if (!Array.isArray(from)) fromNodes = [from];\n    else fromNodes = from;\n\n    if (childFilter) fromNodes = childFilter(fromNodes, 0, this);\n    for (let fromNode of fromNodes) {\n      walkImpl(this, fromNode, 0, callback, childFilter);\n    }\n  }\n}\n\n/**\n * @param {SceneNode} key The scene node handle.\n * @returns {SceneNodeInfo} The scene node metadata.\n */\nfunction createSceneNodeInfo() {\n  return {\n    parent: 0,\n    children: [],\n  };\n}\n\n/**\n * Attaches a child node to a parent in the scene graph. If parentNode is\n * null, then it will attach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction attach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has new parent; attach to parent. It is now in the graph.\n    sceneGraph.nodes[parentNode].children.push(childNode);\n    sceneGraph.nodes[childNode].parent = parentNode;\n  } else {\n    // No parent; move to root. It is now in the graph.\n    sceneGraph.roots.push(childNode);\n    sceneGraph.nodes[childNode].parent = 0;\n  }\n}\n\n/**\n * Detaches a child node from its parent in the scene graph. If parentNode is\n * null, then it will detach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction detach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has parent; detach from parent. It is now a free node.\n    let children = sceneGraph.nodes[parentNode].children;\n    let childIndex = children.indexOf(childNode);\n    children.splice(childIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  } else {\n    // No parent; remove from root. It is now a free node.\n    let roots = sceneGraph.roots;\n    let rootIndex = roots.indexOf(childNode);\n    roots.splice(rootIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  }\n}\n\n/**\n * Walk down from the parent and through all its descendents.\n *\n * @param {SceneGraph} sceneGraph The scene graph containing the nodes to be visited.\n * @param {SceneNode} parentNode The parent node to start walking from.\n * @param {Number} level The current call depth level. This is used to limit the call stack.\n * @param {WalkCallback} nodeCallback The function called on each visited node.\n * @param {WalkChildrenCallback} [filterCallback] The function called before\n * walking through the children. This is usually used to determine the visiting order.\n */\nfunction walkImpl(\n  sceneGraph,\n  parentNode,\n  level,\n  nodeCallback,\n  filterCallback = undefined\n) {\n  if (level >= MAX_DEPTH_LEVEL) return;\n\n  let result = nodeCallback(parentNode, sceneGraph);\n  if (result === false) return;\n\n  let parentInfo = sceneGraph.nodes[parentNode];\n  let nextNodes = filterCallback\n    ? filterCallback(parentInfo.children, parentNode, sceneGraph)\n    : parentInfo.children;\n\n  for (let childNode of nextNodes) {\n    walkImpl(sceneGraph, childNode, level + 1, nodeCallback, filterCallback);\n  }\n\n  if (typeof result === 'function') {\n    result(parentNode, sceneGraph);\n  }\n}\n\nfunction walkDeleteCallback(sceneNode, sceneGraph) {\n  delete sceneGraph.nodes[sceneNode];\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nexport class OrthographicCamera extends Camera {\n  /**\n   * @param {number} [left]\n   * @param {number} [top]\n   * @param {number} [right]\n   * @param {number} [bottom]\n   * @param {number} [near]\n   * @param {number} [far]\n   */\n  constructor(\n    left = undefined,\n    top = undefined,\n    right = undefined,\n    bottom = undefined,\n    near = -1000,\n    far = 1000\n  ) {\n    super(mat4.create(), mat4.create());\n\n    this.orthoBounds = {\n      left: typeof left === 'undefined' ? undefined : Number(left),\n      top: typeof top === 'undefined' ? undefined : Number(top),\n      right: typeof right === 'undefined' ? undefined : Number(right),\n      bottom: typeof bottom === 'undefined' ? undefined : Number(bottom),\n    };\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /**\n   * If both the bounds and viewport dimensions are defined, the orthographic\n   * projection will be set the defined bounds adjusted with respect to\n   * the aspect ratio. This is usually the desired behavior.\n   *\n   * If the bounds are `undefined`, the orthographic projection will\n   * be set to the viewport dimensions. This is useful for pixel-perfect\n   * projections.\n   *\n   * If viewport dimensions are `undefined`, the orthographic projection\n   * will only use the defined bounds. This is useful if you are already\n   * performing your own calculations for the bounds or desire a static\n   * projection.\n   *\n   * @override\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const { near, far } = this.clippingPlane;\n    const { left, top, right, bottom } = this.orthoBounds;\n\n    let projectionMatrix = this.projectionMatrix;\n    let hasViewport = typeof viewportWidth !== 'undefined';\n    let hasBounds = typeof left !== 'undefined';\n\n    if (hasViewport) {\n      if (hasBounds) {\n        // Use the defined bounds with respect to the viewport aspect ratio\n        const aspectRatio = viewportWidth / viewportHeight;\n        mat4.ortho(\n          projectionMatrix,\n          left * aspectRatio,\n          right * aspectRatio,\n          bottom,\n          top,\n          near,\n          far\n        );\n      } else {\n        // Use the viewport dimensions as bounds\n        mat4.ortho(\n          projectionMatrix,\n          0,\n          viewportWidth,\n          viewportHeight,\n          0,\n          near,\n          far\n        );\n      }\n    } else {\n      if (hasBounds) {\n        // Use the defined bounds as-is\n        mat4.ortho(projectionMatrix, left, right, bottom, top, near, far);\n      } else {\n        // Use default bounds (since nothing else exists)\n        mat4.ortho(projectionMatrix, -1, 1, 1, -1, -1, 1);\n      }\n    }\n    return this;\n  }\n}\n"],"names":["UP","vec3","fromValues","Camera","constructor","projectionMatrix","viewMatrix","this","resize","viewportWidth","viewportHeight","DEFAULT_FOVY","Math","PI","TO_RAD_FACTOR","MAX_DEPTH_LEVEL","attach","parentNode","childNode","sceneGraph","nodes","children","push","parent","roots","detach","childIndex","indexOf","splice","rootIndex","walkImpl","level","nodeCallback","filterCallback","result","parentInfo","nextNodes","walkDeleteCallback","sceneNode","opts","locky","position","create","forward","right","up","forwardAmount","rightAmount","upAmount","pitch","yaw","look","dx","dy","dt","min","max","move","apply","rady","radp","cosy","cos","cosp","siny","sin","dz","normalize","set","cross","scale","add","target","mat4","lookAt","left","top","bottom","near","far","super","orthoBounds","undefined","Number","clippingPlane","hasBounds","aspectRatio","ortho","fieldOfView","perspective","_nextAvailableSceneNodeId","createSceneNode","info","createSceneNodes","count","i","deleteSceneNode","Error","deleteSceneNodes","sceneNodes","getSceneNodeInfo","parentSceneNode","replaceSceneNode","replacementNode","grandChildren","slice","length","replacementInfo","walk","callback","from","childFilter","fromNodes","Array","isArray","fromNode","x","y","z","rotation","quat","getTranslation","getRotation","targetRotation","slerp","fromRotationTranslation","translation","translate","out","normalizedScreenCoordX","normalizedScreenCoordY","normalized","v","vec4","m","invert","transformMat4"],"mappings":"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"}