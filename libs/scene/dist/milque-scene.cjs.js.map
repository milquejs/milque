{"version":3,"file":"milque-scene.cjs.js","sources":["../src/camera/CameraHelper.js","../src/camera/Camera.js","../src/camera/PerspectiveCamera.js","../src/camera/FirstPersonCameraController.js","../src/scenegraph/SceneGraph.js","../src/entity/EntityManager.js","../src/topic/Topic.js","../src/topic/PriorityEventTopic.js","../src/topic/CommandTopic.js","../src/entity/ComponentClass.js","../src/topic/EventTopic.js","../src/camera/OrthographicCamera.js"],"sourcesContent":["import { mat4, quat, vec3, vec4 } from 'gl-matrix';\n\nconst UP = vec3.fromValues(0, 1, 0);\n\nexport function panTo(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  mat4.getTranslation(position, viewMatrix);\n  let translation = vec3.fromValues(\n    (x - position[0]) * dt,\n    (y - position[1]) * dt,\n    (z - position[2]) * dt\n  );\n  mat4.translate(viewMatrix, viewMatrix, translation);\n}\n\nexport function lookAt(viewMatrix, x, y, z = 0, dt = 1) {\n  let position = vec3.create();\n  let rotation = quat.create();\n  mat4.getTranslation(position, viewMatrix);\n  mat4.getRotation(rotation, viewMatrix);\n  let target = vec3.fromValues(x, y, z);\n\n  mat4.lookAt(viewMatrix, position, target, UP);\n\n  let targetRotation = quat.create();\n  mat4.getRotation(targetRotation, viewMatrix);\n  quat.slerp(rotation, rotation, targetRotation, dt);\n\n  mat4.fromRotationTranslation(viewMatrix, rotation, position);\n}\n\n/**\n * Gets a directional ray in the world space from the given normalized\n * screen coordinates and camera matrices.\n *\n * NOTE: In addition to some scaling, the y component from a pointer's\n * position usually has to be flipped to match the normalized screen\n * coordinate space, which assumes a range of [-1, 1] for both x and y,\n * where (0, 0) is the center and (-1, -1) is the bottom-left of the\n * screen.\n *\n * ### Typical Device Screen Coordinate Space:\n * ```\n * (0,0)------------(w,0)\n *    |               |\n *    |   (w/2,h/2)   |\n *    |               |\n * (0,w)------------(w,h)\n * ```\n *\n * ### Normalized Screen Coordinate Space:\n * ```\n * (-1,+1)---------(+1,+1)\n *    |               |\n *    |     (0,0)     |\n *    |               |\n * (-1,-1)---------(+1,-1)\n * ```\n *\n * ### Example Conversion from Device to Normalized:\n * ```\n * let normalizedScreenX = (canvasClientX / canvasWidth) * 2 - 1;\n * let normalizedScreenY = 1 - (canvasClientY / canvasHeight) * 2;\n * ```\n *\n * @param {vec3} out The output vector.\n * @param {number} normalizedScreenCoordX The X screen coordinate normalized to [-1, 1], where -1 is the left side of the screen.\n * @param {number} normalizedScreenCoordY The Y screen coordinate normalized to [-1, 1], where -1 is the bottom side of the screen.\n * @param {mat4} projectionMatrix The projection matrix of the world camera.\n * @param {mat4} viewMatrix The view matrix of the world camera.\n * @param {boolean} [normalized=false] Whether to normalize the result. Usually true for non-orthogonal projections.\n * @returns {vec3} The ray direction in the world space. By default, this is not normalized.\n */\nexport function screenToWorldRay(\n  out,\n  normalizedScreenCoordX,\n  normalizedScreenCoordY,\n  projectionMatrix,\n  viewMatrix,\n  normalized = false\n) {\n  // https://antongerdelan.net/opengl/raycasting.html\n  // To homogeneous clip coords\n  let v = vec4.fromValues(\n    normalizedScreenCoordX,\n    normalizedScreenCoordY,\n    -1,\n    1\n  );\n  // To camera coords\n  let m = mat4.create();\n  mat4.invert(m, projectionMatrix);\n  vec4.transformMat4(v, v, m);\n  v[2] = -1;\n  v[3] = 0;\n  // To world coords\n  mat4.invert(m, viewMatrix);\n  vec4.transformMat4(v, v, m);\n  out[0] = v[0];\n  out[1] = v[1];\n  out[2] = v[2];\n  // Normalized as directional ray\n  if (normalized) {\n    vec3.normalize(out, out);\n  }\n  return out;\n}\n","export class Camera {\n  constructor(projectionMatrix, viewMatrix) {\n    this.projectionMatrix = projectionMatrix;\n    this.viewMatrix = viewMatrix;\n  }\n\n  /**\n   * @abstract\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   * @returns {Camera}\n   */\n  // eslint-disable-next-line no-unused-vars\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    return this;\n  }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nconst DEFAULT_FOVY = Math.PI / 3;\n\nexport class PerspectiveCamera extends Camera {\n  constructor(fieldOfView = DEFAULT_FOVY, near = 0.1, far = 1000) {\n    super(mat4.create(), mat4.create());\n\n    this.fieldOfView = Number(fieldOfView);\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /** @override */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const aspectRatio =\n      typeof viewportWidth === 'undefined' ? 1 : viewportWidth / viewportHeight;\n    const { near, far } = this.clippingPlane;\n    mat4.perspective(\n      this.projectionMatrix,\n      this.fieldOfView,\n      aspectRatio,\n      near,\n      far\n    );\n    return this;\n  }\n}\n","import { vec3, mat4 } from 'gl-matrix';\n\nconst TO_RAD_FACTOR = Math.PI / 180;\n\n/**\n * A camera controller that behaves like a traditional first person camera.\n * Pitch is restricted to prevent gimbal lock and roll is ignored.\n *\n * NOTE: Don't forget to lock your pointer, i.e. `canvas.requestPointerLock()`.\n */\nexport class FirstPersonCameraController {\n  constructor(opts = { locky: false }) {\n    this.locky = opts.locky;\n\n    this.position = vec3.create();\n    this.forward = vec3.fromValues(0, 0, -1);\n    this.right = vec3.fromValues(1, 0, 0);\n    this.up = vec3.fromValues(0, 1, 0);\n\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    this.pitch = 0;\n    this.yaw = -90;\n  }\n\n  look(dx, dy, dt = 1) {\n    // NOTE: Increase sensitivity to relatively match movement.\n    dt *= 1000;\n    this.pitch = Math.min(89.9, Math.max(-89.9, this.pitch + dy * dt));\n    this.yaw = (this.yaw + dx * dt) % 360;\n    return this;\n  }\n\n  move(forward, right = 0, up = 0, dt = 1) {\n    this.forwardAmount += forward * dt;\n    this.rightAmount += right * dt;\n    this.upAmount += up * dt;\n    return this;\n  }\n\n  apply(viewMatrix) {\n    let {\n      position,\n      forward,\n      right,\n      up,\n      forwardAmount,\n      rightAmount,\n      upAmount,\n      pitch,\n      yaw,\n    } = this;\n\n    // Calculate forward and right vectors\n    let rady = yaw * TO_RAD_FACTOR;\n    let radp = pitch * TO_RAD_FACTOR;\n    let cosy = Math.cos(rady);\n    let cosp = Math.cos(radp);\n    let siny = Math.sin(rady);\n    let sinp = Math.sin(radp);\n    let dx = cosy * cosp;\n    let dy = sinp;\n    let dz = siny * cosp;\n\n    // Set forward for move vector\n    vec3.normalize(forward, vec3.set(forward, dx, this.locky ? 0 : dy, dz));\n    vec3.normalize(right, vec3.cross(right, forward, up));\n\n    let move = vec3.create();\n    // Move forward\n    vec3.scale(move, forward, forwardAmount);\n    vec3.add(position, position, move);\n    // Move right\n    vec3.scale(move, right, rightAmount);\n    vec3.add(position, position, move);\n    // Move up\n    vec3.scale(move, up, upAmount);\n    vec3.add(position, position, move);\n    // Reset movement\n    this.forwardAmount = 0;\n    this.rightAmount = 0;\n    this.upAmount = 0;\n\n    // Reset forward for look vector\n    if (this.locky) vec3.set(forward, dx, dy, dz);\n\n    let target = vec3.add(move, position, forward);\n    mat4.lookAt(viewMatrix, position, target, up);\n    return viewMatrix;\n  }\n}\n","const MAX_DEPTH_LEVEL = 100;\n\n/**\n * @typedef {Number} SceneNode\n *\n * @typedef SceneNodeInfo\n * @property {SceneNode} parent The parent node. If the node does not have a parent,\n * it will be 0.\n * @property {Array<SceneNode>} children The list of child nodes.\n *\n * @callback WalkCallback Called for each node, before traversing its children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {WalkBackCallback|Boolean} If false, the walk will skip\n * the current node's children and all of its descendents. If a function,\n * it will be called after traversing down all of its children.\n *\n * @callback WalkBackCallback Called if returned by {@link WalkCallback}, after\n * traversing the current node's children.\n * @param {SceneNode} sceneNode The current scene node.\n * @param {SceneGraph} sceneGraph The current scene graph.\n *\n * @callback WalkChildrenCallback Called for each level of children, before\n * traversing them. This is usually used to determine visit order.\n * @param {Array<SceneNode>} childNodes A list of child nodes to be visited.\n * @param {SceneNode} parentNode The current parent node of these children.\n * @param {SceneGraph} sceneGraph The current scene graph.\n * @returns {Array<SceneNode>} The list of children to traverse for this parent.\n */\n\n/**\n * A tree-like graph of nodes with n-children.\n */\nexport class SceneGraph {\n  /**\n   * Constructs an empty scene graph.\n   */\n  constructor() {\n    this.nodes = {};\n    this.roots = [];\n\n    this._nextAvailableSceneNodeId = 1;\n  }\n\n  /**\n   * Creates a scene node in the scene graph.\n   *\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * node.\n   * @returns {SceneNode} The created scene node.\n   */\n  createSceneNode(parentNode = undefined) {\n    let sceneNode = this._nextAvailableSceneNodeId++;\n    let info = createSceneNodeInfo();\n    this.nodes[sceneNode] = info;\n    attach(parentNode, sceneNode, this);\n    return sceneNode;\n  }\n\n  /**\n   * Creates multiple scene nodes in the scene graph.\n   *\n   * @param {Number} count The number of scene nodes to create.\n   * @param {SceneNode} [parentNode] The parent node for the created scene\n   * nodes.\n   * @returns {Array<SceneNode>} A list of created scene nodes.\n   */\n  createSceneNodes(count, parentNode = undefined) {\n    let result = [];\n    for (let i = 0; i < count; ++i) {\n      result.push(this.createSceneNode(parentNode));\n    }\n    return result;\n  }\n\n  /**\n   * Deletes a scene node from the scene graph, along with all\n   * of its descendents.\n   *\n   * @param {SceneNode} sceneNode The scene node to remove.\n   */\n  deleteSceneNode(sceneNode) {\n    if (sceneNode in this.nodes) {\n      let info = this.nodes[sceneNode];\n      detach(info.parent, sceneNode, this);\n      walkImpl(this, sceneNode, 0, walkDeleteCallback);\n    } else {\n      throw new Error('Cannot delete non-existant scene node for scene graph.');\n    }\n  }\n\n  /**\n   * Deletes all given scene nodes from the scene graph, along with all\n   * of their descendents.\n   *\n   * @param {Array<SceneNode>} sceneNodes A list of scene nodes to remove.\n   */\n  deleteSceneNodes(sceneNodes) {\n    for (let sceneNode of sceneNodes) {\n      this.deleteSceneNode(sceneNode);\n    }\n  }\n\n  /**\n   * Get the scene node's info.\n   *\n   * @param {SceneNode} sceneNode The scene node to get info for.\n   * @returns {SceneNodeInfo} The info for the given scene node.\n   */\n  getSceneNodeInfo(sceneNode) {\n    return this.nodes[sceneNode];\n  }\n\n  /**\n   * Changes the parent of the scene node with the new parent node in\n   * the graph.\n   *\n   * @param {SceneNode} sceneNode The target scene node to change.\n   * @param {SceneNode} parentNode The scene node to set as the parent.\n   */\n  parentSceneNode(sceneNode, parentNode) {\n    let info = this.nodes[sceneNode];\n    detach(info.parent, sceneNode, this);\n    attach(parentNode, sceneNode, this);\n  }\n\n  /**\n   * Replaces the scene node with the new replacement node in the graph,\n   * inheriting its parent and children.\n   *\n   * @param {SceneNode} sceneNode The target scene node to replace.\n   * @param {SceneNode} replacementNode The scene node to replace with. If falsey,\n   * it will remove the target scene node and the target's parent will adopt\n   * its grandchildren. If the target did not have parents, the grandchildren will\n   * become root nodes in the graph.\n   */\n  replaceSceneNode(sceneNode, replacementNode) {\n    let info = this.nodes[sceneNode];\n    let parentNode = info.parent;\n    let grandChildren = info.children.slice();\n\n    // Remove the target node from graph\n    detach(parentNode, sceneNode, this);\n\n    // Begin grafting the grandchildren by removing them...\n    info.children.length = 0;\n\n    if (replacementNode) {\n      // Reattach all grandchildren to new replacement node.\n      let replacementInfo = this.nodes[replacementNode];\n      let replacementParent = replacementInfo.parent;\n\n      // Remove replacement node from previous parent\n      detach(replacementParent, replacementNode, this);\n\n      // ...and graft them back.\n      replacementInfo.children.push(...grandChildren);\n\n      // And reattach target parent to new child.\n      attach(parentNode, replacementNode, this);\n    } else {\n      // Reattach all grandchildren to target parent...\n      if (parentNode) {\n        //...as regular children.\n        let parentInfo = this.nodes[parentNode];\n        parentInfo.children.push(...grandChildren);\n      } else {\n        //...as root children.\n        this.roots.push(...grandChildren);\n      }\n    }\n\n    // ...and repair their parent relations.\n    for (let childNode of grandChildren) {\n      this.nodes[childNode].parent = parentNode;\n    }\n  }\n\n  /**\n   * Walks through every child node in the graph.\n   *\n   * @param {WalkCallback} callback The function called for each node\n   * in the graph, in ordered traversal from parent to child.\n   * @param {Object} [opts={}] Any additional options.\n   * @param {SceneNode|Array<SceneNode>} [opts.from] The parent node to\n   * start walking from, inclusive. By default, it will start from the root\n   * nodes.\n   * @param {WalkChildrenCallback} [opts.childfilter] The function called before\n   * walking through the children. This is usually used to determine the\n   * visiting order.\n   */\n  walk(callback, opts = {}) {\n    const { from = undefined, childFilter = undefined } = opts;\n\n    let fromNodes;\n    if (!from) fromNodes = this.roots;\n    else if (!Array.isArray(from)) fromNodes = [from];\n    else fromNodes = from;\n\n    if (childFilter) fromNodes = childFilter(fromNodes, 0, this);\n    for (let fromNode of fromNodes) {\n      walkImpl(this, fromNode, 0, callback, childFilter);\n    }\n  }\n}\n\n/**\n * @param {SceneNode} key The scene node handle.\n * @returns {SceneNodeInfo} The scene node metadata.\n */\nfunction createSceneNodeInfo() {\n  return {\n    parent: 0,\n    children: [],\n  };\n}\n\n/**\n * Attaches a child node to a parent in the scene graph. If parentNode is\n * null, then it will attach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction attach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has new parent; attach to parent. It is now in the graph.\n    sceneGraph.nodes[parentNode].children.push(childNode);\n    sceneGraph.nodes[childNode].parent = parentNode;\n  } else {\n    // No parent; move to root. It is now in the graph.\n    sceneGraph.roots.push(childNode);\n    sceneGraph.nodes[childNode].parent = 0;\n  }\n}\n\n/**\n * Detaches a child node from its parent in the scene graph. If parentNode is\n * null, then it will detach as a root node.\n *\n * @param {SceneNode} parentNode The parent node to attach to. Can be null.\n * @param {SceneNode} childNode The child node to attach from.\n * @param {SceneGraph} sceneGraph The scene graph to attach in.\n */\nfunction detach(parentNode, childNode, sceneGraph) {\n  if (parentNode) {\n    // Has parent; detach from parent. It is now a free node.\n    let children = sceneGraph.nodes[parentNode].children;\n    let childIndex = children.indexOf(childNode);\n    children.splice(childIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  } else {\n    // No parent; remove from root. It is now a free node.\n    let roots = sceneGraph.roots;\n    let rootIndex = roots.indexOf(childNode);\n    roots.splice(rootIndex, 1);\n    sceneGraph.nodes[childNode].parentNode = 0;\n  }\n}\n\n/**\n * Walk down from the parent and through all its descendents.\n *\n * @param {SceneGraph} sceneGraph The scene graph containing the nodes to be visited.\n * @param {SceneNode} parentNode The parent node to start walking from.\n * @param {Number} level The current call depth level. This is used to limit the call stack.\n * @param {WalkCallback} nodeCallback The function called on each visited node.\n * @param {WalkChildrenCallback} [filterCallback] The function called before\n * walking through the children. This is usually used to determine the visiting order.\n */\nfunction walkImpl(\n  sceneGraph,\n  parentNode,\n  level,\n  nodeCallback,\n  filterCallback = undefined\n) {\n  if (level >= MAX_DEPTH_LEVEL) return;\n\n  let result = nodeCallback(parentNode, sceneGraph);\n  if (result === false) return;\n\n  let parentInfo = sceneGraph.nodes[parentNode];\n  let nextNodes = filterCallback\n    ? filterCallback(parentInfo.children, parentNode, sceneGraph)\n    : parentInfo.children;\n\n  for (let childNode of nextNodes) {\n    walkImpl(sceneGraph, childNode, level + 1, nodeCallback, filterCallback);\n  }\n\n  if (typeof result === 'function') {\n    result(parentNode, sceneGraph);\n  }\n}\n\nfunction walkDeleteCallback(sceneNode, sceneGraph) {\n  delete sceneGraph.nodes[sceneNode];\n}\n","import { ComponentClass } from './ComponentClass';\n\n/**\n * @typedef {Record<number, object>} ComponentInstanceMap\n * @typedef {Record<string, ComponentInstanceMap>} ComponentClassMap\n * @typedef {number} EntityId\n * @typedef {string} ComponentName\n */\n\n/**\n * @template {ComponentClass<any>[]} T\n * @typedef {{[K in keyof T]: T[K] extends ComponentClass<infer V> ? V : never}} ComponentInstancesOf<T>\n */\n\n/**\n * @param {EntityManager} entityManager \n * @param {ComponentName} componentName\n * @returns {ComponentInstanceMap} A map of entity ids to component instance data.\n */\nfunction resolveComponentInstanceMap(entityManager, componentName) {\n    // @ts-ignore\n    let components = entityManager.components;\n    if (!(componentName in components)) {\n        /** @type {ComponentInstanceMap} */\n        let map = {};\n        components[componentName] = map;\n        return map;\n    } else {\n        return components[componentName];\n    }\n}\n\n/**\n * @param {EntityManager} entityManager \n * @param {ComponentName} componentName\n * @returns {ComponentInstanceMap} A map of entity ids to component instance data.\n */\nfunction resetComponentInstanceMap(entityManager, componentName) {\n    // @ts-ignore\n    let components = entityManager.components;\n    /** @type {ComponentInstanceMap} */\n    let map = {};\n    components[componentName] = map;\n    return map;\n}\n\n/**\n * @template T\n * @param {EntityManager} entityManager \n * @param {EntityId} entityId \n * @param {ComponentClass<T>} componentClass\n * @param {T} instance\n * @returns {T}\n */\nfunction attachComponent(entityManager, entityId, componentClass, instance) {\n    let componentName = componentClass.name;\n    let instanceMap = resolveComponentInstanceMap(entityManager, componentName);\n    instanceMap[entityId] = instance;\n    return instance;\n}\n\n/**\n * @template T\n * @param {EntityManager} entityManager \n * @param {EntityId} entityId \n * @param {ComponentClass<T>} componentClass\n */\nfunction detachComponent(entityManager, entityId, componentClass) {\n    let componentName = componentClass.name;\n    let instanceMap = resolveComponentInstanceMap(entityManager, componentName);\n    let instance = instanceMap[entityId];\n    delete instanceMap[entityId];\n    componentClass.delete(instance);\n}\n\n/**\n * @template T\n * @param {EntityManager} entityManager\n * @param {ComponentClass<T>} componentClass\n */\nfunction clearComponents(entityManager, componentClass) {\n    let componentName = componentClass.name;\n    let instanceMap = resolveComponentInstanceMap(entityManager, componentName);\n    let instances = Object.values(instanceMap);\n    resetComponentInstanceMap(entityManager, componentName);\n    for(let instance of instances) {\n        componentClass.delete(instance);\n    }\n}\n\nconst NEXT_AVAILABLE_ENTITY_ID = Symbol('nextAvailableEntityId');\n\n/**\n * @param {EntityManager} entityManager \n * @returns {EntityId}\n */\nfunction nextAvailableEntityId(entityManager) {\n    return ++entityManager[NEXT_AVAILABLE_ENTITY_ID];\n}\n\nexport class EntityManager {\n    constructor() {\n        /**\n         * @protected\n         * @type {ComponentClassMap}\n         */\n        this.components = {};\n        /** @type {EntityId} */\n        this[NEXT_AVAILABLE_ENTITY_ID] = 1;\n        /**\n         * @protected\n         * @type {Array<[string, ...any]>}\n         */\n        this.queue = [];\n    }\n\n    flush() {\n        while (this.queue.length > 0) {\n            let [type, ...args] = this.queue.shift();\n            switch (type) {\n                case 'attach': {\n                    let [entityId, componentClass, instance] = args;\n                    attachComponent(this, entityId, componentClass, instance);\n                } break;\n                case 'detach': {\n                    let [entityId, componentClass] = args;\n                    detachComponent(this, entityId, componentClass);\n                } break;\n                case 'clear': {\n                    let [componentClass] = args;\n                    clearComponents(this, componentClass);\n                } break;\n            }\n        }\n    }\n\n    /**\n     * @template {ComponentClass<any>[]}T\n     * @param {T} componentClasses \n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    createAndAttach(...componentClasses) {\n        let entityId = nextAvailableEntityId(this);\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (/** @type {unknown} */ ([entityId]));\n        for (let componentClass of componentClasses) {\n            let instance = this.attach(entityId, componentClass);\n            result.push(instance);\n        }\n        return result;\n    }\n\n    /**\n     * @returns {EntityId}\n     */\n    create() {\n        return nextAvailableEntityId(this);\n    }\n\n    /**\n     * @param {EntityId} entityId \n     */\n    destroy(entityId) {\n        for (let instanceMap of Object.values(this.components)) {\n            if (entityId in instanceMap) {\n                delete instanceMap[entityId];\n            }\n        }\n    }\n\n    /**\n     * @param {EntityId} entityId \n     */\n    exists(entityId) {\n        for (let instanceMap of Object.values(this.components)) {\n            if (entityId in instanceMap) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     * @returns {T}\n     */\n    attach(entityId, componentClass) {\n        let instance = componentClass.new();\n        this.queue.push(['attach', entityId, componentClass, instance]);\n        return instance;\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @returns {T}\n     */\n    attachImmediately(entityId, componentClass) {\n        let instance = componentClass.new();\n        return attachComponent(this, entityId, componentClass, instance);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass\n     */\n    detach(entityId, componentClass) {\n        this.queue.push(['detach', entityId, componentClass]);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     */\n    detachImmediately(entityId, componentClass) {\n        detachComponent(this, entityId, componentClass);\n    }\n\n    /**\n     * @template T\n     * @param {ComponentClass<T>} componentClass \n     */\n    clear(componentClass) {\n        this.queue.push(['clear', componentClass]);\n    }\n\n    /**\n     * @param {ComponentClass<any>} componentClass \n     */\n    clearImmediately(componentClass) {\n        clearComponents(this, componentClass);\n    }\n\n    /**\n     * @template T\n     * @param {EntityId} entityId \n     * @param {ComponentClass<T>} componentClass \n     * @returns {T}\n     */\n    get(entityId, componentClass) {\n        let componentName = componentClass.name;\n        let instanceMap = resolveComponentInstanceMap(this, componentName);\n        if (instanceMap) {\n            return null;\n        } else {\n            return instanceMap[entityId] || null;\n        }\n    }\n\n    /**\n     * @param {ComponentClass<?>} componentClass \n     * @returns {number}\n     */\n    count(componentClass) {\n        let componentName = componentClass.name;\n        let instanceMap = resolveComponentInstanceMap(this, componentName);\n        if (instanceMap) {\n            return 0;\n        } else {\n            return Object.keys(instanceMap).length;\n        }\n    }\n\n    reset() {\n        this.components = {};\n        this[NEXT_AVAILABLE_ENTITY_ID] = 1;\n        this.queue.length = 0;\n    }\n}\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class EntityTemplate {\n    /**\n     * @param {T} componentClasses \n     */\n    constructor(...componentClasses) {\n        /** @private */\n        this.componentClasses = componentClasses;\n    }\n\n    /**\n     * @param {EntityManager} entityManager\n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    create(entityManager) {\n        let entityId = nextAvailableEntityId(entityManager);\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (/** @type {unknown} */ ([entityId]));\n        for (let componentClass of this.componentClasses) {\n            let instance = entityManager.attach(entityId, componentClass);\n            result.push(instance);\n        }\n        return result;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @param {EntityId} entityId \n     */\n    destroy(entityManager, entityId) {\n        for (let componentClass of this.componentClasses) {\n            entityManager.detach(entityId, componentClass);\n        }\n    }\n}\n\n/**\n * @template {ComponentClass<any>[]} T\n */\nexport class EntityQuery {\n    /**\n     * @param {T} selectors \n     */\n    constructor(...selectors) {\n        /** @private */\n        this.selectors = selectors;\n    }\n    \n    /**\n     * @param {EntityManager} entityManager \n     * @returns {number}\n     */\n    count(entityManager) {\n        let count = 0;\n        let iter = this.findAll(entityManager);\n        while(!iter.next().done) {\n            ++count;\n        }\n        return count;\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {[EntityId, ...ComponentInstancesOf<T>]}\n     */\n    find(entityManager) {\n        let entities = this.findAll(entityManager);\n        let result = entities.next();\n        if (result.done) {\n            // @ts-ignore\n            return [];\n        } else {\n            return result.value;\n        }\n    }\n\n    /**\n     * @param {EntityManager} entityManager \n     * @returns {Generator<[EntityId, ...ComponentInstancesOf<T>]>}\n     */\n    *findAll(entityManager) {\n        if (this.selectors.length <= 0) {\n            return;\n        }\n        let componentClass = this.selectors[0];\n        let componentName = componentClass.name;\n        let instanceMap = resolveComponentInstanceMap(entityManager, componentName);\n        let result = /** @type {[EntityId, ...ComponentInstancesOf<T>]} */ (new Array(this.selectors.length + 1));\n        for (let key of Object.keys(instanceMap)) {\n            let entityId = Number(key);\n            let flag = true;\n            result[0] = entityId;\n            let index = 1;\n            for (let otherClass of this.selectors) {\n                let otherName = otherClass.name;\n                let otherMap = resolveComponentInstanceMap(entityManager, otherName);\n                if (!(entityId in otherMap)) {\n                    flag = false;\n                    break;\n                }\n                let other = otherMap[entityId];\n                result[index++] = other;\n            }\n            if (flag) {\n                yield result;\n            }\n        }\n    }\n}\n","/**\n * @template T\n */\nexport class Topic {\n\n    /**\n     * @abstract\n     * @param {T} [attachment] \n     */\n    dispatch(attachment = null) {}\n\n    /**\n     * @abstract\n     * @param {T} [attachment] \n     */\n    dispatchImmediately(attachment = null) {}\n\n    /**\n     * @abstract\n     * @param {number} max \n     */\n    flush(max = 1000) {}\n}\n","import { Topic } from './Topic.js';\n\n/**\n * @template T\n * @typedef {(t: T) => void|boolean} PriorityTopicCallback<T>\n */\n\n/**\n * @template T\n * @typedef PriorityTopicOptions\n * @property {number} priority\n * @property {PriorityTopicCallback<T>} callback\n */\n\n/**\n * @param {PriorityTopicOptions<?>} a \n * @param {PriorityTopicOptions<?>} b \n */\nfunction comparator(a, b) {\n    return a.priority - b.priority;\n}\n\n/**\n * @template T\n */\nexport class PriorityEventTopic extends Topic {\n\n    constructor() {\n        super();\n\n        /**\n         * @private\n         * @type {Array<PriorityTopicOptions<T>>}\n         */\n        this.listeners = [];\n\n        /**\n         * @private\n         * @type {Array<T>}\n         */\n        this.queued = [];\n    }\n\n    /**\n     * @param {number} priority \n     * @param {PriorityTopicCallback<T>} callback \n     */\n    on(priority, callback) {\n        this.listeners.push({ priority, callback });\n        this.listeners.sort(comparator);\n        return this;\n    }\n\n    /**\n     * @param {PriorityTopicCallback<T>} callback \n     */\n    off(callback) {\n        for(let i = 0; i < this.listeners.length; ++i) {\n            if (this.listeners.at(i).callback === callback) {\n                this.listeners.splice(i, 1);\n                break;\n            }\n        }\n        return this;\n    }\n\n    /**\n     * @param {number} priority \n     * @param {PriorityTopicCallback<T>} callback \n     */\n    once(priority, callback) {\n        let wrapper = (attachment) => {\n            this.off(wrapper);\n            return callback(attachment);\n        };\n        return this.on(priority, wrapper);\n    }\n\n    count() {\n        return this.listeners.length;\n    }\n\n    /**\n     * @override\n     * @param {T} [attachment]\n     */\n    dispatch(attachment = null) {\n        this.queued.push(attachment);\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {T} [attachment] \n     */\n    dispatchImmediately(attachment = null) {\n        for(let listener of this.listeners) {\n            let result = listener.callback(attachment);\n            // Consume the event if return true.\n            if (result === true) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    /** @override */\n    flush(max = 1000) {\n        let i = 0;\n        while(this.queued.length > 0 && i++ < max) {\n            let attachment = this.queued.shift();\n            this.dispatchImmediately(attachment);\n        }\n        return this;\n    }\n}\n","import { Topic } from './Topic.js';\n\n/**\n * @template T\n */\nexport class CommandTopic extends Topic {\n    \n    constructor() {\n        super();\n\n        /**\n         * @private\n         * @type {Array<T>}\n         */\n        this.messages = [];\n        \n        /**\n         * @private\n         * @type {Array<T>}\n         */\n        this.queued = [];\n    }\n\n    /**\n     * @override\n     * @param {T} message \n     */\n    dispatch(message) {\n        this.queued.push(message);\n    }\n\n    /**\n     * @override\n     * @param {T} message \n     */\n    dispatchImmediately(message) {\n        this.messages.push(message);\n    }\n\n    /** @override */\n    flush(max = 1000) {\n        let result = this.queued.splice(0, Math.min(max, this.queued.length));\n        this.messages.push(...result);\n    }\n\n    /**\n     * @param {number} [max]\n     * @return {Iterable<T>}\n     */\n    *poll(max = 1000) {\n        let iterations = 0;\n        while(iterations < max && this.messages.length > 0) {\n            let message = this.messages.shift();\n            yield message;\n            ++iterations;\n        }\n    }\n}\n","/**\n * @template T\n */\nexport class ComponentClass {\n    /**\n     * @param {string} name \n     * @param {() => T} newCallback\n     * @param {(component: T) => void} [deleteCallback] \n     */\n    constructor(name, newCallback = () => null, deleteCallback = () => { }) {\n        this.name = name;\n        this.new = newCallback;\n        this.delete = deleteCallback;\n    }\n}\n","import { Topic } from './Topic.js';\n\n/**\n * @template T\n * @typedef {(t: T) => void|boolean} EventTopicCallback\n */\n\n/** @template T */\nexport class EventTopic extends Topic {\n\n    constructor() {\n        super();\n\n        /**\n         * @private\n         * @type {Array<EventTopicCallback<T>>}\n         */\n        this.listeners = [];\n\n        /**\n         * @private\n         * @type {Array<T>}\n         */\n        this.queued = [];\n    }\n\n    /**\n     * @param {EventTopicCallback<T>} callback \n     */\n    on(callback) {\n        this.listeners.push(callback);\n        return this;\n    }\n\n    /**\n     * @param {EventTopicCallback<T>} callback \n     */\n    off(callback) {\n        let i = this.listeners.indexOf(callback);\n        if (i >= 0) {\n            this.listeners.splice(i, 1);\n        }\n        return this;\n    }\n\n    /**\n     * @param {EventTopicCallback<T>} callback \n     */\n    once(callback) {\n        let wrapper = (attachment) => {\n            this.off(wrapper);\n            return callback(attachment);\n        };\n        this.on(wrapper);\n        return this;\n    }\n\n    /**\n     * @override\n     * @param {T} [attachment]\n     */\n    dispatch(attachment = null) {\n        this.queued.push(attachment);\n    }\n\n    /**\n     * @override\n     * @param {T} [attachment] \n     */\n    dispatchImmediately(attachment = null) {\n        for(let listener of this.listeners) {\n            let result = listener(attachment);\n            // Consume the event if return true.\n            if (result === true) {\n                break;\n            }\n        }\n    }\n\n    /** @override */\n    flush(max = 1000) {\n        let i = 0;\n        while(this.queued.length > 0 && i++ < max) {\n            let attachment = this.queued.shift();\n            this.dispatchImmediately(attachment);\n        }\n    }\n\n    count() {\n        return this.listeners.length;\n    }\n}\n","import { mat4 } from 'gl-matrix';\nimport { Camera } from './Camera.js';\n\nexport class OrthographicCamera extends Camera {\n  /**\n   * @param {number} [left]\n   * @param {number} [top]\n   * @param {number} [right]\n   * @param {number} [bottom]\n   * @param {number} [near]\n   * @param {number} [far]\n   */\n  constructor(\n    left = undefined,\n    top = undefined,\n    right = undefined,\n    bottom = undefined,\n    near = -1000,\n    far = 1000\n  ) {\n    super(mat4.create(), mat4.create());\n\n    this.orthoBounds = {\n      left: typeof left === 'undefined' ? undefined : Number(left),\n      top: typeof top === 'undefined' ? undefined : Number(top),\n      right: typeof right === 'undefined' ? undefined : Number(right),\n      bottom: typeof bottom === 'undefined' ? undefined : Number(bottom),\n    };\n    this.clippingPlane = {\n      near: Number(near),\n      far: Number(far),\n    };\n  }\n\n  /**\n   * If both the bounds and viewport dimensions are defined, the orthographic\n   * projection will be set the defined bounds adjusted with respect to\n   * the aspect ratio. This is usually the desired behavior.\n   *\n   * If the bounds are `undefined`, the orthographic projection will\n   * be set to the viewport dimensions. This is useful for pixel-perfect\n   * projections.\n   *\n   * If viewport dimensions are `undefined`, the orthographic projection\n   * will only use the defined bounds. This is useful if you are already\n   * performing your own calculations for the bounds or desire a static\n   * projection.\n   *\n   * @override\n   * @param {number} [viewportWidth]\n   * @param {number} [viewportHeight]\n   */\n  resize(viewportWidth = undefined, viewportHeight = undefined) {\n    const { near, far } = this.clippingPlane;\n    const { left, top, right, bottom } = this.orthoBounds;\n\n    let projectionMatrix = this.projectionMatrix;\n    let hasViewport = typeof viewportWidth !== 'undefined';\n    let hasBounds = typeof left !== 'undefined';\n\n    if (hasViewport) {\n      if (hasBounds) {\n        // Use the defined bounds with respect to the viewport aspect ratio\n        const aspectRatio = viewportWidth / viewportHeight;\n        mat4.ortho(\n          projectionMatrix,\n          left * aspectRatio,\n          right * aspectRatio,\n          bottom,\n          top,\n          near,\n          far\n        );\n      } else {\n        // Use the viewport dimensions as bounds\n        mat4.ortho(\n          projectionMatrix,\n          0,\n          viewportWidth,\n          viewportHeight,\n          0,\n          near,\n          far\n        );\n      }\n    } else {\n      if (hasBounds) {\n        // Use the defined bounds as-is\n        mat4.ortho(projectionMatrix, left, right, bottom, top, near, far);\n      } else {\n        // Use default bounds (since nothing else exists)\n        mat4.ortho(projectionMatrix, -1, 1, 1, -1, -1, 1);\n      }\n    }\n    return this;\n  }\n}\n"],"names":["UP","vec3","fromValues","Camera","constructor","projectionMatrix","viewMatrix","this","resize","viewportWidth","viewportHeight","DEFAULT_FOVY","Math","PI","TO_RAD_FACTOR","MAX_DEPTH_LEVEL","attach","parentNode","childNode","sceneGraph","nodes","children","push","parent","roots","detach","childIndex","indexOf","splice","rootIndex","walkImpl","level","nodeCallback","filterCallback","result","parentInfo","nextNodes","walkDeleteCallback","sceneNode","resolveComponentInstanceMap","entityManager","componentName","components","map","attachComponent","entityId","componentClass","instance","name","detachComponent","instanceMap","delete","clearComponents","instances","Object","values","resetComponentInstanceMap","NEXT_AVAILABLE_ENTITY_ID","Symbol","nextAvailableEntityId","Topic","dispatch","attachment","dispatchImmediately","flush","max","comparator","a","b","priority","super","messages","queued","message","min","length","poll","iterations","shift","newCallback","deleteCallback","new","queue","type","args","createAndAttach","componentClasses","create","destroy","exists","attachImmediately","detachImmediately","clear","clearImmediately","get","count","keys","reset","selectors","iter","findAll","next","done","find","value","Array","key","Number","flag","index","otherClass","otherMap","other","listeners","on","callback","off","i","once","wrapper","listener","opts","locky","position","forward","right","up","forwardAmount","rightAmount","upAmount","pitch","yaw","look","dx","dy","dt","move","apply","rady","radp","cosy","cos","cosp","siny","sin","dz","normalize","set","cross","scale","add","target","mat4","lookAt","left","top","bottom","near","far","orthoBounds","undefined","clippingPlane","hasBounds","aspectRatio","ortho","fieldOfView","perspective","sort","at","_nextAvailableSceneNodeId","createSceneNode","info","createSceneNodes","deleteSceneNode","Error","deleteSceneNodes","sceneNodes","getSceneNodeInfo","parentSceneNode","replaceSceneNode","replacementNode","grandChildren","slice","replacementInfo","walk","from","childFilter","fromNodes","isArray","fromNode","x","y","z","rotation","quat","getTranslation","getRotation","targetRotation","slerp","fromRotationTranslation","translation","translate","out","normalizedScreenCoordX","normalizedScreenCoordY","normalized","v","vec4","m","invert","transformMat4"],"mappings":"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"}