{"version":3,"file":"milque-input.cjs.js","sources":["../src/state/InputState.js","../src/state/AxisState.js","../src/state/ButtonState.js","../src/keycode/KeyCode.js","../src/keycode/KeyCodes.js","../src/binding/InputBinding.js","../src/keycode/KeyCodeHelper.js","../src/binding/AxisBinding.js","../src/binding/ButtonBinding.js","../src/binding/AxisButtonBinding.js","../src/device/InputDevice.js","../src/device/KeyboardDevice.js","../src/device/MouseDevice.js","../src/inputcode/InputCode.js","../src/AutoPoller.js","../src/DeviceInputAdapter.js","../src/InputBindings.js","../src/InputContext.js","../src/inputport/InputPort.js","../src/Keyboard.js","../src/Mouse.js"],"sourcesContent":["/**\n * @typedef {number} BindingIndex\n *\n * @typedef BindingOptions\n * @property {boolean} inverted\n *\n * @typedef InputReadOnly\n * @property {number} value\n * @property {boolean} polling\n */\n\nexport class InputState {\n  get polling() {\n    let dt = performance.now() - this._lastPollingTime;\n    return dt < 1_000;\n  }\n\n  /** @abstract */\n  get value() {\n    return 0;\n  }\n  \n  get size() {\n    return this._size;\n  }\n\n  /**\n   * @abstract\n   * @param {number} size The initial binding state size.\n   */\n  constructor(size) {\n    /** @private */\n    this._size = size;\n    /** @private */\n    this._lastPollingTime = Number.MIN_SAFE_INTEGER;\n  }\n\n  /**\n   * Called to internally resize to accomodate more/less\n   * binding states.\n   *\n   * @protected\n   * @param {number} newSize\n   */\n  resize(newSize) {\n    this._size = newSize;\n  }\n\n  /**\n   * @abstract\n   * @param {BindingIndex} code\n   * @returns {number}\n   */\n  // eslint-disable-next-line no-unused-vars\n  getState(code) {\n    throw new Error('Missing implementation.');\n  }\n\n  /**\n   * @abstract\n   * @param {BindingIndex} code\n   * @param {number} value\n   * @param {number} delta\n   */\n  // eslint-disable-next-line no-unused-vars\n  onUpdate(code, value, delta) {\n    throw new Error('Missing implementation.');\n  }\n\n  /**\n   * @abstract\n   * @param {BindingIndex} code\n   * @param {number} value\n   */\n  // eslint-disable-next-line no-unused-vars\n  onStatus(code, value) {\n    throw new Error('Missing implementation.');\n  }\n\n  /**\n   * Called to poll all bound states.\n   *\n   * @param {number} now\n   */\n  onPoll(now) {\n    this._lastPollingTime = now;\n  }\n\n  /**\n   * Called to bind a state to the given binding code.\n   *\n   * @param {BindingIndex} code\n   * @param {BindingOptions} [opts]\n   */\n  // eslint-disable-next-line no-unused-vars\n  onBind(code, opts = undefined) {\n    if (code >= this._size) {\n      this.resize(code + 1);\n    }\n  }\n\n  /**\n   * Called to unbind all states.\n   */\n  onUnbind() {\n    this.resize(0);\n  }\n}\n","import { InputState } from './InputState.js';\n\n/**\n * @typedef {import('./InputState.js').BindingIndex} BindingIndex The binding index\n * @typedef {import('./InputState.js').BindingOptions} BindingOptions The binding options\n *\n * @typedef AxisBindingState\n * @property {number} value\n * @property {number} delta\n * @property {boolean} inverted\n *\n * @typedef AxisReadOnly\n * @property {number} value\n * @property {number} delta\n * @property {boolean} polling\n */\n\nexport class AxisState extends InputState {\n  /** @returns {AxisBindingState} */\n  static createAxisBindingState() {\n    return {\n      value: 0,\n      delta: 0,\n      inverted: false,\n    };\n  }\n\n  /** @returns {number} */\n  get delta() {\n    return this._delta;\n  }\n\n  /**\n   * @override\n   * @returns {number}\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * @param {number} [size]\n   */\n  constructor(size = 0) {\n    super(size);\n    let state = new Array();\n    let c = /** @type {typeof AxisState} */ (this.constructor);\n    for (let i = 0; i < size; ++i) {\n      state.push(c.createAxisBindingState());\n    }\n    /**\n     * @private\n     * @type {Array<AxisBindingState>}\n     */\n    this._state = state;\n    /** @private */\n    this._value = 0;\n    /** @private */\n    this._delta = 0;\n  }\n\n  /**\n   * @override\n   * @protected\n   */\n  resize(newSize) {\n    let oldState = this._state;\n    let oldSize = oldState.length;\n    let newState;\n    if (newSize <= oldSize) {\n      newState = oldState.slice(0, newSize);\n    } else {\n      newState = oldState;\n      // Fill with new states\n      let c = /** @type {typeof AxisState} */ (this.constructor);\n      for (let i = oldSize; i < newSize; ++i) {\n        newState.push(c.createAxisBindingState());\n      }\n    }\n    this._state = newState;\n    super.resize(newSize);\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @returns {number}\n   */\n  getState(code) {\n    return this._state[code].value;\n  }\n\n  /**\n   * @override\n   * @param {number} now\n   */\n  onPoll(now) {\n    let state = this._state;\n    let accumulatedValue = 0;\n    let accumulatedDelta = 0;\n    const len = state.length;\n    for (let i = 0; i < len; ++i) {\n      let value = state[i];\n      accumulatedValue += value.value * (value.inverted ? -1 : 1);\n      accumulatedDelta += value.delta;\n      state[i].delta = 0;\n    }\n    this._value = accumulatedValue;\n    this._delta = accumulatedDelta;\n    super.onPoll(now);\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @param {number} value\n   * @param {number} delta\n   */\n  onUpdate(code, value, delta) {\n    if (typeof value === 'undefined') {\n      this.onAxisChange(code, delta);\n    } else {\n      this.onAxisMove(code, value, delta);\n    }\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @param {number} value\n   */\n  onStatus(code, value) {\n    this.onAxisStatus(code, value);\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @param {BindingOptions} [opts]\n   */\n  onBind(code, opts = undefined) {\n    super.onBind(code, opts);\n    const { inverted = false } = opts || {};\n    let state = this._state;\n    state[code].inverted = inverted;\n  }\n\n  /**\n   * @protected\n   * @param {BindingIndex} code\n   * @param {number} x\n   * @param {number} dx\n   */\n  onAxisMove(code, x, dx) {\n    let state = this._state[code];\n    state.value = x;\n    state.delta += dx;\n  }\n\n  /**\n   * @protected\n   * @param {BindingIndex} code\n   * @param {number} dx\n   */\n  onAxisChange(code, dx) {\n    let state = this._state[code];\n    state.value += dx;\n    state.delta += dx;\n  }\n\n  /**\n   * @protected\n   * @param {BindingIndex} code\n   * @param {number} x\n   */\n  onAxisStatus(code, x) {\n    let state = this._state[code];\n    let prev = state.value;\n    state.value = x;\n    state.delta = x - prev;\n  }\n}\n","import { InputState } from './InputState.js';\n\n/**\n * @typedef {import('./InputState.js').BindingIndex} BindingIndex\n * @typedef {import('./InputState.js').BindingOptions} BindingOptions\n *\n * @typedef ButtonReadOnly\n * @property {number} value\n * @property {boolean} pressed\n * @property {boolean} repeated\n * @property {boolean} released\n * @property {boolean} down\n * @property {boolean} polling\n */\n\nexport const CLEAR_POLL_BITS = 0b1111_0001;\nexport const CLEAR_DOWN_STATE_BITS = 0b1111_1110;\nexport const CLEAR_INVERTED_MODIFIER_BITS = 0b1110_1111;\n\nexport const DOWN_STATE_BIT = 0b0000_0001;\nexport const PRESSED_STATE_BIT = 0b0000_0010;\nexport const REPEATED_STATE_BIT = 0b0000_0100;\nexport const RELEASED_STATE_BIT = 0b0000_1000;\nexport const INVERTED_MODIFIER_BIT = 0b0001_0000;\n\nexport class ButtonState extends InputState {\n  /** @returns {boolean} */\n  get pressed() {\n    return this._pressed;\n  }\n\n  /** @returns {boolean} */\n  get repeated() {\n    return this._repeated;\n  }\n\n  /** @returns {boolean} */\n  get released() {\n    return this._released;\n  }\n\n  /** @returns {boolean} */\n  get down() {\n    return this._down;\n  }\n\n  /**\n   * @override\n   * @returns {number}\n   */\n  get value() {\n    return this._value;\n  }\n\n  /**\n   * @param {number} [size]\n   */\n  constructor(size = 0) {\n    super(size);\n    /** @private */\n    this._state = new Uint8Array(size);\n    /** @private */\n    this._value = 0;\n    /** @private */\n    this._down = false;\n    /** @private */\n    this._pressed = false;\n    /** @private */\n    this._repeated = false;\n    /** @private */\n    this._released = false;\n  }\n\n  /**\n   * @override\n   * @protected\n   */\n  resize(newSize) {\n    let oldState = this._state;\n    let oldSize = oldState.length;\n    let newState;\n    if (newSize <= oldSize) {\n      newState = oldState.slice(0, newSize);\n    } else {\n      newState = new Uint8Array(newSize);\n      newState.set(oldState);\n    }\n    this._state = newState;\n    super.resize(newSize);\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @returns {number}\n   */\n  getState(code) {\n    let state = this._state[code];\n    let modifier = state & INVERTED_MODIFIER_BIT ? -1 : 1;\n    let value = state & DOWN_STATE_BIT ? 1 : 0;\n    return value * modifier;\n  }\n\n  /**\n   * @override\n   * @param {number} now\n   */\n  onPoll(now) {\n    let state = this._state;\n    let result = 0;\n    let down = 0;\n    let pressed = 0;\n    let repeated = 0;\n    let released = 0;\n    const len = state.length;\n    for (let i = 0; i < len; ++i) {\n      let value = state[i];\n      let v = value & DOWN_STATE_BIT;\n      let m = value & INVERTED_MODIFIER_BIT;\n      down |= v;\n      pressed |= value & PRESSED_STATE_BIT;\n      repeated |= value & REPEATED_STATE_BIT;\n      released |= value & RELEASED_STATE_BIT;\n      result += (v ? 1 : 0) * (m ? -1 : 1);\n      state[i] &= CLEAR_POLL_BITS;\n    }\n    this._value = result;\n    this._down = down !== 0;\n    this._pressed = pressed !== 0;\n    this._repeated = repeated !== 0;\n    this._released = released !== 0;\n    super.onPoll(now);\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @param {number} value\n   * @param {number} delta\n   */\n  onUpdate(code, value, delta) {\n    if (delta > 0) {\n      this.onButtonPressed(code);\n    } else {\n      this.onButtonReleased(code);\n    }\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @param {number} value\n   */\n  onStatus(code, value) {\n    this.onButtonStatus(code, value !== 0);\n  }\n\n  /**\n   * @override\n   * @param {BindingIndex} code\n   * @param {BindingOptions} [opts]\n   */\n  onBind(code, opts = { inverted: false }) {\n    super.onBind(code, opts);\n    const { inverted = false } = opts;\n    let state = this._state;\n    if (inverted) {\n      state[code] |= INVERTED_MODIFIER_BIT;\n    } else {\n      state[code] &= CLEAR_INVERTED_MODIFIER_BITS;\n    }\n  }\n\n  /**\n   * @protected\n   * @param {BindingIndex} code\n   */\n  onButtonPressed(code) {\n    let state = this._state;\n    let bits = state[code];\n    if (!(bits & DOWN_STATE_BIT)) {\n      bits |= PRESSED_STATE_BIT;\n      bits |= DOWN_STATE_BIT;\n    }\n    bits |= REPEATED_STATE_BIT;\n    state[code] = bits;\n  }\n\n  /**\n   * @protected\n   * @param {BindingIndex} code\n   */\n  onButtonReleased(code) {\n    let state = this._state;\n    let bits = state[code];\n    if (bits & DOWN_STATE_BIT) {\n      bits |= RELEASED_STATE_BIT;\n      bits &= CLEAR_DOWN_STATE_BITS;\n    }\n    state[code] = bits;\n  }\n\n  /**\n   * @protected\n   * @param {BindingIndex} code\n   * @param {boolean} isDown\n   */\n  onButtonStatus(code, isDown) {\n    let state = this._state;\n    let bits = state[code];\n    let wasDown = Boolean(bits & DOWN_STATE_BIT);\n    if (isDown) {\n      bits |= DOWN_STATE_BIT;\n    } else {\n      bits &= CLEAR_DOWN_STATE_BITS;\n    }\n    if (wasDown && !isDown) {\n      bits |= RELEASED_STATE_BIT;\n    }\n    if (!wasDown && isDown) {\n      bits |= PRESSED_STATE_BIT;\n      bits |= REPEATED_STATE_BIT;\n    }\n    state[code] = bits;\n  }\n}\n","export class KeyCode {\n  /**\n   * @param {string} string\n   * @returns {KeyCode}\n   */\n  static parse(string) {\n    string = string.trim();\n    let i = string.indexOf('.');\n    if (i < 0) {\n      throw new Error('Missing device separator for key code.');\n    }\n    let device = string.substring(0, i);\n    if (device.length < 0) {\n      throw new Error('Missing device for key code.');\n    }\n    let key = string.substring(i + 1);\n    if (key.length < 0) {\n      throw new Error('Missing code for key code.');\n    }\n    return new KeyCode(device, key);\n  }\n\n  /**\n   * @param {string} device\n   * @param {string} code\n   */\n  constructor(device, code) {\n    this.device = device;\n    this.code = code;\n  }\n\n  /** @override */\n  toString() {\n    return `${this.device}.${this.code}`;\n  }\n}\n","import { KeyCode } from './KeyCode.js';\n\nexport function from(device, code) {\n  return new KeyCode(device, code);\n}\n\nexport function isKeyCode(object) {\n  return 'device' in object && 'code' in object;\n}\n\nexport const KEYBOARD = 'Keyboard';\nexport const MOUSE = 'Mouse';\n\nexport const KEY_A = new KeyCode(KEYBOARD, 'KeyA');\nexport const KEY_B = new KeyCode(KEYBOARD, 'KeyB');\nexport const KEY_C = new KeyCode(KEYBOARD, 'KeyC');\nexport const KEY_D = new KeyCode(KEYBOARD, 'KeyD');\nexport const KEY_E = new KeyCode(KEYBOARD, 'KeyE');\nexport const KEY_F = new KeyCode(KEYBOARD, 'KeyF');\nexport const KEY_G = new KeyCode(KEYBOARD, 'KeyG');\nexport const KEY_H = new KeyCode(KEYBOARD, 'KeyH');\nexport const KEY_I = new KeyCode(KEYBOARD, 'KeyI');\nexport const KEY_J = new KeyCode(KEYBOARD, 'KeyJ');\nexport const KEY_K = new KeyCode(KEYBOARD, 'KeyK');\nexport const KEY_L = new KeyCode(KEYBOARD, 'KeyL');\nexport const KEY_M = new KeyCode(KEYBOARD, 'KeyM');\nexport const KEY_N = new KeyCode(KEYBOARD, 'KeyN');\nexport const KEY_O = new KeyCode(KEYBOARD, 'KeyO');\nexport const KEY_P = new KeyCode(KEYBOARD, 'KeyP');\nexport const KEY_Q = new KeyCode(KEYBOARD, 'KeyQ');\nexport const KEY_R = new KeyCode(KEYBOARD, 'KeyR');\nexport const KEY_S = new KeyCode(KEYBOARD, 'KeyS');\nexport const KEY_T = new KeyCode(KEYBOARD, 'KeyT');\nexport const KEY_U = new KeyCode(KEYBOARD, 'KeyU');\nexport const KEY_V = new KeyCode(KEYBOARD, 'KeyV');\nexport const KEY_W = new KeyCode(KEYBOARD, 'KeyW');\nexport const KEY_X = new KeyCode(KEYBOARD, 'KeyX');\nexport const KEY_Y = new KeyCode(KEYBOARD, 'KeyY');\nexport const KEY_Z = new KeyCode(KEYBOARD, 'KeyZ');\n\nexport const DIGIT_0 = new KeyCode(KEYBOARD, 'Digit0');\nexport const DIGIT_1 = new KeyCode(KEYBOARD, 'Digit1');\nexport const DIGIT_2 = new KeyCode(KEYBOARD, 'Digit2');\nexport const DIGIT_3 = new KeyCode(KEYBOARD, 'Digit3');\nexport const DIGIT_4 = new KeyCode(KEYBOARD, 'Digit4');\nexport const DIGIT_5 = new KeyCode(KEYBOARD, 'Digit5');\nexport const DIGIT_6 = new KeyCode(KEYBOARD, 'Digit6');\nexport const DIGIT_7 = new KeyCode(KEYBOARD, 'Digit7');\nexport const DIGIT_8 = new KeyCode(KEYBOARD, 'Digit8');\nexport const DIGIT_9 = new KeyCode(KEYBOARD, 'Digit9');\n\nexport const MINUS = new KeyCode(KEYBOARD, 'Minus');\nexport const EQUAL = new KeyCode(KEYBOARD, 'Equal');\nexport const BRACKET_LEFT = new KeyCode(KEYBOARD, 'BracketLeft');\nexport const BRACKET_RIGHT = new KeyCode(KEYBOARD, 'BracketRight');\nexport const SEMICOLON = new KeyCode(KEYBOARD, 'Semicolon');\nexport const QUOTE = new KeyCode(KEYBOARD, 'Quote');\nexport const BACKQUOTE = new KeyCode(KEYBOARD, 'Backquote');\nexport const BACKSLASH = new KeyCode(KEYBOARD, 'Backslash');\nexport const COMMA = new KeyCode(KEYBOARD, 'Comma');\nexport const PERIOD = new KeyCode(KEYBOARD, 'Period');\nexport const SLASH = new KeyCode(KEYBOARD, 'Slash');\n\nexport const ESCAPE = new KeyCode(KEYBOARD, 'Escape');\nexport const SPACE = new KeyCode(KEYBOARD, 'Space');\nexport const CAPS_LOCK = new KeyCode(KEYBOARD, 'CapsLock');\nexport const BACKSPACE = new KeyCode(KEYBOARD, 'Backspace');\nexport const DELETE = new KeyCode(KEYBOARD, 'Delete');\nexport const TAB = new KeyCode(KEYBOARD, 'Tab');\nexport const ENTER = new KeyCode(KEYBOARD, 'Enter');\n\nexport const ARROW_UP = new KeyCode(KEYBOARD, 'ArrowUp');\nexport const ARROW_DOWN = new KeyCode(KEYBOARD, 'ArrowDown');\nexport const ARROW_LEFT = new KeyCode(KEYBOARD, 'ArrowLeft');\nexport const ARROW_RIGHT = new KeyCode(KEYBOARD, 'ArrowRight');\n\nexport const MOUSE_BUTTON_0 = new KeyCode(MOUSE, 'Button0');\nexport const MOUSE_BUTTON_1 = new KeyCode(MOUSE, 'Button1');\nexport const MOUSE_BUTTON_2 = new KeyCode(MOUSE, 'Button2');\nexport const MOUSE_BUTTON_3 = new KeyCode(MOUSE, 'Button3');\nexport const MOUSE_BUTTON_4 = new KeyCode(MOUSE, 'Button4');\n\nexport const MOUSE_POS_X = new KeyCode(MOUSE, 'PosX');\nexport const MOUSE_POS_Y = new KeyCode(MOUSE, 'PosY');\n\nexport const MOUSE_WHEEL_X = new KeyCode(MOUSE, 'WheelX');\nexport const MOUSE_WHEEL_Y = new KeyCode(MOUSE, 'WheelY');\nexport const MOUSE_WHEEL_Z = new KeyCode(MOUSE, 'WheelZ');\n","export class InputBinding {\n  /** @returns {boolean} */\n  get polling() {\n    if (!this.ref) {\n      return false;\n    }\n    return this.ref.polling;\n  }\n\n  /** @returns {number} */\n  get value() {\n    if (!this.ref || this.disabled) {\n      return 0;\n    }\n    return this.ref.value;\n  }\n\n  /**\n   * @param {string} name\n   */\n  constructor(name) {\n    /** @protected */\n    this.name = name;\n\n    /** @protected */\n    this.ref = null;\n\n    /** @protected */\n    this.disabled = false;\n  }\n\n  /**\n   * @abstract\n   * @param {import('../InputContext.js').InputContext} inputContext\n   */\n  bindTo(inputContext) {\n    throw new Error('Unsupported operation.');\n  }\n\n  disable(force = true) {\n    this.disabled = force;\n    return this;\n  }\n\n  /**\n   * @param {number} code\n   * @returns {number}\n   */\n  getState(code) {\n    if (!this.ref || this.disabled) {\n      return 0;\n    }\n    return this.ref.getState(code);\n  }\n}\n","import { KeyCode } from './KeyCode.js';\nimport * as KeyCodes from './KeyCodes.js';\n\nexport { KeyCodes };\n\n/**\n * @param {string|Array<string>} strings\n * @returns {Array<KeyCode>}\n */\nexport function stringsToKeyCodes(strings) {\n  if (!Array.isArray(strings)) {\n    strings = [strings];\n  }\n  let result = [];\n  for (let str of strings) {\n    let keyCode;\n    try {\n      keyCode = KeyCode.parse(str);\n    } catch (e) {\n      let keyName = camelToSnakeCase(str).toUpperCase();\n      if (!(keyName in KeyCodes)) {\n        throw new Error('Invalid key code string - ' + e);\n      }\n      keyCode = KeyCodes[keyName];\n    }\n    result.push(keyCode);\n  }\n  return result;\n}\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction camelToSnakeCase(str) {\n  return str\n    .replace(/([a-z]|(?:[A-Z0-9]+))([A-Z0-9]|$)/g, function (_, a, b) {\n      return a + (b && '_' + b);\n    })\n    .toLowerCase();\n}\n","import { from } from '../keycode/KeyCodes.js';\nimport { InputBinding } from './InputBinding.js';\nimport { stringsToKeyCodes } from '../keycode/KeyCodeHelper.js';\n\n/** @typedef {import('../keycode/KeyCode.js').KeyCode} KeyCode */\n\nexport class AxisBinding extends InputBinding {\n  /**\n   * @param {string} name\n   * @param {string} device\n   * @param {string} code\n   * @param {object} [opts]\n   * @returns {AxisBinding}\n   */\n  static fromBind(name, device, code, opts = undefined) {\n    return new AxisBinding(name, from(device, code), opts);\n  }\n\n  /**\n   * @param {string} name\n   * @param {...string} strings\n   * @returns {AxisBinding}\n   */\n  static fromString(name, ...strings) {\n    let keyCodes = stringsToKeyCodes(strings);\n    return new AxisBinding(name, keyCodes);\n  }\n\n  /** @returns {number} */\n  get delta() {\n    if (!this.ref || this.disabled) {\n      return 0;\n    }\n    return this.ref.delta;\n  }\n\n  /**\n   * @param {string} name\n   * @param {KeyCode|Array<KeyCode>} keyCodes\n   * @param {object} [opts]\n   */\n  constructor(name, keyCodes, opts = undefined) {\n    super(name);\n\n    /** @protected */\n    this.keyCodes = Array.isArray(keyCodes) ? keyCodes : [keyCodes];\n    /** @protected */\n    this.opts = opts;\n  }\n\n  /**\n   * @override\n   * @param {import('../InputContext.js').InputContext} inputContext\n   */\n  bindTo(inputContext) {\n    let name = this.name;\n    let opts = this.opts;\n    for (let keyCode of this.keyCodes) {\n      inputContext.bindAxis(name, keyCode.device, keyCode.code, opts);\n    }\n    this.ref = inputContext.getAxis(name);\n    return this;\n  }\n}\n","import { from } from '../keycode/KeyCodes.js';\nimport { InputBinding } from './InputBinding.js';\nimport { stringsToKeyCodes } from '../keycode/KeyCodeHelper.js';\n\n/**\n * @typedef {import('../keycode/KeyCode.js').KeyCode} KeyCode\n * @typedef {import('../InputContext.js').InputContext} InputContext\n */\n\nexport class ButtonBinding extends InputBinding {\n  /**\n   * @param {string} name\n   * @param {string} device\n   * @param {string} code\n   * @param {object} [opts]\n   * @returns {ButtonBinding}\n   */\n  static fromBind(name, device, code, opts = undefined) {\n    return new ButtonBinding(name, from(device, code), opts);\n  }\n\n  /**\n   * @param {string} name\n   * @param {...string} strings\n   * @returns {ButtonBinding}\n   */\n  static fromString(name, ...strings) {\n    let keyCodes = stringsToKeyCodes(strings);\n    return new ButtonBinding(name, keyCodes);\n  }\n\n  /** @returns {boolean} */\n  get pressed() {\n    if (!this.ref || this.disabled) {\n      return false;\n    }\n    return this.ref.pressed;\n  }\n\n  /** @returns {boolean} */\n  get repeated() {\n    if (!this.ref || this.disabled) {\n      return false;\n    }\n    return this.ref.repeated;\n  }\n\n  /** @returns {boolean} */\n  get released() {\n    if (!this.ref || this.disabled) {\n      return false;\n    }\n    return this.ref.released;\n  }\n\n  /** @returns {boolean} */\n  get down() {\n    if (!this.ref || this.disabled) {\n      return false;\n    }\n    return this.ref.down;\n  }\n\n  /**\n   * @param {string} name\n   * @param {KeyCode|Array<KeyCode>} keyCodes\n   * @param {object} [opts]\n   */\n  constructor(name, keyCodes, opts = undefined) {\n    super(name);\n\n    /** @protected */\n    this.keyCodes = Array.isArray(keyCodes) ? keyCodes : [keyCodes];\n    /** @protected */\n    this.opts = opts;\n  }\n\n  /**\n   * @override\n   * @param {InputContext} inputContext\n   */\n  bindTo(inputContext) {\n    let name = this.name;\n    let opts = this.opts;\n    for (let keyCode of this.keyCodes) {\n      inputContext.bindButton(name, keyCode.device, keyCode.code, opts);\n    }\n    this.ref = inputContext.getButton(name);\n    return this;\n  }\n}\n","import { from } from '../keycode/KeyCodes.js';\nimport { AxisBinding } from './AxisBinding.js';\n\n/** @typedef {import('../keycode/KeyCode.js').KeyCode} KeyCode */\n\nexport class AxisButtonBinding extends AxisBinding {\n  /**\n   * @param {string} name\n   * @param {string} device\n   * @param {string} negativeCode\n   * @param {string} positiveCode\n   * @returns {AxisButtonBinding}\n   */\n  static fromBind(name, device, negativeCode, positiveCode) {\n    return new AxisButtonBinding(\n      name,\n      from(device, negativeCode),\n      from(device, positiveCode)\n    );\n  }\n\n  /**\n   * @param {string} name\n   * @param {KeyCode} negativeKeyCode\n   * @param {KeyCode} positiveKeyCode\n   */\n  constructor(name, negativeKeyCode, positiveKeyCode) {\n    super(name, []);\n\n    if (negativeKeyCode.device !== positiveKeyCode.device) {\n      throw new Error('Cannot create axis-button codes for different devices.');\n    }\n\n    /** @protected */\n    this.negativeKeyCode = negativeKeyCode;\n    /** @protected */\n    this.positiveKeyCode = positiveKeyCode;\n  }\n\n  /**\n   * @param {import('../InputContext.js').InputContext} inputContext\n   */\n  bindTo(inputContext) {\n    let name = this.name;\n    let negativeKeyCode = this.negativeKeyCode;\n    let positiveKeyCode = this.positiveKeyCode;\n    inputContext.bindAxisButtons(\n      name,\n      negativeKeyCode.device,\n      negativeKeyCode.code,\n      positiveKeyCode.code\n    );\n    this.ref = inputContext.getAxis(name);\n    return this;\n  }\n}\n","/**\n * @typedef InputDeviceEvent\n * @property {EventTarget} target\n * @property {string} device\n * @property {string} code\n * @property {string} event\n * @property {number} [value] The input value of the triggered event (usually this is 1).\n * @property {number} [movement] The change in value for the triggered event.\n * @property {boolean} [control] Whether any control keys are down (false if up).\n * @property {boolean} [shift] Whether any shift keys are down (false if up).\n * @property {boolean} [alt] Whether any alt keys are down (false if up).\n *\n * @callback InputDeviceEventListener\n * @param {InputDeviceEvent} e\n */\n\n/**\n * A class that represents a raw system device that\n * emits input events.\n */\nexport class InputDevice {\n  /** @abstract */\n  // eslint-disable-next-line no-unused-vars\n  static isAxis(keyCode) {\n    return false;\n  }\n\n  /** @abstract */\n  // eslint-disable-next-line no-unused-vars\n  static isButton(keyCode) {\n    return false;\n  }\n\n  /**\n   * @param {string} deviceName\n   * @param {EventTarget} eventTarget\n   */\n  constructor(deviceName, eventTarget) {\n    if (!eventTarget) {\n      throw new Error(`Missing event target for device ${deviceName}.`);\n    }\n\n    this.name = deviceName;\n    this.eventTarget = eventTarget;\n\n    /**\n     * @private\n     * @type {Record<string, Array<InputDeviceEventListener>>}\n     */\n    this.listeners = {\n      input: [],\n    };\n  }\n\n  /**\n   * @param {EventTarget} eventTarget\n   */\n  setEventTarget(eventTarget) {\n    if (!eventTarget) {\n      throw new Error(`Missing event target for device ${this.name}.`);\n    }\n    this.eventTarget = eventTarget;\n  }\n\n  destroy() {\n    let listeners = this.listeners;\n    for (let event in listeners) {\n      listeners[event].length = 0;\n    }\n  }\n\n  /**\n   * @param {string} event\n   * @param {InputDeviceEventListener} listener\n   */\n  addEventListener(event, listener) {\n    let listeners = this.listeners;\n    if (event in listeners) {\n      listeners[event].push(listener);\n    } else {\n      listeners[event] = [listener];\n    }\n  }\n\n  /**\n   * @param {string} event\n   * @param {InputDeviceEventListener} listener\n   */\n  removeEventListener(event, listener) {\n    let listeners = this.listeners;\n    if (event in listeners) {\n      let list = listeners[event];\n      let i = list.indexOf(listener);\n      if (i >= 0) {\n        list.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * @param {InputDeviceEvent} e\n   * @returns {boolean} Whether the input event should be consumed.\n   */\n  dispatchInputEvent(e) {\n    let flag = 0;\n    for (let listener of this.listeners.input) {\n      flag |= listener(e);\n    }\n    return Boolean(flag);\n  }\n}\n","import { InputDevice } from './InputDevice.js';\n\n/** @typedef {import('./InputDevice.js').InputDeviceEvent} InputDeviceEvent */\n\n/**\n * A class that listens to the keyboard events from the event target and\n * transforms the events into a valid {@link InputEvent} for the added\n * listeners.\n *\n * - This device uses the `event.code` standard to reference each key.\n * - Use this to help you determine the key code: https://keycode.info/\n */\nexport class KeyboardDevice extends InputDevice {\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  static isAxis(keyCode) {\n    return false;\n  }\n\n  /** @override */\n  // eslint-disable-next-line no-unused-vars\n  static isButton(keyCode) {\n    return true;\n  }\n\n  /**\n   * Constructs a listening keyboard with no listeners (yet).\n   *\n   * @param {string} deviceName\n   * @param {EventTarget} eventTarget\n   * @param {object} [opts] Any additional options.\n   * @param {boolean} [opts.ignoreRepeat] Whether to\n   * accept repeated key events.\n   */\n  constructor(deviceName, eventTarget, opts = {}) {\n    super(deviceName, eventTarget);\n\n    const { ignoreRepeat = true } = opts;\n    this.ignoreRepeat = ignoreRepeat;\n\n    /**\n     * @private\n     * @type {InputDeviceEvent}\n     */\n    this._eventObject = {\n      target: eventTarget,\n      device: deviceName,\n      code: '',\n      event: '',\n      // Key values\n      value: 0,\n      control: false,\n      shift: false,\n      alt: false,\n    };\n\n    /** @private */\n    this.onKeyDown = this.onKeyDown.bind(this);\n    /** @private */\n    this.onKeyUp = this.onKeyUp.bind(this);\n\n    eventTarget.addEventListener('keydown', this.onKeyDown);\n    eventTarget.addEventListener('keyup', this.onKeyUp);\n  }\n\n  /** @override */\n  setEventTarget(eventTarget) {\n    if (this.eventTarget) this.destroy();\n    super.setEventTarget(eventTarget);\n    eventTarget.addEventListener('keydown', this.onKeyDown);\n    eventTarget.addEventListener('keyup', this.onKeyUp);\n  }\n\n  /** @override */\n  destroy() {\n    let eventTarget = this.eventTarget;\n    eventTarget.removeEventListener('keydown', this.onKeyDown);\n    eventTarget.removeEventListener('keyup', this.onKeyUp);\n    super.destroy();\n  }\n\n  /**\n   * @private\n   * @param {KeyboardEvent} e\n   */\n  onKeyDown(e) {\n    if (e.repeat && this.ignoreRepeat) {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n\n    let event = this._eventObject;\n    // We care more about location (code) than print char (key).\n    event.code = e.code;\n    event.event = 'pressed';\n    event.value = 1;\n    event.control = e.ctrlKey;\n    event.shift = e.shiftKey;\n    event.alt = e.altKey;\n\n    let result = this.dispatchInputEvent(event);\n    if (result) {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {KeyboardEvent} e\n   */\n  onKeyUp(e) {\n    /** @type {InputDeviceEvent} */\n    let event = this._eventObject;\n    // We care more about location (code) than print char (key).\n    event.code = e.code;\n    event.event = 'released';\n    event.value = 1;\n    event.control = e.ctrlKey;\n    event.shift = e.shiftKey;\n    event.alt = e.altKey;\n\n    let result = this.dispatchInputEvent(event);\n    if (result) {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n  }\n}\n","import { InputDevice } from './InputDevice.js';\n\n/**\n * @typedef {import('./InputDevice.js').InputDeviceEvent} InputDeviceEvent\n */\n\nconst DEFAULT_LINE_PIXELS = 10;\nconst DEFAULT_PAGE_PIXELS = 100;\n\n/**\n * A class that listens to the mouse events from the event target and\n * transforms the events into a valid {@link InputDeviceEvent} for its\n * listeners.\n *\n * - PosX\n * - PosY\n * - WheelX\n * - WheelY\n * - WheelZ\n * - Button0 (left button)\n * - Button1 (middle button)\n * - Button2 (right button)\n * - Button3 (next button)\n * - Button4 (back button)\n */\nexport class MouseDevice extends InputDevice {\n  /** @override */\n  static isAxis(keyCode) {\n    return (\n      keyCode === 'PosX' ||\n      keyCode === 'PosY' ||\n      keyCode === 'WheelX' ||\n      keyCode === 'WheelY' ||\n      keyCode === 'WheelZ'\n    );\n  }\n\n  /** @override */\n  static isButton(keyCode) {\n    return !this.isAxis(keyCode);\n  }\n\n  /**\n   * Constructs a listening mouse with no listeners (yet).\n   *\n   * @param {string} deviceName\n   * @param {EventTarget} eventTarget\n   * @param {Object} [opts] Any additional options.\n   * @param {Boolean} [opts.eventsOnFocus=true] Whether to capture events only when it has focus.\n   */\n  constructor(deviceName, eventTarget, opts = {}) {\n    super(deviceName, eventTarget);\n\n    const { eventsOnFocus = true } = opts;\n    this.eventsOnFocus = eventsOnFocus;\n    this.canvasTarget = this.getCanvasFromEventTarget(eventTarget);\n\n    /** @private */\n    this._downHasFocus = false;\n\n    /**\n     * @private\n     * @type {InputDeviceEvent}\n     */\n    this._eventObject = {\n      target: eventTarget,\n      device: deviceName,\n      code: '',\n      event: '',\n      // Button values\n      value: 0,\n      control: false,\n      shift: false,\n      alt: false,\n    };\n    /**\n     * @private\n     * @type {InputDeviceEvent}\n     */\n    this._positionObject = {\n      target: eventTarget,\n      device: deviceName,\n      code: '',\n      event: 'move',\n      // Pos values\n      value: 0,\n      movement: 0,\n    };\n    /**\n     * @private\n     * @type {InputDeviceEvent}\n     */\n    this._wheelObject = {\n      target: eventTarget,\n      device: deviceName,\n      code: '',\n      event: 'wheel',\n      // Wheel values\n      movement: 0,\n    };\n\n    /** @private */\n    this.onMouseDown = this.onMouseDown.bind(this);\n    /** @private */\n    this.onMouseUp = this.onMouseUp.bind(this);\n    /** @private */\n    this.onMouseMove = this.onMouseMove.bind(this);\n    /** @private */\n    this.onContextMenu = this.onContextMenu.bind(this);\n    /** @private */\n    this.onWheel = this.onWheel.bind(this);\n\n    eventTarget.addEventListener('mousedown', this.onMouseDown);\n    eventTarget.addEventListener('contextmenu', this.onContextMenu);\n    eventTarget.addEventListener('wheel', this.onWheel);\n    document.addEventListener('mousemove', this.onMouseMove);\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  /** @override */\n  setEventTarget(eventTarget) {\n    if (this.eventTarget) this.destroy();\n    super.setEventTarget(eventTarget);\n    this.canvasTarget = this.getCanvasFromEventTarget(eventTarget);\n    eventTarget.addEventListener('mousedown', this.onMouseDown);\n    eventTarget.addEventListener('contextmenu', this.onContextMenu);\n    eventTarget.addEventListener('wheel', this.onWheel);\n    document.addEventListener('mousemove', this.onMouseMove);\n    document.addEventListener('mouseup', this.onMouseUp);\n  }\n\n  /** @override */\n  destroy() {\n    let eventTarget = this.eventTarget;\n    eventTarget.removeEventListener('mousedown', this.onMouseDown);\n    eventTarget.removeEventListener('contextmenu', this.onContextMenu);\n    eventTarget.removeEventListener('wheel', this.onWheel);\n    document.removeEventListener('mousemove', this.onMouseMove);\n    document.removeEventListener('mouseup', this.onMouseUp);\n    super.destroy();\n  }\n\n  setPointerLock(force = true) {\n    if (force) {\n      this.eventTarget.requestPointerLock();\n    } else {\n      this.eventTarget.exitPointerLock();\n    }\n  }\n\n  hasPointerLock() {\n    return document.pointerLockElement === this.eventTarget;\n  }\n\n  /**\n   * @private\n   * @param {MouseEvent} e\n   */\n  onMouseDown(e) {\n    this._downHasFocus = true;\n\n    let event = this._eventObject;\n    // We care more about location (code) than print char (key).\n    event.code = 'Button' + e.button;\n    event.event = 'pressed';\n    event.value = 1;\n    event.control = e.ctrlKey;\n    event.shift = e.shiftKey;\n    event.alt = e.altKey;\n\n    let result = this.dispatchInputEvent(event);\n    if (result) {\n      // Make sure it has focus first.\n      if (document.activeElement === this.eventTarget) {\n        e.preventDefault();\n        e.stopPropagation();\n        return false;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {MouseEvent} e\n   */\n  onContextMenu(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {WheelEvent} e\n   */\n  onWheel(e) {\n    let dx, dy, dz;\n    switch (e.deltaMode) {\n      case WheelEvent.DOM_DELTA_LINE:\n        dx = e.deltaX * DEFAULT_LINE_PIXELS;\n        dy = e.deltaY * DEFAULT_LINE_PIXELS;\n        dz = e.deltaZ * DEFAULT_LINE_PIXELS;\n        break;\n      case WheelEvent.DOM_DELTA_PAGE:\n        dx = e.deltaX * DEFAULT_PAGE_PIXELS;\n        dy = e.deltaY * DEFAULT_PAGE_PIXELS;\n        dz = e.deltaZ * DEFAULT_PAGE_PIXELS;\n        break;\n      case WheelEvent.DOM_DELTA_PIXEL:\n      default:\n        dx = e.deltaX;\n        dy = e.deltaY;\n        dz = e.deltaZ;\n        break;\n    }\n\n    let result = 0;\n    let event = this._wheelObject;\n    event.code = 'WheelX';\n    event.movement = dx;\n    result |= this.dispatchInputEvent(event);\n    event.code = 'WheelY';\n    event.movement = dy;\n    result |= this.dispatchInputEvent(event);\n    event.code = 'WheelZ';\n    event.movement = dz;\n    result |= this.dispatchInputEvent(event);\n    if (result) {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {MouseEvent} e\n   */\n  onMouseUp(e) {\n    // Make sure mouse down was pressed before this (with focus).\n    if (!this._downHasFocus) return;\n    this._downHasFocus = false;\n\n    let event = this._eventObject;\n    // We care more about location (code) than print char (key).\n    event.code = 'Button' + e.button;\n    event.event = 'released';\n    event.value = 1;\n    event.control = e.ctrlKey;\n    event.shift = e.shiftKey;\n    event.alt = e.altKey;\n\n    let result = this.dispatchInputEvent(event);\n    if (result) {\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n  }\n\n  /**\n   * @private\n   * @param {MouseEvent} e\n   */\n  onMouseMove(e) {\n    if (this.eventsOnFocus && document.activeElement !== this.eventTarget)\n      return;\n\n    const element = this.canvasTarget;\n    const { clientWidth, clientHeight } = element;\n    const rect = element.getBoundingClientRect();\n\n    let dx = e.movementX / clientWidth;\n    let dy = e.movementY / clientHeight;\n    let x = (e.clientX - rect.left) / clientWidth;\n    let y = (e.clientY - rect.top) / clientHeight;\n\n    let event = this._positionObject;\n    event.code = 'PosX';\n    event.value = x;\n    event.movement = dx;\n    this.dispatchInputEvent(event);\n    event.code = 'PosY';\n    event.value = y;\n    event.movement = dy;\n    this.dispatchInputEvent(event);\n  }\n\n  /** @private */\n  getCanvasFromEventTarget(eventTarget) {\n    if (eventTarget instanceof HTMLCanvasElement) {\n      return eventTarget;\n    } else {\n      return (\n        eventTarget.canvas ||\n        eventTarget.querySelector('canvas') ||\n        (eventTarget.shadowRoot &&\n          eventTarget.shadowRoot.querySelector('canvas')) ||\n        eventTarget\n      );\n    }\n  }\n}\n","import INNER_HTML from './InputCode.template.html';\nimport INNER_STYLE from './InputCode.module.css';\n\nexport class InputCode extends HTMLElement {\n  /** @protected */\n  static get [Symbol.for('templateNode')]() {\n    let t = document.createElement('template');\n    t.innerHTML = INNER_HTML;\n    Object.defineProperty(this, Symbol.for('templateNode'), { value: t });\n    return t;\n  }\n\n  /** @protected */\n  static get [Symbol.for('styleNode')]() {\n    let t = document.createElement('style');\n    t.innerHTML = INNER_STYLE;\n    Object.defineProperty(this, Symbol.for('styleNode'), { value: t });\n    return t;\n  }\n\n  static define(customElements = window.customElements) {\n    customElements.define('input-code', this);\n  }\n\n  static get observedAttributes() {\n    return ['name', 'value', 'disabled'];\n  }\n\n  /** @returns {boolean} */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this.toggleAttribute('disabled', value);\n  }\n\n  /** @returns {string} */\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this.setAttribute('value', value);\n  }\n\n  /** @returns {string} */\n  get name() {\n    return this._name;\n  }\n\n  set name(value) {\n    this.setAttribute('name', value);\n  }\n\n  constructor() {\n    super();\n    const c = this.constructor;\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(c[Symbol.for('templateNode')].content.cloneNode(true));\n    shadowRoot.appendChild(c[Symbol.for('styleNode')].cloneNode(true));\n\n    /** @private */\n    this._name = '';\n    /** @private */\n    this._value = '';\n    /** @private */\n    this._disabled = false;\n\n    /** @private */\n    this._kbdElement = shadowRoot.querySelector('kbd');\n    /** @private */\n    this._nameElement = shadowRoot.querySelector('#name');\n    /** @private */\n    this._valueElement = shadowRoot.querySelector('#value');\n  }\n\n  attributeChangedCallback(attribute, prev, value) {\n    switch (attribute) {\n      case 'name':\n        this._name = value;\n        this._nameElement.textContent = value;\n        break;\n      case 'value':\n        this._value = value;\n        if (value !== null) {\n          this._valueElement.classList.toggle('hidden', false);\n          this._valueElement.textContent = value;\n          this._kbdElement.style.paddingRight = `${this._valueElement.clientWidth + 4\n            }px`;\n        } else {\n          this._valueElement.classList.toggle('hidden', true);\n        }\n        break;\n      case 'disabled':\n        this._disabled = value !== null;\n        this._kbdElement.classList.toggle('disabled', value !== null);\n        break;\n    }\n  }\n\n  connectedCallback() {\n    if (Object.prototype.hasOwnProperty.call(this, 'name')) {\n      let value = this.name;\n      delete this.name;\n      this.name = value;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(this, 'value')) {\n      let value = this.value;\n      delete this.value;\n      this.value = value;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(this, 'disabled')) {\n      let value = this.disabled;\n      delete this.disabled;\n      this.disabled = value;\n    }\n  }\n}\nInputCode.define();\n","/**\n * @callback OnPollCallback\n * @param {number} now\n *\n * @typedef Pollable\n * @property {OnPollCallback} onPoll\n */\n\n/**\n * A class to automatically call onPoll() on animation frame.\n */\nexport class AutoPoller {\n  /**\n   * @param {Pollable} pollable\n   */\n  constructor(pollable) {\n    /** @private */\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\n    /** @private */\n    this.animationFrameHandle = null;\n    /** @private */\n    this.pollable = pollable;\n  }\n\n  get running() {\n    return this.animationFrameHandle !== null;\n  }\n\n  start() {\n    let handle = this.animationFrameHandle;\n    if (handle) cancelAnimationFrame(handle);\n    this.animationFrameHandle = requestAnimationFrame(this.onAnimationFrame);\n  }\n\n  stop() {\n    let handle = this.animationFrameHandle;\n    if (handle) cancelAnimationFrame(handle);\n    this.animationFrameHandle = null;\n  }\n\n  /** @private */\n  onAnimationFrame(now) {\n    this.animationFrameHandle = requestAnimationFrame(this.onAnimationFrame);\n    this.pollable.onPoll(now);\n  }\n}\n","/** @typedef {import('./InputBindings.js').InputBindings} InputBindings */\n\n/**\n * A class to listen and transform device events through\n * each mapped bindings into an input state.\n *\n * It requires onPoll() to be called to keep the input\n * state up to date. This is usually called from\n * requestAnimationFrame() or using the AutoPoller.\n */\nexport class DeviceInputAdapter {\n  /**\n   * @param {InputBindings} bindings\n   */\n  constructor(bindings) {\n    /** @private */\n    this.onInput = this.onInput.bind(this);\n    /** @private */\n    this.onPoll = this.onPoll.bind(this);\n\n    this.bindings = bindings;\n  }\n\n  /**\n   * @param {number} now \n   */\n  onPoll(now) {\n    for (let input of this.bindings.getInputs()) {\n      input.onPoll(now);\n    }\n  }\n  \n  onInput(e) {\n    const {\n      device,\n      code,\n      event,\n      value,\n      movement,\n      // eslint-disable-next-line no-unused-vars\n      control,\n      shift,\n      alt,\n    } = e;\n    let bindings = this.bindings.getBindings(device, code);\n    switch (event) {\n      case 'pressed':\n        for (let { input, index } of bindings) {\n          input.onUpdate(index, 1, 1);\n        }\n        break;\n      case 'released':\n        for (let { input, index } of bindings) {\n          input.onUpdate(index, 0, -1);\n        }\n        break;\n      case 'move':\n        for (let { input, index } of bindings) {\n          input.onUpdate(index, value, movement);\n        }\n        break;\n      case 'wheel':\n        for (let { input, index } of bindings) {\n          input.onUpdate(index, undefined, movement);\n        }\n        break;\n    }\n    return bindings.length > 0;\n  }\n}\n","/**\n * @typedef {import('./state/InputState.js').InputState} InputState\n * @typedef {import('./state/InputState.js').BindingOptions} BindingOptions\n *\n * @typedef {string} DeviceName\n * @typedef {string} KeyCode\n */\n\nclass Binding {\n  /**\n   * @param {DeviceName} device The name of the device\n   * @param {KeyCode} code The key code for the device\n   * @param {InputState} input The parent input\n   * @param {number} index The binding index for the input\n   */\n  constructor(device, code, input, index) {\n    /** Name of the device */\n    this.device = device;\n    /** The key code for the device */\n    this.code = code;\n    /** The parent input */\n    this.input = input;\n    /** The binding index for the input */\n    this.index = index;\n  }\n}\n\n/**\n * A class that maps inputs to their respective key bindings.\n *\n * This does not handle input state (refer to InputState.js) nor\n * input events (refer to InputDevice.js). It is only responsible\n * for the redirection of key codes to their bound input. Usually\n * this is used together with the interfaces referenced above.\n */\nexport class InputBindings {\n  constructor() {\n    /**\n     * @private\n     * @type {Record<DeviceName, Record<KeyCode, Array<Binding>>>}\n     */\n    this.bindingMap = {};\n    /**\n     * @private\n     * @type {Map<InputState, Array<Binding>>}\n     */\n    this.inputMap = new Map();\n  }\n\n  clear() {\n    for (let input of this.inputMap.keys()) {\n      input.onUnbind();\n    }\n    this.inputMap.clear();\n    this.bindingMap = {};\n  }\n\n  /**\n   * @param {InputState} input\n   * @param {DeviceName} device\n   * @param {KeyCode} code\n   * @param {BindingOptions} [opts]\n   */\n  bind(input, device, code, opts = { inverted: false }) {\n    let binding;\n\n    let inputMap = this.inputMap;\n    if (inputMap.has(input)) {\n      let bindings = inputMap.get(input);\n      let index = input.size;\n      input.onBind(index, opts);\n      binding = new Binding(device, code, input, index);\n      bindings.push(binding);\n    } else {\n      let bindings = [];\n      inputMap.set(input, bindings);\n      let index = 0;\n      input.onBind(index, opts);\n      binding = new Binding(device, code, input, index);\n      bindings.push(binding);\n    }\n\n    let bindingMap = this.bindingMap;\n    if (device in bindingMap) {\n      if (code in bindingMap[device]) {\n        bindingMap[device][code].push(binding);\n      } else {\n        bindingMap[device][code] = [binding];\n      }\n    } else {\n      bindingMap[device] = { [code]: [binding] };\n    }\n  }\n\n  /**\n   * @param {InputState} input\n   */\n  unbind(input) {\n    let inputMap = this.inputMap;\n    if (inputMap.has(input)) {\n      let bindingMap = this.bindingMap;\n      let bindings = inputMap.get(input);\n      for (let binding of bindings) {\n        let { device, code } = binding;\n        let boundList = bindingMap[device][code];\n        let i = boundList.indexOf(binding);\n        boundList.splice(i, 1);\n      }\n      bindings.length = 0;\n      input.onUnbind();\n      inputMap.delete(input);\n    }\n  }\n\n  /**\n   * @param {InputState} input\n   * @returns {boolean}\n   */\n  isBound(input) {\n    return this.inputMap.has(input);\n  }\n\n  /** @returns {Iterable<InputState>} */\n  getInputs() {\n    return this.inputMap.keys();\n  }\n\n  /** @returns {Iterable<Binding>} */\n  getBindingsByInput(input) {\n    return this.inputMap.get(input);\n  }\n\n  /**\n   * @param {DeviceName} device\n   * @param {KeyCode} code\n   * @returns {Array<Binding>}\n   */\n  getBindings(device, code) {\n    let deviceCodeBindings = this.bindingMap;\n    if (device in deviceCodeBindings) {\n      let codeBindings = deviceCodeBindings[device];\n      if (code in codeBindings) {\n        return codeBindings[code];\n      }\n    }\n    return [];\n  }\n}\n","import { AutoPoller } from './AutoPoller.js';\nimport { AxisState } from './state/AxisState.js';\nimport { ButtonState } from './state/ButtonState.js';\nimport { KeyboardDevice } from './device/KeyboardDevice.js';\nimport { MouseDevice } from './device/MouseDevice.js';\nimport { DeviceInputAdapter } from './DeviceInputAdapter.js';\nimport { InputBindings } from './InputBindings.js';\n\n/**\n * @typedef {import('./device/InputDevice.js').InputDevice} InputDevice\n * @typedef {import('./device/InputDevice.js').InputDeviceEvent} InputDeviceEvent\n * @typedef {import('./state/InputState.js').InputState} InputState\n * @typedef {import('./InputBindings.js').DeviceName} DeviceName\n * @typedef {import('./InputBindings.js').KeyCode} KeyCode\n * @typedef {import('./InputBindings.js').BindingOptions} BindingOptions\n *\n * @typedef {import('./binding/InputBinding.js').InputBinding} InputBinding\n */\n\n/**\n * @typedef {string} InputName\n * \n * @typedef {'bind'|'unbind'|'focus'|'blur'} InputContextEventType\n * @typedef {(e: InputContextEvent) => boolean} InputContextEventListener\n * \n * @typedef InputContextEvent\n * @property {InputContextEventType} type\n */\n\nexport class InputContext {\n  /**\n   * @param {EventTarget} eventTarget\n   * @param {object} [opts]\n   */\n  constructor(eventTarget, opts = undefined) {\n    /**\n     * @type {Record<string, AxisState|ButtonState>}\n     */\n    this.inputs = {};\n    /**\n     * @type {Array<InputDevice>}\n     */\n    this.devices = [\n      new MouseDevice('Mouse', eventTarget),\n      new KeyboardDevice('Keyboard', eventTarget),\n    ];\n    this.bindings = new InputBindings();\n    this.adapter = new DeviceInputAdapter(this.bindings);\n    this.autopoller = new AutoPoller(this.adapter);\n\n    /** @protected */\n    this.eventTarget = eventTarget;\n    /** @protected */\n    this.anyButton = new ButtonState(1);\n    /** @protected */\n    this.anyButtonDevice = '';\n    /** @protected */\n    this.anyButtonCode = '';\n    /** @protected */\n    this.anyAxis = new AxisState(1);\n    /** @protected */\n    this.anyAxisDevice = '';\n    /** @protected */\n    this.anyAxisCode = '';\n\n    /**\n     * @private\n     * @type {Record<InputContextEventType, Array<InputContextEventListener>>}\n     */\n    this.listeners = {\n      bind: [],\n      unbind: [],\n      focus: [],\n      blur: [],\n    };\n\n    // Prepare listeners\n    /** @private */\n    this.onInput = this.onInput.bind(this);\n    /** @private */\n    this.onEventTargetBlur = this.onEventTargetBlur.bind(this);\n    /** @private */\n    this.onEventTargetFocus = this.onEventTargetFocus.bind(this);\n\n    // Attach listeners\n    eventTarget.addEventListener('focus', this.onEventTargetFocus);\n    eventTarget.addEventListener('blur', this.onEventTargetBlur);\n    for (let device of this.devices) {\n      device.addEventListener('input', this.onInput);\n    }\n  }\n\n  get autopoll() {\n    return this.autopoller.running;\n  }\n\n  set autopoll(value) {\n    this.toggleAutoPoll(value);\n  }\n\n  destroy() {\n    let listeners = this.listeners;\n    for (let event in listeners) {\n      listeners[event].length = 0;\n    }\n    if (this.autopoller.running) {\n      this.autopoller.stop();\n    }\n    for (let device of this.devices) {\n      device.removeEventListener('input', this.onInput);\n      device.destroy();\n    }\n    let eventTarget = this.eventTarget;\n    eventTarget.removeEventListener('focus', this.onEventTargetFocus);\n    eventTarget.removeEventListener('blur', this.onEventTargetBlur);\n  }\n\n  setEventTarget(eventTarget) {\n    let oldEventTarget = this.eventTarget;\n    oldEventTarget.removeEventListener('focus', this.onEventTargetFocus);\n    oldEventTarget.removeEventListener('blur', this.onEventTargetBlur);\n\n    this.eventTarget = eventTarget;\n    for (let device of this.devices) {\n      device.setEventTarget(eventTarget);\n    }\n    eventTarget.addEventListener('focus', this.onEventTargetFocus);\n    eventTarget.addEventListener('blur', this.onEventTargetBlur);\n  }\n\n  toggleAutoPoll(force = undefined) {\n    let current = this.autopoller.running;\n    let next = typeof force === 'undefined' ? !current : Boolean(force);\n    if (next === current) return;\n    if (next) {\n      this.autopoller.start();\n    } else {\n      this.autopoller.stop();\n    }\n  }\n\n  /**\n   * @param {InputContextEventType} event\n   * @param {InputContextEventListener} listener\n   */\n  addEventListener(event, listener) {\n    let listeners = this.listeners;\n    if (event in listeners) {\n      listeners[event].push(listener);\n    } else {\n      listeners[event] = [listener];\n    }\n  }\n\n  /**\n   * @param {InputContextEventType} event\n   * @param {InputContextEventListener} listener\n   */\n  removeEventListener(event, listener) {\n    let listeners = this.listeners;\n    if (event in listeners) {\n      let list = listeners[event];\n      let i = list.indexOf(listener);\n      if (i >= 0) {\n        list.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * @param {InputContextEvent} e\n   * @returns {boolean} Whether the event should be consumed.\n   */\n  dispatchEvent(e) {\n    const { type } = e;\n    let flag = 0;\n    for (let listener of this.listeners[type]) {\n      flag |= listener(e) ? 1 : 0;\n    }\n    return Boolean(flag);\n  }\n\n  /**\n   * @param {number} now\n   */\n  poll(now = performance.now()) {\n    if (this.autopoller.running) {\n      throw new Error('Should not manually poll() while autopolling.');\n    }\n    this.onPoll(now);\n  }\n\n  /**\n   * @private\n   * @param {InputDeviceEvent} e\n   */\n  onInput(e) {\n    let result = this.adapter.onInput(e);\n    switch (e.event) {\n      case 'pressed':\n        this.anyButtonDevice = e.device;\n        this.anyButtonCode = e.code;\n        this.anyButton.onUpdate(0, 1, 1);\n        break;\n      case 'released':\n        this.anyButtonDevice = e.device;\n        this.anyButtonCode = e.code;\n        this.anyButton.onUpdate(0, 0, -1);\n        break;\n      case 'move':\n      case 'wheel':\n        this.anyAxisDevice = e.device;\n        this.anyAxisCode = e.code;\n        this.anyAxis.onUpdate(0, e.value, e.movement);\n        break;\n    }\n    return result;\n  }\n\n  /**\n   * @private\n   * @param {number} now\n   */\n  onPoll(now) {\n    this.adapter.onPoll(now);\n    this.anyButton.onPoll(now);\n    this.anyAxis.onPoll(now);\n  }\n\n  /** @private */\n  onBind() {\n    this.dispatchEvent({\n      type: 'bind',\n    });\n  }\n\n  /** @private */\n  onUnbind() {\n    this.dispatchEvent({\n      type: 'unbind',\n    });\n  }\n\n  /** @private */\n  onEventTargetFocus() {\n    this.dispatchEvent({\n      type: 'focus',\n    });\n  }\n\n  /** @private */\n  onEventTargetBlur() {\n    // Clear all input states.\n    for (let input of this.bindings.getInputs()) {\n      input.onStatus(0, 0);\n    }\n    this.anyButton.onStatus(0, 0);\n    this.anyAxis.onStatus(0, 0);\n    this.dispatchEvent({\n      type: 'blur',\n    });\n  }\n\n  /**\n   * @param {Array<InputBinding>|Record<string, InputBinding>} bindings\n   */\n  bindBindings(bindings) {\n    if (!Array.isArray(bindings)) {\n      bindings = Object.values(bindings);\n    }\n    for (let binding of bindings) {\n      binding.bindTo(this);\n    }\n  }\n\n  /**\n   * @param {InputBinding} binding\n   */\n  bindBinding(binding) {\n    binding.bindTo(this);\n  }\n\n  /**\n   * @param {InputName} name\n   * @param {DeviceName} device\n   * @param {KeyCode} code\n   * @param {BindingOptions} [opts]\n   */\n  bindButton(name, device, code, opts = undefined) {\n    let input;\n    if (this.hasButton(name)) {\n      input = this.getButton(name);\n    } else {\n      input = new ButtonState(1);\n      this.inputs[name] = input;\n    }\n    this.bindings.bind(input, device, code, opts);\n    this.onBind();\n  }\n\n  /**\n   * @param {string} name\n   * @param {DeviceName} device\n   * @param {KeyCode} code\n   * @param {BindingOptions} [opts]\n   */\n  bindAxis(name, device, code, opts = undefined) {\n    let input;\n    if (this.hasAxis(name)) {\n      input = this.getAxis(name);\n    } else {\n      input = new AxisState(1);\n      this.inputs[name] = input;\n    }\n    this.bindings.bind(input, device, code, opts);\n    this.onBind();\n  }\n\n  /**\n   * @param {string} name\n   * @param {DeviceName} device\n   * @param {KeyCode} negativeCode\n   * @param {KeyCode} positiveCode\n   */\n  bindAxisButtons(name, device, negativeCode, positiveCode) {\n    let input;\n    if (this.hasAxis(name)) {\n      input = this.getAxis(name);\n    } else {\n      input = new AxisState(2);\n      this.inputs[name] = input;\n    }\n    this.bindings.bind(input, device, positiveCode);\n    this.bindings.bind(input, device, negativeCode, { inverted: true });\n    this.onBind();\n  }\n\n  /**\n   * @param {string} name\n   */\n  unbindButton(name) {\n    if (this.hasButton(name)) {\n      let input = this.getButton(name);\n      delete this.inputs[name];\n      this.bindings.unbind(input);\n      this.onUnbind();\n    }\n  }\n\n  /**\n   * @param {string} name\n   */\n  unbindAxis(name) {\n    if (this.hasAxis(name)) {\n      let input = this.getAxis(name);\n      delete this.inputs[name];\n      this.bindings.unbind(input);\n      this.onUnbind();\n    }\n  }\n\n  /**\n   * Get the input for the given name. Assumes the input already exists for the name.\n   * @param {InputName} name\n   * @returns {InputState}\n   */\n  getInput(name) {\n    return this.inputs[name];\n  }\n\n  /**\n   * Get the button for the given name. Assumes a button already exists for the name.\n   * @param {InputName} name\n   * @returns {ButtonState}\n   */\n  getButton(name) {\n    return /** @type {ButtonState} */ (this.inputs[name]);\n  }\n\n  /**\n   * Get the axis for the given name. Assumes an axis already exists for the name.\n   * @param {InputName} name\n   * @returns {AxisState}\n   */\n  getAxis(name) {\n    return /** @type {AxisState} */ (this.inputs[name]);\n  }\n\n  /**\n   * Whether a button exists for the name and that it is of type {@link Button}.\n   * @returns {boolean}\n   */\n  hasButton(name) {\n    return name in this.inputs && this.inputs[name] instanceof ButtonState;\n  }\n\n  /**\n   * Whether an axis exists for the name and that it is of type {@link Axis}.\n   * @returns {boolean}\n   */\n  hasAxis(name) {\n    return name in this.inputs && this.inputs[name] instanceof AxisState;\n  }\n\n  /**\n   * Get whether a button for the given name is down. Assumes a button already exists for the name.\n   * @param {InputName} name\n   * @returns {boolean}\n   */\n  isButtonDown(name) {\n    return /** @type {ButtonState} */ (this.inputs[name]).down;\n  }\n\n  /**\n   * Get whether a button for the given name is pressed. Assumes a button already exists for the name.\n   * @param {InputName} name\n   * @returns {boolean}\n   */\n  isButtonPressed(name) {\n    return /** @type {ButtonState} */ (this.inputs[name]).pressed;\n  }\n\n  /**\n   * Get whether a button for the given name is released. Assumes a button already exists for the name.\n   * @param {InputName} name\n   * @returns {boolean}\n   */\n  isButtonReleased(name) {\n    return /** @type {ButtonState} */ (this.inputs[name]).released;\n  }\n\n  /**\n   * @param {InputName} name\n   * @returns {number}\n   */\n  getInputValue(name) {\n    return this.inputs[name].value;\n  }\n\n  /**\n   * @param {InputName} name\n   * @returns {number}\n   */\n  getButtonValue(name) {\n    return this.inputs[name].value;\n  }\n\n  /**\n   * @param {InputName} name\n   * @returns {number}\n   */\n  getAxisValue(name) {\n    return this.inputs[name].value;\n  }\n\n  /**\n   * @param {InputName} name\n   * @returns {number}\n   */\n  getAxisDelta(name) {\n    return /** @type {AxisState} */ (this.inputs[name]).delta;\n  }\n\n  /** @returns {boolean} */\n  isAnyButtonDown(include = undefined) {\n    if (typeof include === 'undefined') {\n      return this.anyButton.down;\n    } else {\n      let buttons = this.inputs;\n      for (let name of include) {\n        let button = /** @type {ButtonState} */ (buttons[name]);\n        if (button.down) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** @returns {boolean} */\n  isAnyButtonPressed(include = undefined) {\n    if (typeof include === 'undefined') {\n      return this.anyButton.pressed;\n    } else {\n      let buttons = this.inputs;\n      for (let name of include) {\n        let button = /** @type {ButtonState} */ (buttons[name]);\n        if (button.pressed) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** @returns {boolean} */\n  isAnyButtonReleased(include = undefined) {\n    if (typeof include === 'undefined') {\n      return this.anyButton.released;\n    } else {\n      let buttons = this.inputs;\n      for (let name of include) {\n        let button = /** @type {ButtonState} */ (buttons[name]);\n        if (button.released) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** @returns {number} */\n  getAnyAxisValue(include = undefined) {\n    if (typeof include === 'undefined') {\n      return this.anyAxis.value;\n    } else {\n      let axes = this.inputs;\n      for (let name of include) {\n        let axis = axes[name];\n        if (axis.value) {\n          return axis.value;\n        }\n      }\n    }\n    return 0;\n  }\n\n  /** @returns {number} */\n  getAnyAxisDelta(include = undefined) {\n    if (typeof include === 'undefined') {\n      return this.anyAxis.delta;\n    } else {\n      let axes = this.inputs;\n      for (let name of include) {\n        let axis = /** @type {AxisState} */ (axes[name]);\n        if (axis.delta) {\n          return axis.delta;\n        }\n      }\n    }\n    return 0;\n  }\n\n  getLastButtonDevice() {\n    return this.anyButtonDevice;\n  }\n\n  getLastButtonCode() {\n    return this.anyButtonCode;\n  }\n\n  getLastAxisDevice() {\n    return this.anyAxisDevice;\n  }\n\n  getLastAxisCode() {\n    return this.anyAxisCode;\n  }\n\n  getMouse() {\n    return /** @type {MouseDevice}*/ (this.devices[0]);\n  }\n\n  getKeyboard() {\n    return /** @type {KeyboardDevice}*/ (this.devices[1]);\n  }\n}\n","import INNER_HTML from './InputPort.template.html';\nimport INNER_STYLE from './InputPort.module.css';\n\nimport { InputCode } from '../inputcode/InputCode.js';\nimport { InputContext } from '../InputContext';\n\n/**\n * @typedef {import('../device/InputDevice.js').InputDevice} InputDevice\n * @typedef {import('../device/InputDevice.js').InputDeviceEvent} InputDeviceEvent\n * @typedef {import('../InputBindings.js').DeviceName} DeviceName\n * @typedef {import('../InputBindings.js').KeyCode} KeyCode\n * @typedef {import('../InputBindings.js').BindingOptions} BindingOptions\n * @typedef {import('../InputContext').InputName} InputName\n */\n\nexport class InputPort extends HTMLElement {\n\n  /**\n   * @param {object} [opts]\n   * @param {HTMLElement} [opts.root]\n   * @param {string} [opts.for]\n   * @param {boolean} [opts.autopoll]\n   */\n  static create(opts = {}) {\n    const {\n      root = document.body,\n      for: forId = undefined,\n      autopoll = false,\n    } = opts || {};\n    let result = new InputPort();\n    result.for = forId;\n    result.autopoll = autopoll;\n    root.appendChild(result);\n    return result;\n  }\n\n  /** @protected */\n  static get [Symbol.for('templateNode')]() {\n    let t = document.createElement('template');\n    t.innerHTML = INNER_HTML;\n    Object.defineProperty(this, Symbol.for('templateNode'), { value: t });\n    return t;\n  }\n\n  /** @protected */\n  static get [Symbol.for('styleNode')]() {\n    let t = document.createElement('style');\n    t.innerHTML = INNER_STYLE;\n    Object.defineProperty(this, Symbol.for('styleNode'), { value: t });\n    return t;\n  }\n\n  static define(customElements = window.customElements) {\n    customElements.define('input-port', this);\n  }\n\n  static get observedAttributes() {\n    return ['autopoll', 'for'];\n  }\n\n  /** @returns {boolean} */\n  get autopoll() {\n    return this._autopoll;\n  }\n\n  set autopoll(value) {\n    this.toggleAttribute('autopoll', value);\n  }\n\n  /** @returns {string} */\n  get for() {\n    return this._for;\n  }\n\n  set for(value) {\n    this.setAttribute('for', value);\n  }\n\n  constructor() {\n    super();\n    const shadowRoot = this.attachShadow({ mode: 'open' });\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('templateNode')].content.cloneNode(true)\n    );\n    shadowRoot.appendChild(\n      this.constructor[Symbol.for('styleNode')].cloneNode(true)\n    );\n\n    /** @private */\n    this._titleElement = shadowRoot.querySelector('#title');\n    /** @private */\n    this._pollElement = shadowRoot.querySelector('#poll');\n    /** @private */\n    this._focusElement = shadowRoot.querySelector('#focus');\n    /** @private */\n    this._bodyElement = shadowRoot.querySelector('tbody');\n    /** @private */\n    this._outputElements = {};\n\n    /** @private */\n    this.onAnimationFrame = this.onAnimationFrame.bind(this);\n    /** @private */\n    this.animationFrameHandle = null;\n\n    const eventTarget = this;\n    /** @private */\n    this._for = '';\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this._eventTarget = eventTarget;\n    /** @private */\n    this._autopoll = false;\n\n    /** @private */\n    this._context = null;\n\n    /** @private */\n    this.onInputContextBind = this.onInputContextBind.bind(this);\n    /** @private */\n    this.onInputContextUnbind = this.onInputContextUnbind.bind(this);\n    /** @private */\n    this.onInputContextFocus = this.onInputContextFocus.bind(this);\n    /** @private */\n    this.onInputContextBlur = this.onInputContextBlur.bind(this);\n  }\n\n  connectedCallback() {\n    if (Object.prototype.hasOwnProperty.call(this, 'for')) {\n      let value = this.for;\n      delete this.for;\n      this.for = value;\n    }\n\n    if (Object.prototype.hasOwnProperty.call(this, 'autopoll')) {\n      let value = this.autopoll;\n      delete this.autopoll;\n      this.autopoll = value;\n    }\n\n    // Make sure the table and values are up to date\n    this.updateTable();\n    this.updateTableValues();\n    this.animationFrameHandle = window.requestAnimationFrame(this.onAnimationFrame);\n  }\n\n  disconnectedCallback() {\n    let ctx = this._context;\n    if (ctx) {\n      ctx.removeEventListener('bind', this.onInputContextBind);\n      ctx.removeEventListener('unbind', this.onInputContextUnbind);\n      ctx.removeEventListener('blur', this.onInputContextBlur);\n      ctx.removeEventListener('focus', this.onInputContextFocus);\n      ctx.destroy();\n      this._context = null;\n    }\n  }\n  \n  attributeChangedCallback(attribute, prev, value) {\n    switch (attribute) {\n      case 'for': {\n        this._for = value;\n        let target;\n        let name;\n        if (value) {\n          target = document.getElementById(value);\n          name = `${target.tagName.toLowerCase()}#${value}`;\n        } else {\n          target = this;\n          name = 'input-port';\n        }\n        this._eventTarget = target;\n        if (this._context) {\n          this._context.setEventTarget(this._eventTarget);\n        }\n        // For debug info\n        this._titleElement.innerHTML = `for ${name}`;\n      }\n        break;\n      case 'autopoll':\n        this._autopoll = value !== null;\n        if (this._context) {\n          this._context.toggleAutoPoll(this._autopoll);\n        }\n        break;\n    }\n  }\n\n  /** @private */\n  onAnimationFrame() {\n    this.animationFrameHandle = window.requestAnimationFrame(this.onAnimationFrame);\n    this.updateTableValues();\n    this.updatePollStatus();\n  }\n\n  /** @private */\n  onInputContextBind() {\n    this.updateTable();\n    return true;\n  }\n\n  /** @private */\n  onInputContextUnbind() {\n    this.updateTable();\n    return true;\n  }\n\n  /** @private */\n  onInputContextFocus() {\n    this._focusElement.innerHTML = '✓';\n    return true;\n  }\n\n  /** @private */\n  onInputContextBlur() {\n    this._focusElement.innerHTML = '';\n    return true;\n  }\n\n  /**\n   * @param {'axisbutton'} [contextId]\n   * @param {object} [options]\n   * @returns {InputContext}\n   */\n  getContext(contextId = 'axisbutton', options = undefined) {\n    switch (contextId) {\n      case 'axisbutton':\n        if (!this._context) {\n          let ctx = new InputContext(this._eventTarget, options);\n          ctx.addEventListener('bind', this.onInputContextBind);\n          ctx.addEventListener('unbind', this.onInputContextUnbind);\n          ctx.addEventListener('blur', this.onInputContextBlur);\n          ctx.addEventListener('focus', this.onInputContextFocus);\n          if (this._autopoll) {\n            ctx.toggleAutoPoll(true);\n          }\n          this._context = ctx;\n        }\n        return this._context;\n      default:\n        throw new Error(`Input context id '${contextId}' is not supported.`);\n    }\n  }\n\n  /** @private */\n  updateTable() {\n    if (!this.isConnected) {\n      // Don't update the DOM if not connected to any :(\n      return;\n    } else if (!this._context) {\n      // Clear all values if no context is available\n      this._outputElements = {};\n      this._bodyElement.innerHTML = '';\n      return;\n    } else {\n      let context = this._context;\n      let inputs = context.inputs;\n      let bindings = context.bindings;\n      let primaryElements = {};\n      let entries = [];\n      for (let name of Object.keys(inputs)) {\n        let input = inputs[name];\n        let primary = true;\n        for (let binding of bindings.getBindingsByInput(input)) {\n          let element = createInputTableEntry(\n            `${input.constructor.name}.${name}`,\n            `${binding.device}.${binding.code}`,\n            0,\n            primary\n          );\n          entries.push(element);\n          if (primary) {\n            primaryElements[name] = element.querySelector('output');\n            primary = false;\n          }\n        }\n      }\n      this._outputElements = primaryElements;\n      this._bodyElement.innerHTML = '';\n      for (let entry of entries) {\n        this._bodyElement.appendChild(entry);\n      }\n    }\n  }\n\n  /** @private */\n  updateTableValues() {\n    if (!this.isConnected) {\n      // Don't update the DOM if not connected to any :(\n      return;\n    } else if (!this._context) {\n      // Clear all values if no context is available\n      for (let name of Object.keys(this._outputElements)) {\n        let element = this._outputElements[name];\n        element.innerText = '---';\n      }\n      return;\n    } else {\n      let context = this._context;\n      let inputs = context.inputs;\n      for (let name of Object.keys(this._outputElements)) {\n        let element = this._outputElements[name];\n        let value = inputs[name].value;\n        element.innerText = Number(value).toFixed(2);\n      }\n    }\n  }\n\n  /** @private */\n  updatePollStatus() {\n    if (!this.isConnected) {\n      // Don't update the DOM if not connected to any :(\n      return;\n    } else if (!this._context) {\n      // Clear all values if no context is available\n      this._pollElement.innerHTML = '-';\n      return;\n    } else {\n      let context = this._context;\n      let inputs = context.inputs;\n      for (let input of Object.values(inputs)) {\n        if (!input.polling) {\n          this._pollElement.innerHTML = '';\n          return;\n        }\n      }\n      this._pollElement.innerHTML = '✓';\n    }\n  }\n}\nInputPort.define();\n\nfunction createInputTableEntry(name, key, value, primary = true) {\n  let row = document.createElement('tr');\n  if (primary) {\n    row.classList.add('primary');\n  }\n  // Name\n  {\n    let data = document.createElement('td');\n    data.textContent = name;\n    data.classList.add('name');\n    row.appendChild(data);\n  }\n  // Value\n  {\n    let data = document.createElement('td');\n    let output = document.createElement('output');\n    if (primary) {\n      output.innerText = Number(value).toFixed(2);\n    } else {\n      output.innerText = '---';\n    }\n    output.classList.add('value');\n    data.appendChild(output);\n    row.appendChild(data);\n  }\n  // Key\n  {\n    let data = document.createElement('td');\n    data.classList.add('key');\n    let kbd = new InputCode();\n    kbd.innerText = key;\n    data.appendChild(kbd);\n    row.appendChild(data);\n  }\n  return row;\n}\n","import { ButtonState } from './state/ButtonState.js';\nimport { KeyboardDevice } from './device/KeyboardDevice.js';\nimport { InputBindings } from './InputBindings.js';\nimport { AutoPoller } from './AutoPoller.js';\nimport { DeviceInputAdapter } from './DeviceInputAdapter.js';\nimport { KEYBOARD } from './keycode/KeyCodes.js';\n\n/**\n * @typedef {import('./state/ButtonState.js').ButtonReadOnly} ButtonReadOnly\n */\n\nconst KEYBOARD_SOURCE = Symbol('keyboardSource');\nexport class Keyboard {\n  constructor(eventTarget, opts) {\n    /** @type {ButtonReadOnly} */\n    this.KeyA = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyB = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyC = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyD = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyE = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyF = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyG = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyH = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyI = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyJ = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyK = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyL = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyM = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyN = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyO = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyP = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyQ = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyR = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyS = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyT = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyU = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyV = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyW = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyX = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyY = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.KeyZ = new ButtonState();\n\n    /** @type {ButtonReadOnly} */\n    this.Digit0 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit1 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit2 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit3 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit4 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit5 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit6 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit7 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit8 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Digit9 = new ButtonState();\n\n    /** @type {ButtonReadOnly} */\n    this.Minus = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Equal = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.BracketLeft = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.BracketRight = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Semicolon = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Quote = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Backquote = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Backslash = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Comma = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Period = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Slash = new ButtonState();\n\n    /** @type {ButtonReadOnly} */\n    this.Escape = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Space = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.CapsLock = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Backspace = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Delete = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Tab = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Enter = new ButtonState();\n\n    /** @type {ButtonReadOnly} */\n    this.ArrowUp = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.ArrowDown = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.ArrowLeft = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.ArrowRight = new ButtonState();\n\n    const deviceName = KEYBOARD;\n    const device = new KeyboardDevice(deviceName, eventTarget, opts);\n    const bindings = new InputBindings();\n    for (let key in this) {\n      if (Object.prototype.hasOwnProperty.call(this, key)) {\n        let input = /** @type {ButtonState} */ (this[key]);\n        bindings.bind(input, deviceName, key);\n      }\n    }\n    const adapter = new DeviceInputAdapter(bindings);\n    // @ts-ignore\n    device.addEventListener('input', adapter.onInput);\n    // @ts-ignore\n    const autopoller = new AutoPoller(adapter);\n    autopoller.start();\n    this[KEYBOARD_SOURCE] = {\n      device,\n      bindings,\n      adapter,\n      autopoller,\n    };\n  }\n\n  destroy() {\n    const source = this[KEYBOARD_SOURCE];\n    source.autopoller.stop();\n    // @ts-ignore\n    source.device.removeEventListener('input', source.adapter.onInput);\n    source.device.destroy();\n    source.bindings.clear();\n  }\n}\n","import { AxisState } from './state/AxisState.js';\nimport { ButtonState } from './state/ButtonState.js';\nimport { MouseDevice } from './device/MouseDevice.js';\nimport { InputBindings } from './InputBindings.js';\nimport { DeviceInputAdapter } from './DeviceInputAdapter.js';\nimport { AutoPoller } from './AutoPoller.js';\nimport { MOUSE } from './keycode/KeyCodes.js';\n\n/**\n * @typedef {import('./state/AxisState.js').AxisReadOnly} AxisReadOnly\n * @typedef {import('./state/ButtonState.js').ButtonReadOnly} ButtonReadOnly\n */\n\nconst MOUSE_SOURCE = Symbol('mouseSource');\nexport class Mouse {\n  constructor(eventTarget, opts) {\n    /** @type {AxisReadOnly} */\n    this.PosX = new AxisState();\n    /** @type {AxisReadOnly} */\n    this.PosY = new AxisState();\n\n    /** @type {AxisReadOnly} */\n    this.WheelX = new AxisState();\n    /** @type {AxisReadOnly} */\n    this.WheelY = new AxisState();\n    /** @type {AxisReadOnly} */\n    this.WheelZ = new AxisState();\n\n    /** @type {ButtonReadOnly} */\n    this.Button0 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Button1 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Button2 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Button3 = new ButtonState();\n    /** @type {ButtonReadOnly} */\n    this.Button4 = new ButtonState();\n\n    const deviceName = MOUSE;\n    const device = new MouseDevice(deviceName, eventTarget, opts);\n    const bindings = new InputBindings();\n    for (let key in this) {\n      if (Object.prototype.hasOwnProperty.call(this, key)) {\n        let input = /** @type {AxisState|ButtonState} */ (this[key]);\n        bindings.bind(input, deviceName, key);\n      }\n    }\n    const adapter = new DeviceInputAdapter(bindings);\n    device.addEventListener('input', adapter.onInput);\n    const autopoller = new AutoPoller(adapter);\n    autopoller.start();\n    this[MOUSE_SOURCE] = {\n      device,\n      bindings,\n      adapter,\n      autopoller,\n    };\n  }\n\n  destroy() {\n    const source = this[MOUSE_SOURCE];\n    source.autopoller.stop();\n    source.device.removeEventListener('input', source.adapter.onInput);\n    source.device.destroy();\n    source.bindings.clear();\n  }\n}\n"],"names":["InputState","polling","performance","now","this","_lastPollingTime","value","size","_size","constructor","Number","MIN_SAFE_INTEGER","resize","newSize","getState","code","Error","onUpdate","delta","onStatus","onPoll","onBind","opts","onUnbind","AxisState","static","inverted","_delta","_value","super","state","Array","c","i","push","createAxisBindingState","_state","newState","oldState","oldSize","length","slice","accumulatedValue","accumulatedDelta","len","onAxisChange","onAxisMove","onAxisStatus","x","dx","prev","ButtonState","pressed","_pressed","repeated","_repeated","released","_released","down","_down","Uint8Array","set","result","v","onButtonPressed","onButtonReleased","onButtonStatus","bits","isDown","wasDown","Boolean","KeyCode","string","trim","indexOf","device","substring","key","toString","from","KEYBOARD","MOUSE","KEY_A","KEY_B","KEY_C","KEY_D","KEY_E","KEY_F","KEY_G","KEY_H","KEY_I","KEY_J","KEY_K","KEY_L","KEY_M","KEY_N","KEY_O","KEY_P","KEY_Q","KEY_R","KEY_S","KEY_T","KEY_U","KEY_V","KEY_W","KEY_X","KEY_Y","KEY_Z","DIGIT_0","DIGIT_1","DIGIT_2","DIGIT_3","DIGIT_4","DIGIT_5","DIGIT_6","DIGIT_7","DIGIT_8","DIGIT_9","MINUS","EQUAL","BRACKET_LEFT","BRACKET_RIGHT","SEMICOLON","QUOTE","BACKQUOTE","BACKSLASH","COMMA","PERIOD","SLASH","ESCAPE","SPACE","CAPS_LOCK","BACKSPACE","DELETE","TAB","ENTER","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","MOUSE_BUTTON_0","MOUSE_BUTTON_1","MOUSE_BUTTON_2","MOUSE_BUTTON_3","MOUSE_BUTTON_4","MOUSE_POS_X","MOUSE_POS_Y","MOUSE_WHEEL_X","MOUSE_WHEEL_Y","MOUSE_WHEEL_Z","object","InputBinding","ref","disabled","name","bindTo","inputContext","disable","force","stringsToKeyCodes","strings","isArray","str","keyCode","parse","e","keyName","camelToSnakeCase","toUpperCase","KeyCodes","replace","_","a","b","toLowerCase","AxisBinding","keyCodes","bindAxis","getAxis","ButtonBinding","bindButton","getButton","AxisButtonBinding","negativeCode","positiveCode","negativeKeyCode","positiveKeyCode","bindAxisButtons","InputDevice","deviceName","eventTarget","listeners","input","setEventTarget","destroy","event","addEventListener","listener","removeEventListener","list","splice","dispatchInputEvent","flag","KeyboardDevice","ignoreRepeat","_eventObject","target","control","shift","alt","onKeyDown","bind","onKeyUp","repeat","preventDefault","stopPropagation","ctrlKey","shiftKey","altKey","MouseDevice","isAxis","eventsOnFocus","canvasTarget","getCanvasFromEventTarget","_downHasFocus","_positionObject","movement","_wheelObject","onMouseDown","onMouseUp","onMouseMove","onContextMenu","onWheel","document","setPointerLock","requestPointerLock","exitPointerLock","hasPointerLock","pointerLockElement","button","activeElement","dy","dz","deltaMode","WheelEvent","DOM_DELTA_LINE","deltaX","deltaY","deltaZ","DOM_DELTA_PAGE","DOM_DELTA_PIXEL","element","clientWidth","clientHeight","rect","getBoundingClientRect","movementX","movementY","clientX","left","y","clientY","top","HTMLCanvasElement","canvas","querySelector","shadowRoot","InputCode","HTMLElement","Symbol","for","t","createElement","innerHTML","Object","defineProperty","customElements","window","define","observedAttributes","_disabled","toggleAttribute","setAttribute","_name","attachShadow","mode","appendChild","content","cloneNode","_kbdElement","_nameElement","_valueElement","attributeChangedCallback","attribute","textContent","classList","toggle","style","paddingRight","connectedCallback","prototype","hasOwnProperty","call","AutoPoller","pollable","onAnimationFrame","animationFrameHandle","running","start","handle","cancelAnimationFrame","requestAnimationFrame","stop","DeviceInputAdapter","bindings","onInput","getInputs","getBindings","index","undefined","Binding","InputBindings","bindingMap","inputMap","Map","clear","keys","binding","has","get","unbind","boundList","delete","isBound","getBindingsByInput","deviceCodeBindings","codeBindings","InputContext","inputs","devices","adapter","autopoller","anyButton","anyButtonDevice","anyButtonCode","anyAxis","anyAxisDevice","anyAxisCode","focus","blur","onEventTargetBlur","onEventTargetFocus","autopoll","toggleAutoPoll","oldEventTarget","current","next","dispatchEvent","type","poll","bindBindings","values","bindBinding","hasButton","hasAxis","unbindButton","unbindAxis","getInput","isButtonDown","isButtonPressed","isButtonReleased","getInputValue","getButtonValue","getAxisValue","getAxisDelta","isAnyButtonDown","include","buttons","isAnyButtonPressed","isAnyButtonReleased","getAnyAxisValue","axes","axis","getAnyAxisDelta","getLastButtonDevice","getLastButtonCode","getLastAxisDevice","getLastAxisCode","getMouse","getKeyboard","InputPort","root","body","forId","_autopoll","_for","_titleElement","_pollElement","_focusElement","_bodyElement","_outputElements","_eventTarget","_context","onInputContextBind","onInputContextUnbind","onInputContextFocus","onInputContextBlur","updateTable","updateTableValues","disconnectedCallback","ctx","getElementById","tagName","updatePollStatus","getContext","contextId","options","isConnected","context","primaryElements","entries","primary","createInputTableEntry","entry","innerText","toFixed","row","add","data","output","kbd","KEYBOARD_SOURCE","MOUSE_SOURCE","KeyA","KeyB","KeyC","KeyD","KeyE","KeyF","KeyG","KeyH","KeyI","KeyJ","KeyK","KeyL","KeyM","KeyN","KeyO","KeyP","KeyQ","KeyR","KeyS","KeyT","KeyU","KeyV","KeyW","KeyX","KeyY","KeyZ","Digit0","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9","Minus","Equal","BracketLeft","BracketRight","Semicolon","Quote","Backquote","Backslash","Comma","Period","Slash","Escape","Space","CapsLock","Backspace","Delete","Tab","Enter","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","source","PosX","PosY","WheelX","WheelY","WheelZ","Button0","Button1","Button2","Button3","Button4"],"mappings":"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"}